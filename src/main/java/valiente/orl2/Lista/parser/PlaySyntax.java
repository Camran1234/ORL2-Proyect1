
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package valiente.orl2.Lista.parser;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import valiente.orl2.phyton.error.SyntaxError;
import valiente.orl2.reproduccion.ListaReproduccion;
import valiente.orl2.reproduccion.PlayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PlaySyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PlaySym.class;
}

  /** Default constructor. */
  @Deprecated
  public PlaySyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PlaySyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PlaySyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\016\007\000\002\016\007\000\002\016\007\000\002" +
    "\016\002\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\013\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\006\005\000\002\006\005\000\002\007\004\000\002" +
    "\007\004\000\002\010\005\000\002\010\005\000\002\010" +
    "\002\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\005\020\004\001\002\000\006\003" +
    "\141\004\013\001\002\000\006\003\012\004\013\001\002" +
    "\000\004\002\010\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002\000\004\021\137\001\002\000\004" +
    "\022\134\001\002\000\006\003\015\022\014\001\002\000" +
    "\006\003\017\020\016\001\002\000\006\003\017\020\016" +
    "\001\002\000\006\003\131\005\040\001\002\000\006\003" +
    "\037\005\040\001\002\000\010\003\ufff5\021\ufff5\023\022" +
    "\001\002\000\006\003\ufff9\021\ufff9\001\002\000\006\003" +
    "\023\004\024\001\002\000\004\022\033\001\002\000\006" +
    "\003\026\022\025\001\002\000\006\003\017\020\016\001" +
    "\002\000\006\003\017\020\016\001\002\000\010\003\ufff5" +
    "\021\ufff5\023\022\001\002\000\006\003\ufff6\021\ufff6\001" +
    "\002\000\010\003\ufff5\021\ufff5\023\022\001\002\000\006" +
    "\003\ufff8\021\ufff8\001\002\000\006\003\017\020\016\001" +
    "\002\000\010\003\ufff5\021\ufff5\023\022\001\002\000\006" +
    "\003\ufff7\021\ufff7\001\002\000\010\003\ufff3\021\ufff3\023" +
    "\ufff3\001\002\000\004\022\125\001\002\000\006\003\042" +
    "\022\041\001\002\000\006\003\122\013\121\001\002\000" +
    "\004\013\043\001\002\000\010\003\045\021\047\023\044" +
    "\001\002\000\012\003\051\006\053\007\050\010\056\001" +
    "\002\000\010\003\uffe9\021\uffe9\023\uffe9\001\002\000\010" +
    "\003\uffef\021\uffef\023\uffef\001\002\000\010\003\uffe8\021" +
    "\uffe8\023\uffe8\001\002\000\006\003\115\022\114\001\002" +
    "\000\010\003\045\021\047\023\044\001\002\000\010\003" +
    "\045\021\047\023\044\001\002\000\006\003\104\022\103" +
    "\001\002\000\010\003\045\021\047\023\044\001\002\000" +
    "\010\003\045\021\047\023\044\001\002\000\006\003\060" +
    "\022\057\001\002\000\006\003\100\015\062\001\002\000" +
    "\004\015\062\001\002\000\010\003\uffe6\021\uffe6\023\uffe6" +
    "\001\002\000\006\003\063\014\064\001\002\000\010\003" +
    "\uffd8\016\uffd8\023\070\001\002\000\010\003\uffd8\016\uffd8" +
    "\023\070\001\002\000\006\003\066\016\067\001\002\000" +
    "\010\003\uffdd\021\uffdd\023\uffdd\001\002\000\010\003\uffde" +
    "\021\uffde\023\uffde\001\002\000\006\003\072\014\073\001" +
    "\002\000\006\003\uffdc\016\uffdc\001\002\000\010\003\uffd8" +
    "\016\uffd8\023\070\001\002\000\010\003\uffd8\016\uffd8\023" +
    "\070\001\002\000\006\003\uffda\016\uffda\001\002\000\006" +
    "\003\uffd9\016\uffd9\001\002\000\006\003\uffdb\016\uffdb\001" +
    "\002\000\010\003\uffe7\021\uffe7\023\uffe7\001\002\000\010" +
    "\003\uffe5\021\uffe5\023\uffe5\001\002\000\010\003\uffeb\021" +
    "\uffeb\023\uffeb\001\002\000\010\003\uffed\021\uffed\023\uffed" +
    "\001\002\000\010\003\110\011\106\012\107\001\002\000" +
    "\006\011\106\012\107\001\002\000\010\003\uffe0\021\uffe0" +
    "\023\uffe0\001\002\000\010\003\uffd7\021\uffd7\023\uffd7\001" +
    "\002\000\010\003\uffd6\021\uffd6\023\uffd6\001\002\000\010" +
    "\003\uffdf\021\uffdf\023\uffdf\001\002\000\010\003\uffe1\021" +
    "\uffe1\023\uffe1\001\002\000\010\003\uffec\021\uffec\023\uffec" +
    "\001\002\000\010\003\uffea\021\uffea\023\uffea\001\002\000" +
    "\010\003\117\011\106\012\107\001\002\000\006\011\106" +
    "\012\107\001\002\000\010\003\uffe3\021\uffe3\023\uffe3\001" +
    "\002\000\010\003\uffe2\021\uffe2\023\uffe2\001\002\000\010" +
    "\003\uffe4\021\uffe4\023\uffe4\001\002\000\010\003\045\021" +
    "\047\023\044\001\002\000\010\003\045\021\047\023\044" +
    "\001\002\000\010\003\uffee\021\uffee\023\uffee\001\002\000" +
    "\010\003\ufff1\021\ufff1\023\ufff1\001\002\000\004\013\126" +
    "\001\002\000\010\003\045\021\047\023\044\001\002\000" +
    "\010\003\ufff0\021\ufff0\023\ufff0\001\002\000\010\003\ufff4" +
    "\021\ufff4\023\ufff4\001\002\000\012\003\ufff2\021\ufff2\022" +
    "\125\023\ufff2\001\002\000\010\003\ufff5\021\ufff5\023\022" +
    "\001\002\000\006\003\ufffb\021\ufffb\001\002\000\006\003" +
    "\017\020\016\001\002\000\010\003\ufff5\021\ufff5\023\022" +
    "\001\002\000\006\003\ufffa\021\ufffa\001\002\000\004\002" +
    "\ufffe\001\002\000\006\003\143\021\144\001\002\000\006" +
    "\021\142\022\134\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\002\005\017\006\001\001\000\004\015" +
    "\137\001\001\000\004\015\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\131\001\001" +
    "\000\004\014\017\001\001\000\004\012\127\001\001\000" +
    "\004\012\035\001\001\000\004\016\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\030\001\001\000\004\014\026\001\001" +
    "\000\004\016\027\001\001\000\002\001\001\000\004\016" +
    "\031\001\001\000\002\001\001\000\004\014\033\001\001" +
    "\000\004\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\045\001\001\000\010\004" +
    "\051\005\053\011\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\112\001\001\000\004\013\111\001\001\000\002\001\001" +
    "\000\004\013\101\001\001\000\004\013\100\001\001\000" +
    "\002\001\001\000\004\006\076\001\001\000\004\006\060" +
    "\001\001\000\002\001\001\000\004\007\064\001\001\000" +
    "\004\010\075\001\001\000\004\010\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\074\001\001\000\004" +
    "\010\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\110\001\001\000" +
    "\004\003\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\117\001\001" +
    "\000\004\003\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\123\001\001\000\004" +
    "\013\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\132\001" +
    "\001\000\002\001\001\000\004\014\134\001\001\000\004" +
    "\016\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PlaySyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PlaySyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PlaySyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    PlayList lista = null;
    int errors=0;
    String tokenError="";
    int lineError, columnError =0;
    String expectedTokens="";
    ArrayList<SyntaxError> list = new ArrayList();
        
        public PlayList getLista(){
            return lista;
        }

        public ArrayList<SyntaxError> getList(){
                return list;
        }

        public void report_error(String message, Object info) { 
                if (info instanceof String){
                        Symbol s = cur_token;
                        //System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);;
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
        }

        public void report_error_final(String message, Object info){
                if (info instanceof String){
                        Symbol s = cur_token;
                        errors++;       
                        //System.err.println("  "+ errors + "==> " + info + ": "+ message);
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
                
        }

    @Override
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
            int column = symbol.right;
            String token = (String) cur_token.value;
            //We get the production
                tokenError = token;
                lineError = line;
                columnError = column;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ",";
                }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
                tokenError = (String) cur_token.value;
                lineError = symbol.left;
                columnError = symbol.right;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
                report_error_final("Estado Ilegal de Expresion", "Sintaxis incorrecta");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PlaySyntax$actions {
  private final PlaySyntax parser;

  /** Constructor */
  CUP$PlaySyntax$actions(PlaySyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PlaySyntax$do_action_part00000000(
    int                        CUP$PlaySyntax$act_num,
    java_cup.runtime.lr_parser CUP$PlaySyntax$parser,
    java.util.Stack            CUP$PlaySyntax$stack,
    int                        CUP$PlaySyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PlaySyntax$result;

      /* select the action based on the action number */
      switch (CUP$PlaySyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= node EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		RESULT = start_val;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PlaySyntax$parser.done_parsing();
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // node ::= main_body 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> m = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
            lista = new PlayList();
            lista.setLista(m);
        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("node",0, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_body ::= OPEN_CURLY productions CLOSE_CURLY 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ArrayList<ListaReproduccion> p = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		RESULT=p;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("main_body",13, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_body ::= error productions CLOSE_CURLY 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		parser.report_error("Se esperaba \"{\" ","Inicio ilegal de la expresion");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("main_body",13, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_body ::= OPEN_CURLY productions error 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		parser.report_error("Se esperaba \"}\" ","Inicio ilegal de la expresion");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("main_body",13, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_body ::= OPEN_CURLY error CLOSE_CURLY 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		parser.report_error("Lista mal declarada","Incapacidad de lectura");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("main_body",13, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // productions ::= LISTA SEMI_COLON parameters productions_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ListaReproduccion p = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> pr = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                    if(p!=null){
                        if(pr!=null){
                            pr.add(p); 
                        }  
                    }
                    RESULT = pr;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions",11, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // productions ::= error SEMI_COLON parameters productions_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ListaReproduccion p = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> pr = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba la palabra Lista ","Inicio ilegal de la expresion");
                 if(p!=null){
                        if(pr!=null){
                            pr.add(p); 
                        }  
                    }
                    RESULT = pr;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions",11, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // productions ::= LISTA error parameters productions_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ListaReproduccion p = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> pr = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba \":\" ","Inicio ilegal de la expresion");
                 if(p!=null){
                        if(pr!=null){
                            pr.add(p); 
                        }  
                    }
                    RESULT = pr;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions",11, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // productions_re ::= COMA LISTA SEMI_COLON parameters productions_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ListaReproduccion p = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> pr = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                    if(p!=null){
                        if(pr!=null){
                            pr.add(p);
                        }
                    }
                    RESULT = pr;
                
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions_re",12, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // productions_re ::= COMA error SEMI_COLON parameters productions_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		parser.report_error("Se esperaba la palabra Lista ","Inicio ilegal de la expresion");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions_re",12, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // productions_re ::= COMA LISTA error parameters productions_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		parser.report_error("Se esperaba \":\" ","Inicio ilegal de la expresion");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions_re",12, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // productions_re ::= 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		 RESULT = new ArrayList<ListaReproduccion>(); 
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("productions_re",12, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= OPEN_CURLY status 
            {
              ListaReproduccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion s = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                RESULT = s;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= error status 
            {
              ListaReproduccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion s = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba \"{\" ","Inicio ilegal de la expresion"); RESULT=s;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= OPEN_CURLY error 
            {
              ListaReproduccion RESULT =null;
		parser.report_error("Parametros mal declarados ","Instruccion no leible");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // status ::= NOMBRE SEMI_COLON STRING new_status 
            {
              ListaReproduccion RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                if(str!=null){
                    if(n!=null){
                        String newString = str.toString();
                        newString = newString.substring(1, newString.length()-1);
                        n.setNombre(newString,cur_token.left, cur_token.right);
                    }
                }
                RESULT = n;
        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("status",8, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // status ::= error SEMI_COLON STRING new_status 
            {
              ListaReproduccion RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba la palabra: nombre ","Inicio ilegal de la expresion");
            if(str!=null){
                    if(n!=null){
                        String newString = str.toString();
                        newString = newString.substring(1, newString.length()-1);
                        n.setNombre(newString,cur_token.left, cur_token.right);
                    }
                }
                RESULT = n;
        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("status",8, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // status ::= NOMBRE error STRING new_status 
            {
              ListaReproduccion RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba \":\" ","Inicio ilegal de la expresion");
            if(str!=null){
                    if(n!=null){
                        String newString = str.toString();
                        newString = newString.substring(1, newString.length()-1);
                        n.setNombre(newString,cur_token.left, cur_token.right);
                    }
                }
                RESULT = n;
        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("status",8, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // status ::= NOMBRE SEMI_COLON error new_status 
            {
              ListaReproduccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba el nombre de la pista en comillas dobles","String esperado"); RESULT=n;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("status",8, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // new_status ::= COMA random new_status 
            {
              ListaReproduccion RESULT =null;
		int randleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int randright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Boolean rand = (Boolean)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                if(rand!=null){
                    if(n!=null){
                        n.setRandom(rand,cur_token.left, cur_token.right);
                    }
                }
                RESULT = n;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("new_status",9, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // new_status ::= COMA circular new_status 
            {
              ListaReproduccion RESULT =null;
		int cirleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int cirright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Boolean cir = (Boolean)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                if(cir!=null){
                    if(n!=null){
                        n.setCircular(cir,cur_token.left, cur_token.right);
                    }
                }
                RESULT = n;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("new_status",9, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // new_status ::= COMA pista new_status 
            {
              ListaReproduccion RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ArrayList<String> pis = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
                if(pis!=null){
                    if(n!=null){
                        n.setPistas(pis,cur_token.left, cur_token.right);
                    }
                }
                RESULT = n;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("new_status",9, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // new_status ::= COMA error new_status 
            {
              ListaReproduccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ListaReproduccion n = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("No se menciono el parametro de la lista","Parametros mal declarados"); RESULT=n;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("new_status",9, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // new_status ::= error 
            {
              ListaReproduccion RESULT =null;
		parser.report_error("Parametros mal declarados","Inicio ilegal de la expresion");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("new_status",9, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // new_status ::= CLOSE_CURLY 
            {
              ListaReproduccion RESULT =null;
		
                ListaReproduccion lista = new ListaReproduccion(cur_token.left, cur_token.right);
                RESULT = lista;
            
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("new_status",9, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pista ::= PISTA SEMI_COLON look_pista 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		RESULT = e;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pista",7, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pista ::= PISTA error look_pista 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba \":\" ","Inicio ilegal de la expresion"); RESULT =e;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pista",7, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pista ::= PISTA SEMI_COLON error 
            {
              ArrayList<String> RESULT =null;
		parser.report_error("Se esperaba pistas adentro de los corchetes ","Inicio ilegal de la expresion");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pista",7, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // circular ::= CIRCULAR SEMI_COLON options 
            {
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		RESULT=op;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("circular",2, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // circular ::= CIRCULAR error options 
            {
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba \":\" ","Inicio ilegal de la expresion"); RESULT=op;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("circular",2, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // circular ::= CIRCULAR SEMI_COLON error 
            {
              Boolean RESULT =null;
		parser.report_error("Se esperaba la palbra: \"true\" o \"false\" ","Opciones invalidas");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("circular",2, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // random ::= RANDOM SEMI_COLON options 
            {
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		RESULT=op;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("random",3, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // random ::= RANDOM error options 
            {
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba \":\" ","Inicio ilegal de la expresion"); RESULT=op;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("random",3, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // random ::= RANDOM SEMI_COLON error 
            {
              Boolean RESULT =null;
		parser.report_error("Se esperaba la palbra: \"true\" o \"false\" ","Opciones invalidas");
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("random",3, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // look_pista ::= OPEN_BRACKET pistas CLOSE_BRACKET 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		RESULT =e;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("look_pista",4, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // look_pista ::= OPEN_BRACKET pistas error 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		parser.report_error("Se esperaba \"]\" ","Inicio ilegal de la expresion"); RESULT =e;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("look_pista",4, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pistas ::= SIMBOLO pistas_re 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<String> pi = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
        if(e!=null && pi!=null){
            pi.add(e.toString());
            RESULT = pi;
        }
        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pistas",5, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pistas ::= error pistas_re 
            {
              ArrayList<String> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<String> pi = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba un identificador ","Nombre esperado");
            RESULT = pi;
        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pistas",5, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pistas_re ::= COMA SIMBOLO pistas_re 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<String> pi = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		
            if(e!=null && pi!=null){
                pi.add(e.toString());
                RESULT = pi;
            }

        
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pistas_re",6, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pistas_re ::= COMA error pistas_re 
            {
              ArrayList<String> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()).right;
		ArrayList<String> pi = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PlaySyntax$stack.peek()).value;
		parser.report_error("Se esperaba un identificador ","Nombre esperado"); RESULT = pi;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pistas_re",6, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.elementAt(CUP$PlaySyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pistas_re ::= 
            {
              ArrayList<String> RESULT =null;
		RESULT = new ArrayList<String>();
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("pistas_re",6, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // options ::= TRUE 
            {
              Boolean RESULT =null;
		RESULT=true;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("options",1, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // options ::= FALSE 
            {
              Boolean RESULT =null;
		RESULT=false;
              CUP$PlaySyntax$result = parser.getSymbolFactory().newSymbol("options",1, ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaySyntax$stack.peek()), RESULT);
            }
          return CUP$PlaySyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PlaySyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PlaySyntax$do_action(
    int                        CUP$PlaySyntax$act_num,
    java_cup.runtime.lr_parser CUP$PlaySyntax$parser,
    java.util.Stack            CUP$PlaySyntax$stack,
    int                        CUP$PlaySyntax$top)
    throws java.lang.Exception
    {
              return CUP$PlaySyntax$do_action_part00000000(
                               CUP$PlaySyntax$act_num,
                               CUP$PlaySyntax$parser,
                               CUP$PlaySyntax$stack,
                               CUP$PlaySyntax$top);
    }
}

}
