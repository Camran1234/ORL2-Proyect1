// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: PhytonLexic.flex

package valiente.orl2.phyton.parser;
import com.sun.org.apache.xalan.internal.xsltc.compiler.sym;
import java_cup.runtime.*;
import static valiente.orl2.phyton.parser.PhytonSym.*;
import valiente.orl2.phyton.error.LexicalError;
import java.util.ArrayList;
// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class PhytonLexic implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\1\0\1\3\20\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\1\0\1\26\1\27\1\30\1\31\2\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\40\1\43\1\44\1\45\1\40\1\46\1\47\1\40"+
    "\1\50\1\51\1\52\1\40\1\53\4\40\1\54\1\55"+
    "\1\56\1\57\2\40\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\43\1\72\1\73"+
    "\1\74\1\75\1\76\1\40\1\77\1\100\1\101\1\102"+
    "\1\53\1\103\1\104\1\40\1\105\1\106\1\107\1\110"+
    "\7\0\1\3\32\0\1\3\u01df\0\1\3\177\0\13\3"+
    "\35\0\2\3\5\0\1\3\57\0\1\3\240\0\1\3"+
    "\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\0\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\2\16\1\17\1\20\1\21\1\22\5\23\1\24"+
    "\12\23\2\25\1\26\1\23\1\27\1\30\3\25\1\24"+
    "\2\25\1\24\1\31\1\0\1\32\1\33\1\0\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\16\1\0\1\45\1\46\1\47\1\0\6\23"+
    "\1\50\3\23\1\51\4\23\1\52\2\23\1\53\4\23"+
    "\1\54\1\23\1\55\4\23\1\56\1\57\1\60\1\0"+
    "\1\61\11\23\1\62\4\23\1\63\12\23\1\64\4\23"+
    "\1\65\2\23\1\66\1\0\1\61\5\23\1\67\11\23"+
    "\1\70\13\23\1\71\2\23\1\61\10\23\1\72\3\23"+
    "\1\73\5\23\1\74\1\75\4\23\1\76\5\23\1\77"+
    "\4\23\1\100\7\23\1\101\4\23\1\102\1\103\1\23"+
    "\1\104\2\23\1\105\1\23\1\106\1\23\1\107\1\23"+
    "\1\110\1\23\1\111\2\23\1\112\2\23\1\113\2\23"+
    "\1\114\1\115\1\116\4\23\1\117\1\23\1\120\1\23"+
    "\1\121\1\122\1\23\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\222\0\222\0\333\0\u0124\0\111"+
    "\0\u016d\0\u01b6\0\222\0\222\0\222\0\u01ff\0\222\0\u0248"+
    "\0\u0291\0\222\0\u02da\0\u0323\0\222\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u05fd\0\u08d7\0\u05fd\0\u0920\0\u05fd\0\u05fd\0\u0447\0\u0522"+
    "\0\u056b\0\u0721\0\u07b3\0\u0845\0\u088e\0\111\0\u0969\0\111"+
    "\0\222\0\u09b2\0\222\0\u09fb\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\u0291\0\u0a44\0\u0a8d\0\222\0\111"+
    "\0\222\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u05fd\0\u0df9\0\u0e42\0\u0e8b"+
    "\0\u0ed4\0\u05fd\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a"+
    "\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2"+
    "\0\222\0\222\0\222\0\u131b\0\u0ad6\0\u1364\0\u13ad\0\u13f6"+
    "\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\222\0\u15f5"+
    "\0\u163e\0\u1687\0\u16d0\0\u05fd\0\u1719\0\u1762\0\u17ab\0\u17f4"+
    "\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\222\0\u19f3"+
    "\0\u1a3c\0\u1a85\0\u1ace\0\u05fd\0\u1b17\0\u1b60\0\u05fd\0\u1ba9"+
    "\0\222\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u05fd\0\u1d5f"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7"+
    "\0\u05fd\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u05fd\0\u2313\0\u235c\0\u0a8d"+
    "\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\u05fd\0\u25ed\0\u2636\0\u267f\0\u05fd\0\u26c8\0\u2711\0\u275a"+
    "\0\u27a3\0\u27ec\0\u05fd\0\u05fd\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u05fd\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u05fd\0\u2ac6"+
    "\0\u2b0f\0\u2b58\0\u2ba1\0\u05fd\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5"+
    "\0\u2d0e\0\u2d57\0\u2da0\0\u05fd\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4"+
    "\0\u05fd\0\u05fd\0\u2f0d\0\u05fd\0\u2f56\0\u2f9f\0\u05fd\0\u2fe8"+
    "\0\u05fd\0\u3031\0\u05fd\0\u307a\0\u05fd\0\u30c3\0\u05fd\0\u310c"+
    "\0\u3155\0\u05fd\0\u319e\0\u31e7\0\u05fd\0\u3230\0\u3279\0\u05fd"+
    "\0\u05fd\0\u05fd\0\u32c2\0\u330b\0\u3354\0\u339d\0\u05fd\0\u33e6"+
    "\0\u05fd\0\u342f\0\u05fd\0\u05fd\0\u3478\0\u05fd\0\u05fd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\0"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\32\1\33\1\60\1\61\1\36\1\37\1\40"+
    "\1\41\1\37\1\62\1\44\1\37\1\63\1\46\1\64"+
    "\1\65\2\51\3\37\1\66\1\67\1\70\1\2\7\0"+
    "\2\2\10\0\1\2\1\0\2\2\2\0\1\2\1\0"+
    "\23\2\1\0\31\2\1\0\1\2\116\0\1\71\4\0"+
    "\1\72\15\0\1\73\56\0\1\74\1\0\6\7\1\75"+
    "\102\7\5\0\1\76\4\0\1\77\76\0\13\12\1\100"+
    "\75\12\17\0\1\101\10\0\1\102\101\0\1\103\67\0"+
    "\1\2\7\0\2\2\10\0\1\2\1\0\2\104\2\0"+
    "\1\2\1\0\23\2\1\0\31\2\1\0\2\2\7\0"+
    "\2\2\10\0\1\21\1\0\2\105\2\0\1\2\1\0"+
    "\23\2\1\0\31\2\1\0\2\2\7\0\2\2\10\0"+
    "\1\21\1\0\2\24\2\0\1\2\1\0\23\2\1\0"+
    "\31\2\1\0\1\2\21\0\1\106\6\0\1\107\60\0"+
    "\1\2\7\0\2\2\10\0\1\2\1\0\2\2\2\0"+
    "\1\110\1\0\23\2\1\0\31\2\1\0\1\2\30\0"+
    "\1\111\1\112\57\0\1\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\21\37\1\113\1\114\5\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\17\37"+
    "\1\115\10\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\116\14\37\1\117\10\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\6\37\1\120\10\37\1\121\10\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\16\37"+
    "\1\122\3\37\1\123\3\37\1\124\1\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\2\37"+
    "\1\125\14\37\1\126\10\37\1\2\1\54\2\2\7\0"+
    "\1\37\1\2\2\0\2\54\4\0\1\2\1\0\2\37"+
    "\2\0\1\2\1\0\23\37\1\54\30\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\2\37"+
    "\1\127\25\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\15\37\1\130\12\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\131\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\132\14\37\1\133\10\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\6\37\1\134\3\37\1\135\15\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\21\37"+
    "\1\136\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\137\7\37\1\140\6\37"+
    "\1\141\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\6\37\1\142\21\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\2\37"+
    "\1\143\7\37\1\144\4\37\1\145\4\37\1\146\1\147"+
    "\2\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\2\37\1\150\25\37\1\2\1\54\1\2"+
    "\10\0\1\54\3\0\2\54\6\0\2\54\4\0\54\54"+
    "\1\0\1\54\110\0\1\151\13\0\1\152\205\0\1\153"+
    "\1\0\1\2\7\0\2\2\10\0\1\2\1\0\2\105"+
    "\2\0\1\2\1\0\23\2\1\0\31\2\1\0\1\2"+
    "\21\106\1\154\67\106\2\155\1\0\106\155\1\2\7\0"+
    "\1\37\1\2\2\0\2\54\4\0\1\2\1\0\2\37"+
    "\2\0\1\2\1\0\23\37\1\54\21\37\1\156\6\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\4\37\1\157\23\37\1\2\1\54\2\2\7\0"+
    "\1\37\1\2\2\0\2\54\4\0\1\2\1\0\2\37"+
    "\2\0\1\2\1\0\23\37\1\54\17\37\1\160\10\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\5\37\1\161\13\37\1\162\1\163\5\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\16\37\1\164\11\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\7\37\1\165\12\37\1\166"+
    "\5\37\1\2\1\54\2\2\6\0\1\167\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\3\37\1\170\24\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\23\37"+
    "\1\171\4\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\20\37\1\172\7\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\23\37"+
    "\1\173\4\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\174\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\4\37"+
    "\1\175\23\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\20\37\1\176\7\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\177\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\16\37\1\200\11\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\16\37"+
    "\1\201\11\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\6\37\1\202\21\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\5\37"+
    "\1\203\22\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\204\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\22\37"+
    "\1\205\5\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\12\37\1\206\15\37\1\2\1\54"+
    "\2\2\6\0\1\207\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\20\37\1\210\2\37\1\211\4\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\14\37\1\212"+
    "\13\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\16\37\1\213\11\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\14\37\1\214"+
    "\13\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\15\37\1\215\12\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\12\37\1\216"+
    "\15\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\21\37\1\217\6\37\1\2\1\54\1\2"+
    "\21\106\1\220\7\106\1\221\57\106\1\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\6\37\1\222\21\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\6\37\1\223\21\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\14\37\1\224\13\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\6\37\1\225\21\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\2\37\1\226\25\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\17\37\1\227\10\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\23\37\1\230\4\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\2\37\1\231\25\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\4\37\1\232\23\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\14\37\1\233\13\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\6\37\1\234\21\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\6\37\1\235\21\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\12\37\1\236\15\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\6\37\1\237\21\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\2\37\1\240\25\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\20\37\1\241\7\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\10\37\1\242\17\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\22\37\1\243\5\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\16\37\1\244\11\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\6\37\1\245\21\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\6\37\1\246\21\37\1\2"+
    "\1\54\2\2\7\0\1\37\1\2\2\0\2\54\4\0"+
    "\1\2\1\0\2\37\2\0\1\2\1\0\23\37\1\54"+
    "\23\37\1\247\4\37\1\2\1\54\2\2\7\0\1\37"+
    "\1\2\2\0\2\54\4\0\1\2\1\0\2\37\2\0"+
    "\1\2\1\0\23\37\1\54\15\37\1\250\1\251\11\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\21\37\1\252\6\37\1\2\1\54\2\2\7\0"+
    "\1\37\1\2\2\0\2\54\4\0\1\2\1\0\2\37"+
    "\2\0\1\2\1\0\23\37\1\54\17\37\1\253\10\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\12\37\1\254\15\37\1\2\1\54\2\2\7\0"+
    "\1\37\1\2\2\0\2\54\4\0\1\2\1\0\2\37"+
    "\2\0\1\2\1\0\23\37\1\54\17\37\1\255\10\37"+
    "\1\2\1\54\2\2\7\0\1\37\1\2\2\0\2\54"+
    "\4\0\1\2\1\0\2\37\2\0\1\2\1\0\23\37"+
    "\1\54\2\37\1\256\25\37\1\2\1\54\2\2\7\0"+
    "\1\37\1\2\2\0\2\54\4\0\1\2\1\0\2\37"+
    "\2\0\1\2\1\0\23\37\1\54\23\37\1\257\4\37"+
    "\1\2\1\54\1\2\21\106\1\154\7\106\1\260\57\106"+
    "\1\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\10\37"+
    "\1\261\17\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\16\37\1\262\11\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\263\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\16\37\1\264\11\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\4\37"+
    "\1\265\23\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\12\37\1\266\15\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\24\37"+
    "\1\267\3\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\6\37\1\270\21\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\271\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\272\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\21\37"+
    "\1\273\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\6\37\1\274\21\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\21\37"+
    "\1\275\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\276\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\12\37"+
    "\1\277\15\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\300\25\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\23\37"+
    "\1\301\4\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\16\37\1\302\11\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\22\37"+
    "\1\303\5\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\304\25\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\17\37"+
    "\1\305\10\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\4\37\1\306\23\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\17\37"+
    "\1\307\10\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\310\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\21\37"+
    "\1\311\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\312\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\4\37"+
    "\1\313\23\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\14\37\1\314\13\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\5\37"+
    "\1\315\22\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\316\25\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\2\37"+
    "\1\317\25\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\23\37\1\320\4\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\16\37"+
    "\1\321\11\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\14\37\1\322\13\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\16\37"+
    "\1\323\11\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\17\37\1\324\10\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\2\37"+
    "\1\325\25\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\16\37\1\326\11\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\327\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\23\37\1\330\4\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\13\37"+
    "\1\331\14\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\21\37\1\332\6\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\2\37"+
    "\1\333\25\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\22\37\1\334\5\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\12\37"+
    "\1\335\15\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\5\37\1\336\22\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\16\37"+
    "\1\337\11\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\12\37\1\340\15\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\11\37"+
    "\1\341\16\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\17\37\1\342\10\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\343\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\16\37\1\344\11\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\345\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\24\37\1\346\3\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\23\37"+
    "\1\347\4\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\5\37\1\350\22\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\21\37"+
    "\1\351\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\5\37\1\352\22\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\22\37"+
    "\1\353\5\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\24\37\1\354\3\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\6\37"+
    "\1\355\21\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\356\25\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\21\37"+
    "\1\357\6\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\20\37\1\360\7\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\24\37"+
    "\1\361\3\37\1\2\1\54\2\2\7\0\1\37\1\2"+
    "\2\0\2\54\4\0\1\2\1\0\2\37\2\0\1\2"+
    "\1\0\23\37\1\54\2\37\1\362\25\37\1\2\1\54"+
    "\2\2\7\0\1\37\1\2\2\0\2\54\4\0\1\2"+
    "\1\0\2\37\2\0\1\2\1\0\23\37\1\54\27\37"+
    "\1\363\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\16\37\1\364\11\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\21\37\1\365"+
    "\6\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\2\37\1\366\25\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\6\37\1\367"+
    "\21\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\6\37\1\370\21\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\5\37\1\371"+
    "\22\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\22\37\1\372\5\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\2\37\1\373"+
    "\25\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\4\37\1\374\23\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\2\37\1\375"+
    "\25\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\23\37\1\376\4\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\21\37\1\377"+
    "\6\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\16\37\1\u0100\11\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\14\37\1\u0101"+
    "\13\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\12\37\1\u0102\15\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\21\37\1\u0103"+
    "\6\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\6\37\1\u0104\21\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\23\37\1\u0105"+
    "\4\37\1\2\1\54\2\2\7\0\1\37\1\2\2\0"+
    "\2\54\4\0\1\2\1\0\2\37\2\0\1\2\1\0"+
    "\23\37\1\54\21\37\1\u0106\6\37\1\2\1\54\2\2"+
    "\7\0\1\37\1\2\2\0\2\54\4\0\1\2\1\0"+
    "\2\37\2\0\1\2\1\0\23\37\1\54\6\37\1\u0107"+
    "\21\37\1\2\1\54\1\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13505];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\11\1\1\1\0\1\1\2\0\3\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\41\1\1\0"+
    "\1\1\1\11\1\0\1\11\1\0\7\11\2\1\1\0"+
    "\1\11\1\1\1\11\1\0\36\1\3\11\1\0\12\1"+
    "\1\11\17\1\1\11\10\1\1\0\1\11\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<LexicalError> list = new ArrayList();

    public ArrayList<LexicalError> getList(){
        return list;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhytonLexic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { LexicalError error = new LexicalError("Error Lexico",yyline+1, yycolumn+1);
    error.setDescription("Lexema no reconocido");
    error.setLexema(yytext());
    list.add(error);
            }
            // fall through
          case 85: break;
          case 2:
            { System.out.println("TAB");return new Symbol(TAB, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 3:
            { System.out.println("SALTO");return new Symbol(SPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 4:
            { /*Ignore*/
            }
            // fall through
          case 88: break;
          case 5:
            { System.out.println(yytext());return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 6:
            { System.out.println(yytext());return new Symbol(MODULE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 7:
            { System.out.println(yytext());return new Symbol(OPEN_PARENTHESIS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 8:
            { System.out.println(yytext());return new Symbol(CLOSE_PARENTHESIS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 9:
            { System.out.println(yytext());return new Symbol(MULTIPLY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 10:
            { System.out.println(yytext());return new Symbol(ADD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 11:
            { System.out.println(yytext());return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 12:
            { System.out.println(yytext());return new Symbol(MINUS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 13:
            { System.out.println(yytext());return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 14:
            { System.out.println("NUMERO "+yytext());return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 15:
            { System.out.println(yytext());return new Symbol(COLON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 16:
            { System.out.println(yytext());return new Symbol(LESSER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 17:
            { System.out.println(yytext());return new Symbol(EQUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 18:
            { System.out.println(yytext());return new Symbol(GREATER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 19:
            { System.out.println("SIMBOLO "+yytext());return new Symbol(SIMBOLO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 20:
            { System.out.println(yytext());return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 21:
            { System.out.println(yytext());return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 22:
            { System.out.println(yytext());return new Symbol(OPEN_BRACKET, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 23:
            { System.out.println(yytext());return new Symbol (CLOSE_BRACKET, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 24:
            { System.out.println(yytext());return new Symbol(POW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 25:
            { System.out.println(yytext());return new Symbol (OPEN_CURLY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 26:
            { System.out.println(yytext());return new Symbol (CLOSE_CURLY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 27:
            { System.out.println(yytext());return new Symbol(NULL_, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 28:
            { System.out.println(yytext());return new Symbol(DIFFERENTIATION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 29:
            { System.out.println(yytext());return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 30:
            { System.out.println(yytext());return new Symbol(XOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 31:
            { System.out.println(yytext());return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 32:
            { System.out.println(yytext());return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 33:
            { System.out.println(yytext());return new Symbol(INCREASE, yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 34:
            { System.out.println(yytext());return new Symbol(EQUAL_MORE,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 35:
            { System.out.println(yytext());return new Symbol(DECREASE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 36:
            { System.out.println("DECIMAL "+yytext());return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 37:
            { System.out.println(yytext());return new Symbol(LESSER_THAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 38:
            { System.out.println(yytext());return new Symbol(EQUALIZATION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 39:
            { System.out.println(yytext());return new Symbol(GREATER_THAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 40:
            { System.out.println(yytext());return new Symbol(DO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 41:
            { System.out.println(yytext());return new Symbol(FA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 42:
            { System.out.println(yytext());return new Symbol(LA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 43:
            { System.out.println(yytext());return new Symbol(MI, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 44:
            { System.out.println(yytext());return new Symbol(RE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 45:
            { System.out.println(yytext());return new Symbol(SI, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 46:
            { System.out.println(yytext());return new Symbol(OR, yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 130: break;
          case 47:
            { System.out.println(yytext());return new Symbol(NAND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 48:
            { System.out.println(yytext());return new Symbol(NOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 49:
            { /*empty*/
            }
            // fall through
          case 133: break;
          case 50:
            { System.out.println(yytext());return new Symbol(DOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 51:
            { System.out.println(yytext());return new Symbol(FOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 52:
            { System.out.println(yytext());return new Symbol(RER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 53:
            { System.out.println(yytext());return new Symbol(SOL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 54:
            { System.out.println(yytext());return new Symbol(VAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 55:
            { System.out.println(yytext());return new Symbol(CASE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 56:
            { System.out.println(yytext());return new Symbol(KEEP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 57:
            { System.out.println(yytext());return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 58:
            { System.out.println(yytext());return new Symbol(DOBLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 59:
            { System.out.println(yytext());return new Symbol(HACER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 60:
            { System.out.println(yytext());return new Symbol(PARES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 61:
            { System.out.println(yytext());return new Symbol(PISTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 62:
            { System.out.println(yytext());return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 63:
            { System.out.println(yytext());return new Symbol(CADENA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 64:
            { System.out.println(yytext());return new Symbol(ENTERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 65:
            { System.out.println(yytext());return new Symbol(PRIMOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 66:
            { System.out.println(yytext());return new Symbol(SWITCH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 67:
            { System.out.println(yytext());return new Symbol(ARREGLO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 68:
            { System.out.println(yytext());return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 69:
            { System.out.println(yytext());return new Symbol(DEFAULT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 70:
            { System.out.println(yytext());return new Symbol(ESPERAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 71:
            { System.out.println(yytext());return new Symbol(IMPARES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 72:
            { System.out.println(yytext());return new Symbol(MENSAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 73:
            { System.out.println(yytext());return new Symbol(ORDENAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 74:
            { System.out.println(yytext());return new Symbol(RETORNA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 75:
            { System.out.println(yytext());return new Symbol(CARACTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 76:
            { System.out.println(yytext());return new Symbol(EXTIENDE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 77:
            { System.out.println(yytext());return new Symbol(LONGITUD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 78:
            { System.out.println(yytext());return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 79:
            { System.out.println(yytext());return new Symbol(CONTINUE,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 80:
            { System.out.println(yytext());return new Symbol(PRINCIPAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 81:
            { System.out.println(yytext());return new Symbol(SUMARIZAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 82:
            { System.out.println(yytext());return new Symbol(ASCENDENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 83:
            { System.out.println(yytext());return new Symbol(REPRODUCIR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 84:
            { System.out.println(yytext());return new Symbol(DESCENDENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
