
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package valiente.orl2.phyton.parser;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import valiente.orl2.phyton.conditions.*;
import valiente.orl2.phyton.cycles.*;
import valiente.orl2.phyton.instructions.*;
import valiente.orl2.phyton.specialInstructions.*;
import valiente.orl2.phyton.values.*;
import valiente.orl2.phyton.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PhytonSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PhytonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PhytonSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PhytonSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PhytonSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\374\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\055\010\000\002\055\007\000\002\055\007" +
    "\000\002\055\007\000\002\045\004\000\002\046\004\000" +
    "\002\046\002\000\002\075\003\000\002\075\004\000\002" +
    "\076\005\000\002\076\004\000\002\076\007\000\002\076" +
    "\005\000\002\076\006\000\002\076\005\000\002\076\005" +
    "\000\002\076\005\000\002\076\005\000\002\076\005\000" +
    "\002\076\005\000\002\076\007\000\002\076\010\000\002" +
    "\076\007\000\002\076\006\000\002\076\006\000\002\076" +
    "\005\000\002\076\004\000\002\076\005\000\002\076\002" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\066\012\000\002\066" +
    "\012\000\002\066\012\000\002\066\012\000\002\066\012" +
    "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
    "\002\067\004\000\002\067\004\000\002\070\004\000\002" +
    "\070\004\000\002\071\004\000\002\071\004\000\002\072" +
    "\006\000\002\072\006\000\002\072\006\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\037\005\000\002\037\004" +
    "\000\002\033\005\000\002\033\002\000\002\033\005\000" +
    "\002\053\010\000\002\053\007\000\002\053\007\000\002" +
    "\053\007\000\002\053\010\000\002\036\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\102\004\000\002\102\006\000" +
    "\002\102\004\000\002\102\006\000\002\102\006\000\002" +
    "\102\003\000\002\031\004\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\054\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\022" +
    "\005\000\002\022\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\043" +
    "\005\000\002\043\004\000\002\043\003\000\002\017\004" +
    "\000\002\060\005\000\002\060\004\000\002\060\005\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\040\004\000\002\040" +
    "\006\000\002\040\004\000\002\041\005\000\002\041\005" +
    "\000\002\041\002\000\002\044\004\000\002\044\003\000" +
    "\002\044\004\000\002\035\004\000\002\035\003\000\002" +
    "\016\003\000\002\016\004\000\002\015\005\000\002\015" +
    "\004\000\002\050\003\000\002\050\003\000\002\024\004" +
    "\000\002\024\002\000\002\025\006\000\002\025\006\000" +
    "\002\026\006\000\002\026\006\000\002\026\002\000\002" +
    "\003\003\000\002\006\007\000\002\006\003\000\002\004" +
    "\005\000\002\004\005\000\002\005\007\000\002\005\003" +
    "\000\002\027\004\000\002\030\005\000\002\030\002\000" +
    "\002\100\003\000\002\100\004\000\002\100\003\000\002" +
    "\100\004\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\005\000\002\100\005" +
    "\000\002\100\005\000\002\100\005\000\002\100\005\000" +
    "\002\100\005\000\002\100\005\000\002\100\004\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\103\007\000\002\103\006\000\002\103\006\000" +
    "\002\104\010\000\002\104\007\000\002\104\007\000\002" +
    "\104\007\000\002\105\005\000\002\105\004\000\002\012" +
    "\004\000\002\012\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\004\000\002\014\003\000\002\065\010\000" +
    "\002\065\010\000\002\065\010\000\002\065\010\000\002" +
    "\074\006\000\002\074\006\000\002\073\007\000\002\073" +
    "\007\000\002\073\007\000\002\061\006\000\002\061\006" +
    "\000\002\061\006\000\002\007\005\000\002\007\005\000" +
    "\002\010\005\000\002\010\005\000\002\011\005\000\002" +
    "\011\005\000\002\062\007\000\002\062\007\000\002\062" +
    "\007\000\002\063\005\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\014\002\uffe2\003\010\006\015\116\012\117" +
    "\011\001\002\000\004\002\ufff7\001\002\000\074\003\103" +
    "\010\102\011\131\012\064\020\122\021\120\022\063\023" +
    "\uffff\024\077\025\136\026\067\027\111\030\101\031\075" +
    "\032\106\033\100\034\065\037\116\040\112\041\071\042" +
    "\076\043\125\044\073\045\124\046\130\047\072\060\070" +
    "\117\057\122\107\001\002\000\012\002\uffe2\006\015\116" +
    "\012\117\011\001\002\000\004\002\055\001\002\000\014" +
    "\002\uffe2\003\010\006\015\116\012\117\011\001\002\000" +
    "\012\002\uffe2\006\015\116\012\117\011\001\002\000\076" +
    "\003\ufff8\010\ufff8\011\ufff8\012\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\060\ufff8\116\020\117\ufff8\122\ufff8\001\002\000\006\116" +
    "\020\117\ufff8\001\002\000\006\116\020\117\ufff8\001\002" +
    "\000\006\003\016\034\017\001\002\000\010\007\022\116" +
    "\020\117\ufff8\001\002\000\012\003\021\007\022\116\020" +
    "\117\ufff8\001\002\000\076\003\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\060\ufff8\116\020\117\ufff8\122" +
    "\ufff8\001\002\000\012\002\uff8b\006\uff8b\116\uff8b\117\uff8b" +
    "\001\002\000\004\034\026\001\002\000\004\117\025\001" +
    "\002\000\012\002\uff8d\006\uff8d\116\uff8d\117\uff8d\001\002" +
    "\000\012\002\uff89\006\uff89\116\uff89\117\uff89\001\002\000" +
    "\012\003\030\107\027\116\020\117\ufff8\001\002\000\006" +
    "\003\036\034\037\001\002\000\004\034\034\001\002\000" +
    "\012\002\uff8a\006\uff8a\116\uff8a\117\uff8a\001\002\000\004" +
    "\117\033\001\002\000\012\002\uff85\006\uff85\116\uff85\117" +
    "\uff85\001\002\000\012\003\030\107\027\116\020\117\ufff8" +
    "\001\002\000\012\002\uff87\006\uff87\116\uff87\117\uff87\001" +
    "\002\000\012\003\030\107\027\116\020\117\ufff8\001\002" +
    "\000\012\003\030\107\027\116\020\117\ufff8\001\002\000" +
    "\012\002\uff88\006\uff88\116\uff88\117\uff88\001\002\000\012" +
    "\002\uff86\006\uff86\116\uff86\117\uff86\001\002\000\074\003" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\060" +
    "\ufff9\117\ufff9\122\ufff9\001\002\000\012\002\uff8c\006\uff8c" +
    "\116\uff8c\117\uff8c\001\002\000\004\117\045\001\002\000" +
    "\012\002\uffe2\006\015\116\012\117\011\001\002\000\004" +
    "\002\uffe6\001\002\000\004\117\050\001\002\000\012\002" +
    "\uffe2\006\015\116\012\117\011\001\002\000\004\002\uffe7" +
    "\001\002\000\074\003\ufffa\010\ufffa\011\ufffa\012\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\060\ufffa\117\ufffa\122\ufffa\001\002\000" +
    "\004\002\uffe4\001\002\000\004\002\ufff6\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufff4\001\002\000\012\002" +
    "\uffe2\006\015\116\012\117\011\001\002\000\020\003\u01dd" +
    "\010\u01de\011\u01df\012\u01db\021\u01dc\022\u01e2\034\u01e1\001" +
    "\002\000\012\002\uffe2\006\015\116\012\117\011\001\002" +
    "\000\012\002\uffe2\006\015\116\012\117\011\001\002\000" +
    "\006\003\u01d2\104\u01d3\001\002\000\006\003\u01c0\104\u01c1" +
    "\001\002\000\022\003\uff6c\061\uff6c\071\uff6c\072\uff6c\073" +
    "\uff6c\102\312\104\uff94\107\311\001\002\000\004\117\u01be" +
    "\001\002\000\024\003\uff76\010\uff76\011\uff76\012\uff76\021" +
    "\uff76\022\uff76\033\uff76\034\uff76\102\uff76\001\002\000\006" +
    "\003\u01b6\104\u01b7\001\002\000\044\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\075\171\104\154\120\152\123" +
    "\160\124\170\001\002\000\006\116\020\117\ufff8\001\002" +
    "\000\006\003\u0189\104\u018a\001\002\000\014\003\u0184\061" +
    "\144\071\147\072\u0187\073\u0185\001\002\000\024\003\uff72" +
    "\010\uff72\011\uff72\012\uff72\021\uff72\022\uff72\033\uff72\034" +
    "\uff72\102\uff72\001\002\000\006\116\020\117\ufff8\001\002" +
    "\000\022\003\u017e\023\000\025\u017d\026\067\027\111\030" +
    "\101\031\075\032\106\001\002\000\004\034\u0179\001\002" +
    "\000\024\003\uff74\010\uff74\011\uff74\012\uff74\021\uff74\022" +
    "\uff74\033\uff74\034\uff74\102\uff74\001\002\000\006\003\u014e" +
    "\104\u014f\001\002\000\054\002\uffe2\003\172\004\156\005" +
    "\163\006\015\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\075\171\104\154\116" +
    "\012\117\011\120\152\123\160\124\170\001\002\000\022" +
    "\003\uffa5\010\uffa5\011\uffa5\012\uffa5\021\uffa5\022\uffa5\034" +
    "\uffa5\102\uffa5\001\002\000\012\002\uff3a\006\uff3a\116\uff3a" +
    "\117\uff3a\001\002\000\024\003\uff73\010\uff73\011\uff73\012" +
    "\uff73\021\uff73\022\uff73\033\uff73\034\uff73\102\uff73\001\002" +
    "\000\044\003\172\004\156\005\163\010\102\011\131\012" +
    "\064\020\122\021\120\022\063\034\166\035\162\036\157" +
    "\075\171\104\154\120\152\123\160\124\170\001\002\000" +
    "\006\116\020\117\ufff8\001\002\000\024\003\uff75\010\uff75" +
    "\011\uff75\012\uff75\021\uff75\022\uff75\033\uff75\034\uff75\102" +
    "\uff75\001\002\000\006\003\u0135\104\u0136\001\002\000\012" +
    "\002\uffe2\006\015\116\012\117\011\001\002\000\012\002" +
    "\uffe2\006\015\116\012\117\011\001\002\000\012\002\uff3b" +
    "\006\uff3b\116\uff3b\117\uff3b\001\002\000\012\003\u0124\060" +
    "\u0125\116\020\117\ufff8\001\002\000\012\002\uffe2\006\015" +
    "\116\012\117\011\001\002\000\006\003\u011c\104\u011d\001" +
    "\002\000\004\023\u0111\001\002\000\006\003\u010a\104\u010b" +
    "\001\002\000\012\002\uffe2\006\015\116\012\117\011\001" +
    "\002\000\006\003\375\104\376\001\002\000\010\003\ufff8" +
    "\116\020\117\ufff8\001\002\000\012\002\uffe2\006\015\116" +
    "\012\117\011\001\002\000\004\104\355\001\002\000\010" +
    "\003\ufff8\116\020\117\ufff8\001\002\000\006\003\336\104" +
    "\337\001\002\000\020\026\067\027\111\030\101\031\075" +
    "\032\106\033\uff67\034\uff67\001\002\000\012\002\uff39\006" +
    "\uff39\116\uff39\117\uff39\001\002\000\022\003\uffac\010\uffac" +
    "\011\uffac\012\uffac\021\uffac\022\uffac\034\uffac\102\327\001" +
    "\002\000\012\002\uffe2\006\015\116\012\117\011\001\002" +
    "\000\020\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033" +
    "\uff6a\034\uff6a\001\002\000\006\033\100\034\140\001\002" +
    "\000\016\061\uff6c\071\uff6c\102\312\107\311\116\uff6c\117" +
    "\uff6c\001\002\000\012\061\144\071\147\116\020\117\ufff8" +
    "\001\002\000\012\002\uff66\006\uff66\116\uff66\117\uff66\001" +
    "\002\000\050\003\172\004\156\005\163\010\102\011\131" +
    "\012\064\020\122\021\120\022\063\034\166\035\162\036" +
    "\157\066\246\075\171\104\243\115\244\120\152\123\160" +
    "\124\170\001\002\000\050\003\uff62\004\uff62\005\uff62\010" +
    "\uff62\011\uff62\012\uff62\020\uff62\021\uff62\022\uff62\034\uff62" +
    "\035\uff62\036\uff62\066\uff62\075\uff62\104\uff62\115\uff62\120" +
    "\152\123\uff62\124\uff62\001\002\000\004\117\150\001\002" +
    "\000\012\002\uff79\006\uff79\116\uff79\117\uff79\001\002\000" +
    "\050\003\uff61\004\uff61\005\uff61\010\uff61\011\uff61\012\uff61" +
    "\020\uff61\021\uff61\022\uff61\034\uff61\035\uff61\036\uff61\066" +
    "\uff61\075\uff61\104\uff61\115\uff61\120\uff61\123\uff61\124\uff61" +
    "\001\002\000\012\002\uff65\006\uff65\116\uff65\117\uff65\001" +
    "\002\000\074\002\uff59\003\uff59\006\uff59\061\uff59\062\uff59" +
    "\063\uff59\064\uff59\065\uff59\067\uff59\070\uff59\071\uff59\074" +
    "\uff59\075\uff59\076\uff59\077\uff59\100\uff59\101\uff59\103\uff59" +
    "\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113" +
    "\uff59\114\uff59\116\uff59\117\uff59\121\uff59\001\002\000\044" +
    "\003\172\004\156\005\163\010\102\011\131\012\064\020" +
    "\122\021\120\022\063\034\166\035\162\036\157\075\171" +
    "\104\154\120\152\123\160\124\170\001\002\000\012\002" +
    "\uff63\006\uff63\116\uff63\117\uff63\001\002\000\044\003\172" +
    "\004\156\005\163\010\102\011\131\012\064\020\122\021" +
    "\120\022\063\034\166\035\162\036\157\075\171\104\154" +
    "\120\152\123\160\124\170\001\002\000\070\003\uff3e\061" +
    "\uff3e\062\uff3e\063\uff3e\064\uff3e\065\uff3e\067\uff3e\070\uff3e" +
    "\071\uff3e\074\uff3e\075\uff3e\076\uff3e\077\uff3e\100\uff3e\101" +
    "\uff3e\103\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e\111\uff3e" +
    "\112\uff3e\113\uff3e\114\uff3e\116\uff3e\117\uff3e\121\uff3e\001" +
    "\002\000\070\003\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d" +
    "\065\uff4d\067\uff4d\070\uff4d\071\uff4d\074\uff4d\075\uff4d\076" +
    "\uff4d\077\uff4d\100\uff4d\101\uff4d\103\uff4d\105\uff4d\106\uff4d" +
    "\107\uff4d\110\uff4d\111\uff4d\112\uff4d\113\uff4d\114\uff4d\116" +
    "\uff4d\117\uff4d\121\uff4d\001\002\000\070\003\uff4a\061\uff4a" +
    "\062\uff4a\063\uff4a\064\uff4a\065\uff4a\067\uff4a\070\uff4a\071" +
    "\uff4a\074\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101\uff4a" +
    "\103\uff4a\105\uff4a\106\uff4a\107\uff4a\110\uff4a\111\uff4a\112" +
    "\uff4a\113\uff4a\114\uff4a\116\uff4a\117\uff4a\121\uff4a\001\002" +
    "\000\070\003\uff3f\061\uff3f\062\uff3f\063\uff3f\064\uff3f\065" +
    "\uff3f\067\uff3f\070\uff3f\071\uff3f\074\uff3f\075\uff3f\076\uff3f" +
    "\077\uff3f\100\uff3f\101\uff3f\103\uff3f\105\uff3f\106\uff3f\107" +
    "\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\116\uff3f" +
    "\117\uff3f\121\uff3f\001\002\000\070\003\uff49\061\uff49\062" +
    "\uff49\063\uff49\064\uff49\065\uff49\067\uff49\070\uff49\071\uff49" +
    "\074\uff49\075\uff49\076\uff49\077\uff49\100\uff49\101\uff49\103" +
    "\uff49\105\uff49\106\uff49\107\uff49\110\uff49\111\uff49\112\uff49" +
    "\113\uff49\114\uff49\116\uff49\117\uff49\121\uff49\001\002\000" +
    "\070\003\uff4b\061\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b" +
    "\067\uff4b\070\uff4b\071\uff4b\074\uff4b\075\uff4b\076\uff4b\077" +
    "\uff4b\100\uff4b\101\uff4b\103\uff4b\105\uff4b\106\uff4b\107\uff4b" +
    "\110\uff4b\111\uff4b\112\uff4b\113\uff4b\114\uff4b\116\uff4b\117" +
    "\uff4b\121\uff4b\001\002\000\070\003\uff4f\061\uff4f\062\uff4f" +
    "\063\uff4f\064\uff4f\065\uff4f\067\uff4f\070\uff4f\071\uff4f\074" +
    "\uff4f\075\uff4f\076\uff4f\077\uff4f\100\uff4f\101\uff4f\103\uff4f" +
    "\105\uff4f\106\uff4f\107\uff4f\110\uff4f\111\uff4f\112\uff4f\113" +
    "\uff4f\114\uff4f\116\uff4f\117\uff4f\121\uff4f\001\002\000\004" +
    "\121\234\001\002\000\070\003\uff48\061\uff48\062\uff48\063" +
    "\uff48\064\uff48\065\uff48\067\uff48\070\uff48\071\uff48\074\uff48" +
    "\075\uff48\076\uff48\077\uff48\100\uff48\101\uff48\103\uff48\105" +
    "\uff48\106\uff48\107\uff48\110\uff48\111\uff48\112\uff48\113\uff48" +
    "\114\uff48\116\uff48\117\uff48\121\uff48\001\002\000\074\003" +
    "\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100" +
    "\uff5a\101\uff5a\102\224\103\uff5a\104\uff94\105\uff5a\106\uff5a" +
    "\107\uff5a\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\116" +
    "\uff5a\117\uff5a\121\uff5a\001\002\000\022\074\207\075\210" +
    "\076\213\077\211\100\206\101\205\107\204\121\uff50\001" +
    "\002\000\070\003\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d" +
    "\065\uff3d\067\uff3d\070\uff3d\071\uff3d\074\uff3d\075\uff3d\076" +
    "\uff3d\077\uff3d\100\uff3d\101\uff3d\103\uff3d\105\uff3d\106\uff3d" +
    "\107\uff3d\110\uff3d\111\uff3d\112\uff3d\113\uff3d\114\uff3d\116" +
    "\uff3d\117\uff3d\121\uff3d\001\002\000\006\004\203\005\202" +
    "\001\002\000\070\003\uff3c\061\uff3c\062\uff3c\063\uff3c\064" +
    "\uff3c\065\uff3c\067\uff3c\070\uff3c\071\uff3c\074\uff3c\075\uff3c" +
    "\076\uff3c\077\uff3c\100\uff3c\101\uff3c\103\uff3c\105\uff3c\106" +
    "\uff3c\107\uff3c\110\uff3c\111\uff3c\112\uff3c\113\uff3c\114\uff3c" +
    "\116\uff3c\117\uff3c\121\uff3c\001\002\000\022\074\uff59\075" +
    "\uff59\076\uff59\077\uff59\100\uff59\101\uff59\107\uff59\121\174" +
    "\001\002\000\074\002\uff53\003\uff53\006\uff53\061\uff53\062" +
    "\uff53\063\uff53\064\uff53\065\uff53\067\uff53\070\uff53\071\uff53" +
    "\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53\101\uff53\103" +
    "\uff53\105\uff53\106\uff53\107\uff53\110\uff53\111\uff53\112\uff53" +
    "\113\uff53\114\uff53\116\uff53\117\uff53\121\uff53\001\002\000" +
    "\074\002\uff56\003\uff56\006\uff56\061\uff56\062\uff56\063\uff56" +
    "\064\uff56\065\uff56\067\uff56\070\uff56\071\uff56\074\uff56\075" +
    "\uff56\076\uff56\077\uff56\100\uff56\101\uff56\103\uff56\105\uff56" +
    "\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56\113\uff56\114" +
    "\uff56\116\uff56\117\uff56\121\uff56\001\002\000\004\120\177" +
    "\001\002\000\004\120\152\001\002\000\004\121\174\001" +
    "\002\000\074\002\uff54\003\uff54\006\uff54\061\uff54\062\uff54" +
    "\063\uff54\064\uff54\065\uff54\067\uff54\070\uff54\071\uff54\074" +
    "\uff54\075\uff54\076\uff54\077\uff54\100\uff54\101\uff54\103\uff54" +
    "\105\uff54\106\uff54\107\uff54\110\uff54\111\uff54\112\uff54\113" +
    "\uff54\114\uff54\116\uff54\117\uff54\121\uff54\001\002\000\070" +
    "\003\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\067" +
    "\uff4e\070\uff4e\071\uff4e\074\uff4e\075\uff4e\076\uff4e\077\uff4e" +
    "\100\uff4e\101\uff4e\103\uff4e\105\uff4e\106\uff4e\107\uff4e\110" +
    "\uff4e\111\uff4e\112\uff4e\113\uff4e\114\uff4e\116\uff4e\117\uff4e" +
    "\121\uff4e\001\002\000\070\003\uff4c\061\uff4c\062\uff4c\063" +
    "\uff4c\064\uff4c\065\uff4c\067\uff4c\070\uff4c\071\uff4c\074\uff4c" +
    "\075\uff4c\076\uff4c\077\uff4c\100\uff4c\101\uff4c\103\uff4c\105" +
    "\uff4c\106\uff4c\107\uff4c\110\uff4c\111\uff4c\112\uff4c\113\uff4c" +
    "\114\uff4c\116\uff4c\117\uff4c\121\uff4c\001\002\000\044\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\075\171\104" +
    "\154\120\152\123\160\124\170\001\002\000\044\003\172" +
    "\004\156\005\163\010\102\011\131\012\064\020\122\021" +
    "\120\022\063\034\166\035\162\036\157\075\171\104\154" +
    "\120\152\123\160\124\170\001\002\000\044\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\075\171\104\154\120" +
    "\152\123\160\124\170\001\002\000\044\003\172\004\156" +
    "\005\163\010\102\011\131\012\064\020\122\021\120\022" +
    "\063\034\166\035\162\036\157\075\171\104\154\120\152" +
    "\123\160\124\170\001\002\000\044\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\075\171\104\154\120\152\123" +
    "\160\124\170\001\002\000\044\003\172\004\156\005\163" +
    "\010\102\011\131\012\064\020\122\021\120\022\063\034" +
    "\166\035\162\036\157\075\171\104\154\120\152\123\160" +
    "\124\170\001\002\000\004\121\uff52\001\002\000\044\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\075\171\104" +
    "\154\120\152\123\160\124\170\001\002\000\070\003\uff45" +
    "\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45\067\uff45\070" +
    "\uff45\071\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100\uff45" +
    "\101\205\103\uff45\105\uff45\106\uff45\107\uff45\110\uff45\111" +
    "\uff45\112\uff45\113\uff45\114\uff45\116\uff45\117\uff45\121\uff45" +
    "\001\002\000\070\003\uff44\061\uff44\062\uff44\063\uff44\064" +
    "\uff44\065\uff44\067\uff44\070\uff44\071\uff44\074\uff44\075\uff44" +
    "\076\uff44\077\uff44\100\uff44\101\205\103\uff44\105\uff44\106" +
    "\uff44\107\uff44\110\uff44\111\uff44\112\uff44\113\uff44\114\uff44" +
    "\116\uff44\117\uff44\121\uff44\001\002\000\070\003\uff46\061" +
    "\uff46\062\uff46\063\uff46\064\uff46\065\uff46\067\uff46\070\uff46" +
    "\071\uff46\074\uff46\075\uff46\076\213\077\211\100\206\101" +
    "\205\103\uff46\105\uff46\106\uff46\107\uff46\110\uff46\111\uff46" +
    "\112\uff46\113\uff46\114\uff46\116\uff46\117\uff46\121\uff46\001" +
    "\002\000\070\003\uff47\061\uff47\062\uff47\063\uff47\064\uff47" +
    "\065\uff47\067\uff47\070\uff47\071\uff47\074\uff47\075\uff47\076" +
    "\213\077\211\100\206\101\205\103\uff47\105\uff47\106\uff47" +
    "\107\uff47\110\uff47\111\uff47\112\uff47\113\uff47\114\uff47\116" +
    "\uff47\117\uff47\121\uff47\001\002\000\070\003\uff42\061\uff42" +
    "\062\uff42\063\uff42\064\uff42\065\uff42\067\uff42\070\uff42\071" +
    "\uff42\074\uff42\075\uff42\076\uff42\077\uff42\100\uff42\101\205" +
    "\103\uff42\105\uff42\106\uff42\107\uff42\110\uff42\111\uff42\112" +
    "\uff42\113\uff42\114\uff42\116\uff42\117\uff42\121\uff42\001\002" +
    "\000\070\003\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065" +
    "\uff43\067\uff43\070\uff43\071\uff43\074\uff43\075\uff43\076\uff43" +
    "\077\uff43\100\uff43\101\uff43\103\uff43\105\uff43\106\uff43\107" +
    "\uff43\110\uff43\111\uff43\112\uff43\113\uff43\114\uff43\116\uff43" +
    "\117\uff43\121\uff43\001\002\000\022\074\207\075\210\076" +
    "\213\077\211\100\206\101\205\107\204\121\uff50\001\002" +
    "\000\004\121\uff51\001\002\000\044\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\075\171\104\154\120\152\123" +
    "\160\124\170\001\002\000\070\003\uff40\061\uff40\062\uff40" +
    "\063\uff40\064\uff40\065\uff40\067\uff40\070\uff40\071\uff40\074" +
    "\uff40\075\uff40\076\uff40\077\uff40\100\uff40\101\uff40\103\uff40" +
    "\105\uff40\106\uff40\107\uff40\110\uff40\111\uff40\112\uff40\113" +
    "\uff40\114\uff40\116\uff40\117\uff40\121\uff40\001\002\000\022" +
    "\003\227\074\207\075\210\076\213\077\211\100\206\101" +
    "\205\103\230\001\002\000\076\003\uff5a\061\uff5a\062\uff5a" +
    "\063\uff5a\064\uff5a\065\uff5a\067\uff5a\070\uff5a\071\uff5a\072" +
    "\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a" +
    "\101\uff5a\102\224\103\uff5a\105\uff5a\106\uff5a\107\uff5a\110" +
    "\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\116\uff5a\117\uff5a" +
    "\121\uff5a\001\002\000\076\003\uff5a\061\uff5a\062\uff5a\063" +
    "\uff5a\064\uff5a\065\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a" +
    "\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101" +
    "\uff5a\102\224\103\uff5a\105\uff5a\106\uff5a\107\uff5a\110\uff5a" +
    "\111\uff5a\112\uff5a\113\uff5a\114\uff5a\116\uff5a\117\uff5a\121" +
    "\uff5a\001\002\000\074\003\uff5c\061\uff5c\062\uff5c\063\uff5c" +
    "\064\uff5c\065\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073" +
    "\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c" +
    "\103\uff5c\105\uff5c\106\uff5c\107\uff5c\110\uff5c\111\uff5c\112" +
    "\uff5c\113\uff5c\114\uff5c\116\uff5c\117\uff5c\121\uff5c\001\002" +
    "\000\074\003\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065" +
    "\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b" +
    "\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b\103\uff5b\105" +
    "\uff5b\106\uff5b\107\uff5b\110\uff5b\111\uff5b\112\uff5b\113\uff5b" +
    "\114\uff5b\116\uff5b\117\uff5b\121\uff5b\001\002\000\074\002" +
    "\uff55\003\uff55\006\uff55\061\uff55\062\uff55\063\uff55\064\uff55" +
    "\065\uff55\067\uff55\070\uff55\071\uff55\074\uff55\075\uff55\076" +
    "\uff55\077\uff55\100\uff55\101\uff55\103\uff55\105\uff55\106\uff55" +
    "\107\uff55\110\uff55\111\uff55\112\uff55\113\uff55\114\uff55\116" +
    "\uff55\117\uff55\121\uff55\001\002\000\074\002\uff57\003\uff57" +
    "\006\uff57\061\uff57\062\uff57\063\uff57\064\uff57\065\uff57\067" +
    "\uff57\070\uff57\071\uff57\074\uff57\075\uff57\076\uff57\077\uff57" +
    "\100\uff57\101\uff57\103\uff57\105\uff57\106\uff57\107\uff57\110" +
    "\uff57\111\uff57\112\uff57\113\uff57\114\uff57\116\uff57\117\uff57" +
    "\121\uff57\001\002\000\004\120\236\001\002\000\044\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\075\171\104" +
    "\154\120\152\123\160\124\170\001\002\000\004\121\234" +
    "\001\002\000\074\002\uff58\003\uff58\006\uff58\061\uff58\062" +
    "\uff58\063\uff58\064\uff58\065\uff58\067\uff58\070\uff58\071\uff58" +
    "\074\uff58\075\uff58\076\uff58\077\uff58\100\uff58\101\uff58\103" +
    "\uff58\105\uff58\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58" +
    "\113\uff58\114\uff58\116\uff58\117\uff58\121\uff58\001\002\000" +
    "\020\074\207\075\210\076\213\077\211\100\206\101\205" +
    "\105\242\001\002\000\070\003\uff41\061\uff41\062\uff41\063" +
    "\uff41\064\uff41\065\uff41\067\uff41\070\uff41\071\uff41\074\uff41" +
    "\075\uff41\076\uff41\077\uff41\100\uff41\101\uff41\103\uff41\105" +
    "\uff41\106\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41" +
    "\114\uff41\116\uff41\117\uff41\121\uff41\001\002\000\050\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\066\246\075" +
    "\171\104\243\115\244\120\152\123\160\124\170\001\002" +
    "\000\050\003\172\004\156\005\163\010\102\011\131\012" +
    "\064\020\122\021\120\022\063\034\166\035\162\036\157" +
    "\066\246\075\171\104\243\115\244\120\152\123\160\124" +
    "\170\001\002\000\050\003\uff26\061\uff26\062\271\063\272" +
    "\064\270\065\273\067\267\070\266\071\uff26\105\uff26\106" +
    "\uff26\107\uff26\110\uff26\111\uff26\112\uff26\113\uff26\114\uff26" +
    "\116\uff26\117\uff26\001\002\000\046\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\066\246\075\171\104\264\120" +
    "\152\123\160\124\170\001\002\000\064\003\uff1d\061\uff1d" +
    "\062\uff1d\063\uff1d\064\uff1d\065\uff1d\067\uff1d\070\uff1d\071" +
    "\uff1d\074\207\075\210\076\213\077\211\100\206\101\205" +
    "\105\uff1d\106\uff1d\107\uff1d\110\uff1d\111\uff1d\112\uff1d\113" +
    "\uff1d\114\uff1d\116\uff1d\117\uff1d\001\002\000\024\061\144" +
    "\071\147\110\254\111\251\112\255\113\256\114\252\116" +
    "\020\117\ufff8\001\002\000\050\003\172\004\156\005\163" +
    "\010\102\011\131\012\064\020\122\021\120\022\063\034" +
    "\166\035\162\036\157\066\246\075\171\104\243\115\244" +
    "\120\152\123\160\124\170\001\002\000\050\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\066\246\075\171\104" +
    "\243\115\244\120\152\123\160\124\170\001\002\000\012" +
    "\002\uff64\006\uff64\116\uff64\117\uff64\001\002\000\050\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\066\246\075" +
    "\171\104\243\115\244\120\152\123\160\124\170\001\002" +
    "\000\050\003\172\004\156\005\163\010\102\011\131\012" +
    "\064\020\122\021\120\022\063\034\166\035\162\036\157" +
    "\066\246\075\171\104\243\115\244\120\152\123\160\124" +
    "\170\001\002\000\050\003\172\004\156\005\163\010\102" +
    "\011\131\012\064\020\122\021\120\022\063\034\166\035" +
    "\162\036\157\066\246\075\171\104\243\115\244\120\152" +
    "\123\160\124\170\001\002\000\034\003\uff2b\061\uff2b\071" +
    "\uff2b\105\uff2b\106\uff2b\107\uff2b\110\254\111\251\112\uff2b" +
    "\113\uff2b\114\uff2b\116\uff2b\117\uff2b\001\002\000\034\003" +
    "\uff2a\061\uff2a\071\uff2a\105\uff2a\106\uff2a\107\uff2a\110\254" +
    "\111\251\112\uff2a\113\uff2a\114\uff2a\116\uff2a\117\uff2a\001" +
    "\002\000\034\003\uff2c\061\uff2c\071\uff2c\105\uff2c\106\uff2c" +
    "\107\uff2c\110\uff2c\111\uff2c\112\uff2c\113\uff2c\114\uff2c\116" +
    "\uff2c\117\uff2c\001\002\000\034\003\uff29\061\uff29\071\uff29" +
    "\105\uff29\106\uff29\107\uff29\110\254\111\251\112\uff29\113" +
    "\uff29\114\uff29\116\uff29\117\uff29\001\002\000\034\003\uff2d" +
    "\061\uff2d\071\uff2d\105\uff2d\106\uff2d\107\uff2d\110\uff2d\111" +
    "\uff2d\112\uff2d\113\uff2d\114\uff2d\116\uff2d\117\uff2d\001\002" +
    "\000\046\003\172\004\156\005\163\010\102\011\131\012" +
    "\064\020\122\021\120\022\063\034\166\035\162\036\157" +
    "\066\246\075\171\104\264\120\152\123\160\124\170\001" +
    "\002\000\050\003\uff1e\061\uff1e\062\uff1e\063\uff1e\064\uff1e" +
    "\065\uff1e\067\uff1e\070\uff1e\071\uff1e\105\uff1e\106\uff1e\107" +
    "\uff1e\110\uff1e\111\uff1e\112\uff1e\113\uff1e\114\uff1e\116\uff1e" +
    "\117\uff1e\001\002\000\046\003\172\004\156\005\163\010" +
    "\102\011\131\012\064\020\122\021\120\022\063\034\166" +
    "\035\162\036\157\066\246\075\171\104\264\120\152\123" +
    "\160\124\170\001\002\000\046\003\172\004\156\005\163" +
    "\010\102\011\131\012\064\020\122\021\120\022\063\034" +
    "\166\035\162\036\157\066\246\075\171\104\264\120\152" +
    "\123\160\124\170\001\002\000\046\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\066\246\075\171\104\264\120" +
    "\152\123\160\124\170\001\002\000\046\003\172\004\156" +
    "\005\163\010\102\011\131\012\064\020\122\021\120\022" +
    "\063\034\166\035\162\036\157\066\246\075\171\104\264" +
    "\120\152\123\160\124\170\001\002\000\046\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\066\246\075\171\104" +
    "\264\120\152\123\160\124\170\001\002\000\046\003\172" +
    "\004\156\005\163\010\102\011\131\012\064\020\122\021" +
    "\120\022\063\034\166\035\162\036\157\066\246\075\171" +
    "\104\264\120\152\123\160\124\170\001\002\000\050\003" +
    "\uff20\061\uff20\062\uff20\063\uff20\064\uff20\065\uff20\067\uff20" +
    "\070\uff20\071\uff20\105\uff20\106\uff20\107\uff20\110\uff20\111" +
    "\uff20\112\uff20\113\uff20\114\uff20\116\uff20\117\uff20\001\002" +
    "\000\050\003\uff24\061\uff24\062\uff24\063\uff24\064\uff24\065" +
    "\uff24\067\uff24\070\uff24\071\uff24\105\uff24\106\uff24\107\uff24" +
    "\110\uff24\111\uff24\112\uff24\113\uff24\114\uff24\116\uff24\117" +
    "\uff24\001\002\000\050\003\uff25\061\uff25\062\uff25\063\uff25" +
    "\064\uff25\065\uff25\067\uff25\070\uff25\071\uff25\105\uff25\106" +
    "\uff25\107\uff25\110\uff25\111\uff25\112\uff25\113\uff25\114\uff25" +
    "\116\uff25\117\uff25\001\002\000\050\003\uff22\061\uff22\062" +
    "\uff22\063\uff22\064\uff22\065\uff22\067\uff22\070\uff22\071\uff22" +
    "\105\uff22\106\uff22\107\uff22\110\uff22\111\uff22\112\uff22\113" +
    "\uff22\114\uff22\116\uff22\117\uff22\001\002\000\050\003\uff23" +
    "\061\uff23\062\uff23\063\uff23\064\uff23\065\uff23\067\uff23\070" +
    "\uff23\071\uff23\105\uff23\106\uff23\107\uff23\110\uff23\111\uff23" +
    "\112\uff23\113\uff23\114\uff23\116\uff23\117\uff23\001\002\000" +
    "\050\003\uff21\061\uff21\062\uff21\063\uff21\064\uff21\065\uff21" +
    "\067\uff21\070\uff21\071\uff21\105\uff21\106\uff21\107\uff21\110" +
    "\uff21\111\uff21\112\uff21\113\uff21\114\uff21\116\uff21\117\uff21" +
    "\001\002\000\020\062\271\063\272\064\270\065\273\067" +
    "\267\070\266\105\304\001\002\000\046\062\uff1d\063\uff1d" +
    "\064\uff1d\065\uff1d\067\uff1d\070\uff1d\074\207\075\210\076" +
    "\213\077\211\100\206\101\205\105\242\110\uff1d\111\uff1d" +
    "\112\uff1d\113\uff1d\114\uff1d\001\002\000\050\003\uff1f\061" +
    "\uff1f\062\uff1f\063\uff1f\064\uff1f\065\uff1f\067\uff1f\070\uff1f" +
    "\071\uff1f\105\uff1f\106\uff1f\107\uff1f\110\uff1f\111\uff1f\112" +
    "\uff1f\113\uff1f\114\uff1f\116\uff1f\117\uff1f\001\002\000\034" +
    "\003\uff27\061\uff27\071\uff27\105\uff27\106\uff27\107\uff27\110" +
    "\uff27\111\uff27\112\uff27\113\uff27\114\uff27\116\uff27\117\uff27" +
    "\001\002\000\032\062\271\063\272\064\270\065\273\067" +
    "\267\070\266\105\304\110\uff26\111\uff26\112\uff26\113\uff26" +
    "\114\uff26\001\002\000\016\105\310\110\254\111\251\112" +
    "\255\113\256\114\252\001\002\000\034\003\uff28\061\uff28" +
    "\071\uff28\105\uff28\106\uff28\107\uff28\110\uff28\111\uff28\112" +
    "\uff28\113\uff28\114\uff28\116\uff28\117\uff28\001\002\000\006" +
    "\003\322\034\323\001\002\000\044\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\075\171\104\154\120\152\123" +
    "\160\124\170\001\002\000\020\003\uff71\061\uff71\071\uff71" +
    "\072\uff71\073\uff71\116\uff71\117\uff71\001\002\000\020\003" +
    "\uff6f\061\uff6f\071\uff6f\072\uff6f\073\uff6f\116\uff6f\117\uff6f" +
    "\001\002\000\022\003\316\074\207\075\210\076\213\077" +
    "\211\100\206\101\205\103\317\001\002\000\022\003\uff5a" +
    "\061\uff5a\071\uff5a\072\uff5a\073\uff5a\102\224\116\uff5a\117" +
    "\uff5a\001\002\000\022\003\uff5a\061\uff5a\071\uff5a\072\uff5a" +
    "\073\uff5a\102\224\116\uff5a\117\uff5a\001\002\000\020\003" +
    "\uff5e\061\uff5e\071\uff5e\072\uff5e\073\uff5e\116\uff5e\117\uff5e" +
    "\001\002\000\020\003\uff5d\061\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\116\uff5d\117\uff5d\001\002\000\024\003\uff6c\061\uff6c" +
    "\071\uff6c\072\uff6c\073\uff6c\102\uff6c\107\311\116\uff6c\117" +
    "\uff6c\001\002\000\024\003\uff6c\061\uff6c\071\uff6c\072\uff6c" +
    "\073\uff6c\102\uff6c\107\311\116\uff6c\117\uff6c\001\002\000" +
    "\022\003\uff6e\061\uff6e\071\uff6e\072\uff6e\073\uff6e\102\uff6e" +
    "\116\uff6e\117\uff6e\001\002\000\022\003\uff6d\061\uff6d\071" +
    "\uff6d\072\uff6d\073\uff6d\102\uff6d\116\uff6d\117\uff6d\001\002" +
    "\000\004\002\ufff5\001\002\000\006\003\331\103\332\001" +
    "\002\000\020\003\uffae\010\uffae\011\uffae\012\uffae\021\uffae" +
    "\022\uffae\034\uffae\001\002\000\026\003\uffac\010\uffac\011" +
    "\uffac\012\uffac\021\uffac\022\uffac\034\uffac\102\327\105\uffac" +
    "\107\uffac\001\002\000\026\003\uffac\010\uffac\011\uffac\012" +
    "\uffac\021\uffac\022\uffac\034\uffac\102\327\105\uffac\107\uffac" +
    "\001\002\000\024\003\uffad\010\uffad\011\uffad\012\uffad\021" +
    "\uffad\022\uffad\034\uffad\105\uffad\107\uffad\001\002\000\024" +
    "\003\uffab\010\uffab\011\uffab\012\uffab\021\uffab\022\uffab\034" +
    "\uffab\105\uffab\107\uffab\001\002\000\006\033\uff68\034\uff68" +
    "\001\002\000\044\003\172\004\156\005\163\010\102\011" +
    "\131\012\064\020\122\021\120\022\063\034\166\035\162" +
    "\036\157\075\171\104\154\120\152\123\160\124\170\001" +
    "\002\000\044\003\172\004\156\005\163\010\102\011\131" +
    "\012\064\020\122\021\120\022\063\034\166\035\162\036" +
    "\157\075\171\104\154\120\152\123\160\124\170\001\002" +
    "\000\070\003\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\100\uffb5\101\uffb5\103\uffb5\105\uffb5\106\uffb5\107" +
    "\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\116\uffb5" +
    "\117\uffb5\121\uffb5\001\002\000\022\003\343\074\207\075" +
    "\210\076\213\077\211\100\206\101\205\107\342\001\002" +
    "\000\044\003\172\004\156\005\163\010\102\011\131\012" +
    "\064\020\122\021\120\022\063\034\166\035\162\036\157" +
    "\075\171\104\154\120\152\123\160\124\170\001\002\000" +
    "\044\003\172\004\156\005\163\010\102\011\131\012\064" +
    "\020\122\021\120\022\063\034\166\035\162\036\157\075" +
    "\171\104\154\120\152\123\160\124\170\001\002\000\020" +
    "\074\207\075\210\076\213\077\211\100\206\101\205\105" +
    "\345\001\002\000\070\003\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\067\uffc6\070\uffc6\071\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\103\uffc6\105\uffc6" +
    "\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114" +
    "\uffc6\116\uffc6\117\uffc6\121\uffc6\001\002\000\022\003\347" +
    "\074\207\075\210\076\213\077\211\100\206\101\205\105" +
    "\350\001\002\000\070\003\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\067\uffc5\070\uffc5\071\uffc5\074\uffc5\075" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\103\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114" +
    "\uffc5\116\uffc5\117\uffc5\121\uffc5\001\002\000\070\003\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\103\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\116\uffc7\117\uffc7\121\uffc7" +
    "\001\002\000\070\003\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\067\uffb4\070\uffb4\071\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\101\uffb4\103\uffb4\105\uffb4\106" +
    "\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4" +
    "\116\uffb4\117\uffb4\121\uffb4\001\002\000\006\003\353\117" +
    "\354\001\002\000\012\002\uff06\006\uff06\116\uff06\117\uff06" +
    "\001\002\000\012\002\uff07\006\uff07\116\uff07\117\uff07\001" +
    "\002\000\052\003\172\004\156\005\163\010\102\011\131" +
    "\012\064\020\122\021\120\022\063\034\166\035\162\036" +
    "\157\066\246\075\171\104\243\105\360\115\244\120\152" +
    "\123\160\124\170\001\002\000\022\003\363\105\362\107" +
    "\361\110\254\111\251\112\255\113\256\114\252\001\002" +
    "\000\070\003\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\067\uff8e\070\uff8e\071\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\101\uff8e\103\uff8e\105\uff8e\106\uff8e\107" +
    "\uff8e\110\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\116\uff8e" +
    "\117\uff8e\121\uff8e\001\002\000\070\003\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\065\uff98\067\uff98\070\uff98\071\uff98" +
    "\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101\uff98\103" +
    "\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98" +
    "\113\uff98\114\uff98\116\uff98\117\uff98\121\uff98\001\002\000" +
    "\050\003\172\004\156\005\163\010\102\011\131\012\064" +
    "\020\122\021\120\022\063\034\166\035\162\036\157\066" +
    "\246\075\171\104\243\115\244\120\152\123\160\124\170" +
    "\001\002\000\070\003\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\065\uff95\067\uff95\070\uff95\071\uff95\074\uff95\075\uff95" +
    "\076\uff95\077\uff95\100\uff95\101\uff95\103\uff95\105\uff95\106" +
    "\uff95\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95\114\uff95" +
    "\116\uff95\117\uff95\121\uff95\001\002\000\050\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\066\246\075\171\104" +
    "\243\115\244\120\152\123\160\124\170\001\002\000\070" +
    "\003\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\067" +
    "\uff99\070\uff99\071\uff99\074\uff99\075\uff99\076\uff99\077\uff99" +
    "\100\uff99\101\uff99\103\uff99\105\uff99\106\uff99\107\uff99\110" +
    "\uff99\111\uff99\112\uff99\113\uff99\114\uff99\116\uff99\117\uff99" +
    "\121\uff99\001\002\000\022\003\363\105\362\107\361\110" +
    "\254\111\251\112\255\113\256\114\252\001\002\000\070" +
    "\003\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\067" +
    "\uff96\070\uff96\071\uff96\074\uff96\075\uff96\076\uff96\077\uff96" +
    "\100\uff96\101\uff96\103\uff96\105\uff96\106\uff96\107\uff96\110" +
    "\uff96\111\uff96\112\uff96\113\uff96\114\uff96\116\uff96\117\uff96" +
    "\121\uff96\001\002\000\022\003\363\105\362\107\361\110" +
    "\254\111\251\112\255\113\256\114\252\001\002\000\070" +
    "\003\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\067" +
    "\uff97\070\uff97\071\uff97\074\uff97\075\uff97\076\uff97\077\uff97" +
    "\100\uff97\101\uff97\103\uff97\105\uff97\106\uff97\107\uff97\110" +
    "\uff97\111\uff97\112\uff97\113\uff97\114\uff97\116\uff97\117\uff97" +
    "\121\uff97\001\002\000\004\002\uffed\001\002\000\006\003" +
    "\373\117\374\001\002\000\006\116\uff17\117\uff17\001\002" +
    "\000\006\116\uff18\117\uff18\001\002\000\050\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\066\246\075\171\104" +
    "\243\115\244\120\152\123\160\124\170\001\002\000\050" +
    "\003\172\004\156\005\163\010\102\011\131\012\064\020" +
    "\122\021\120\022\063\034\166\035\162\036\157\066\246" +
    "\075\171\104\243\115\244\120\152\123\160\124\170\001" +
    "\002\000\010\003\ufff8\116\020\117\ufff8\001\002\000\020" +
    "\003\u0101\105\u0102\110\254\111\251\112\255\113\256\114" +
    "\252\001\002\000\010\003\uff2e\116\uff2e\117\uff2e\001\002" +
    "\000\010\003\uff2f\116\uff2f\117\uff2f\001\002\000\006\003" +
    "\u0104\117\u0105\001\002\000\012\002\uff08\006\uff08\116\uff08" +
    "\117\uff08\001\002\000\012\002\uff0a\006\uff0a\116\uff0a\117" +
    "\uff0a\001\002\000\006\116\020\117\ufff8\001\002\000\004" +
    "\117\u0108\001\002\000\012\002\uff09\006\uff09\116\uff09\117" +
    "\uff09\001\002\000\004\002\uffef\001\002\000\044\003\172" +
    "\004\156\005\163\010\102\011\131\012\064\020\122\021" +
    "\120\022\063\034\166\035\162\036\157\075\171\104\154" +
    "\120\152\123\160\124\170\001\002\000\044\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\075\171\104\154\120" +
    "\152\123\160\124\170\001\002\000\070\003\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9" +
    "\103\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\113\uffb9\114\uffb9\116\uffb9\117\uffb9\121\uffb9\001\002" +
    "\000\022\003\u010e\074\207\075\210\076\213\077\211\100" +
    "\206\101\205\105\u010f\001\002\000\070\003\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3" +
    "\103\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112" +
    "\uffc3\113\uffc3\114\uffc3\116\uffc3\117\uffc3\121\uffc3\001\002" +
    "\000\070\003\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\103\uffc4\105\uffc4\106\uffc4\107" +
    "\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\116\uffc4" +
    "\117\uffc4\121\uffc4\001\002\000\070\003\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\070\uffb8\071\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\103" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8" +
    "\113\uffb8\114\uffb8\116\uffb8\117\uffb8\121\uffb8\001\002\000" +
    "\006\003\u0112\104\u0113\001\002\000\004\105\u011a\001\002" +
    "\000\006\003\u0114\105\u0115\001\002\000\004\117\u0119\001" +
    "\002\000\010\003\u0116\116\020\117\ufff8\001\002\000\012" +
    "\002\ufffb\006\ufffb\116\ufffb\117\ufffb\001\002\000\004\117" +
    "\u0118\001\002\000\012\002\ufffe\006\ufffe\116\ufffe\117\ufffe" +
    "\001\002\000\012\002\ufffc\006\ufffc\116\ufffc\117\ufffc\001" +
    "\002\000\004\117\u011b\001\002\000\012\002\ufffd\006\ufffd" +
    "\116\ufffd\117\ufffd\001\002\000\044\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\075\171\104\154\120\152\123" +
    "\160\124\170\001\002\000\044\003\172\004\156\005\163" +
    "\010\102\011\131\012\064\020\122\021\120\022\063\034" +
    "\166\035\162\036\157\075\171\104\154\120\152\123\160" +
    "\124\170\001\002\000\070\003\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\067\uffb7\070\uffb7\071\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103\uffb7\105" +
    "\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\114\uffb7\116\uffb7\117\uffb7\121\uffb7\001\002\000\022\003" +
    "\u0120\074\207\075\210\076\213\077\211\100\206\101\205" +
    "\105\u0121\001\002\000\070\003\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\071\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\103\uffc1\105" +
    "\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1" +
    "\114\uffc1\116\uffc1\117\uffc1\121\uffc1\001\002\000\070\003" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2" +
    "\070\uffc2\071\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\103\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2" +
    "\111\uffc2\112\uffc2\113\uffc2\114\uffc2\116\uffc2\117\uffc2\121" +
    "\uffc2\001\002\000\070\003\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\067\uffb6\070\uffb6\071\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\103\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114" +
    "\uffb6\116\uffb6\117\uffb6\121\uffb6\001\002\000\004\002\ufff0" +
    "\001\002\000\014\002\uff30\006\uff30\104\u0130\116\uff30\117" +
    "\uff30\001\002\000\006\003\u0128\104\u0129\001\002\000\004" +
    "\117\u0127\001\002\000\012\002\uff31\006\uff31\116\uff31\117" +
    "\uff31\001\002\000\050\003\172\004\156\005\163\010\102" +
    "\011\131\012\064\020\122\021\120\022\063\034\166\035" +
    "\162\036\157\066\246\075\171\104\243\115\244\120\152" +
    "\123\160\124\170\001\002\000\050\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\066\246\075\171\104\243\115" +
    "\244\120\152\123\160\124\170\001\002\000\010\003\u012b" +
    "\116\020\117\ufff8\001\002\000\012\002\uff32\006\uff32\116" +
    "\uff32\117\uff32\001\002\000\004\117\u012d\001\002\000\012" +
    "\002\uff35\006\uff35\116\uff35\117\uff35\001\002\000\004\117" +
    "\u012f\001\002\000\012\002\uff33\006\uff33\116\uff33\117\uff33" +
    "\001\002\000\050\003\172\004\156\005\163\010\102\011" +
    "\131\012\064\020\122\021\120\022\063\034\166\035\162" +
    "\036\157\066\246\075\171\104\243\115\244\120\152\123" +
    "\160\124\170\001\002\000\004\117\u0132\001\002\000\012" +
    "\002\uff34\006\uff34\116\uff34\117\uff34\001\002\000\004\002" +
    "\uffec\001\002\000\004\002\uffee\001\002\000\044\003\172" +
    "\004\156\005\163\010\102\011\131\012\064\020\122\021" +
    "\120\022\063\034\166\035\162\036\157\075\171\104\154" +
    "\120\152\123\160\124\170\001\002\000\044\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\075\171\104\154\120" +
    "\152\123\160\124\170\001\002\000\022\003\u0138\074\207" +
    "\075\210\076\213\077\211\100\206\101\205\105\u0139\001" +
    "\002\000\006\116\020\117\ufff8\001\002\000\010\003\ufff8" +
    "\116\020\117\ufff8\001\002\000\006\003\u013b\117\u013c\001" +
    "\002\000\012\002\uff19\006\uff19\116\uff19\117\uff19\001\002" +
    "\000\012\002\uff1c\006\uff1c\116\uff1c\117\uff1c\001\002\000" +
    "\004\117\u013e\001\002\000\012\002\uff1a\006\uff1a\116\uff1a" +
    "\117\uff1a\001\002\000\020\074\207\075\210\076\213\077" +
    "\211\100\206\101\205\105\u0140\001\002\000\006\116\020" +
    "\117\ufff8\001\002\000\004\117\u0142\001\002\000\012\002" +
    "\uff1b\006\uff1b\116\uff1b\117\uff1b\001\002\000\004\117\u0144" +
    "\001\002\000\012\002\uffe2\006\015\116\012\117\011\001" +
    "\002\000\004\002\ufff3\001\002\000\022\074\207\075\210" +
    "\076\213\077\211\100\206\101\205\116\020\117\ufff8\001" +
    "\002\000\004\117\u0148\001\002\000\012\002\uffe2\006\015" +
    "\116\012\117\011\001\002\000\004\002\uffe9\001\002\000" +
    "\022\074\207\075\210\076\213\077\211\100\206\101\205" +
    "\116\020\117\ufff8\001\002\000\004\002\uffe3\001\002\000" +
    "\004\117\u014d\001\002\000\006\116\uff15\117\uff15\001\002" +
    "\000\040\003\u0159\050\u015b\051\u0154\052\u015e\053\u0157\054" +
    "\u0151\055\u015d\056\u0153\057\u015a\060\u0160\125\u015c\126\u0150" +
    "\127\u0158\130\u0155\131\u0152\001\002\000\040\003\u0159\050" +
    "\u015b\051\u0154\052\u015e\053\u0157\054\u0151\055\u015d\056\u0153" +
    "\057\u015a\060\u0160\125\u015c\126\u0150\127\u0158\130\u0155\131" +
    "\u0152\001\002\000\006\003\uffd7\107\uffd7\001\002\000\006" +
    "\003\uffdf\107\uffdf\001\002\000\006\003\uffd4\107\uffd4\001" +
    "\002\000\006\003\uffdd\107\uffdd\001\002\000\006\003\uffd9" +
    "\107\uffd9\001\002\000\006\003\uffd5\107\uffd5\001\002\000" +
    "\070\003\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\074\uffbb\075\uffbb\076\uffbb\077" +
    "\uffbb\100\uffbb\101\uffbb\103\uffbb\105\uffbb\106\uffbb\107\uffbb" +
    "\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\116\uffbb\117" +
    "\uffbb\121\uffbb\001\002\000\006\003\uffe0\107\uffe0\001\002" +
    "\000\006\003\uffd6\107\uffd6\001\002\000\006\003\uffd3\107" +
    "\uffd3\001\002\000\006\003\uffdc\107\uffdc\001\002\000\006" +
    "\003\uffda\107\uffda\001\002\000\006\003\uffd8\107\uffd8\001" +
    "\002\000\006\003\uffde\107\uffde\001\002\000\006\003\uffe1" +
    "\107\uffe1\001\002\000\006\003\u0162\107\u0161\001\002\000" +
    "\006\003\uffdb\107\uffdb\001\002\000\044\003\172\004\156" +
    "\005\163\010\102\011\131\012\064\020\122\021\120\022" +
    "\063\034\166\035\162\036\157\075\171\104\154\120\152" +
    "\123\160\124\170\001\002\000\044\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\075\171\104\154\120\152\123" +
    "\160\124\170\001\002\000\020\074\207\075\210\076\213" +
    "\077\211\100\206\101\205\107\u0164\001\002\000\044\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\075\171\104" +
    "\154\120\152\123\160\124\170\001\002\000\020\074\207" +
    "\075\210\076\213\077\211\100\206\101\205\107\u0166\001" +
    "\002\000\044\003\172\004\156\005\163\010\102\011\131" +
    "\012\064\020\122\021\120\022\063\034\166\035\162\036" +
    "\157\075\171\104\154\120\152\123\160\124\170\001\002" +
    "\000\020\074\207\075\210\076\213\077\211\100\206\101" +
    "\205\105\u0168\001\002\000\070\003\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070\uffcb\071\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\103\uffcb" +
    "\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb\113" +
    "\uffcb\114\uffcb\116\uffcb\117\uffcb\121\uffcb\001\002\000\022" +
    "\003\u016b\074\207\075\210\076\213\077\211\100\206\101" +
    "\205\107\u016a\001\002\000\044\003\172\004\156\005\163" +
    "\010\102\011\131\012\064\020\122\021\120\022\063\034" +
    "\166\035\162\036\157\075\171\104\154\120\152\123\160" +
    "\124\170\001\002\000\044\003\172\004\156\005\163\010" +
    "\102\011\131\012\064\020\122\021\120\022\063\034\166" +
    "\035\162\036\157\075\171\104\154\120\152\123\160\124" +
    "\170\001\002\000\020\074\207\075\210\076\213\077\211" +
    "\100\206\101\205\107\u016d\001\002\000\044\003\172\004" +
    "\156\005\163\010\102\011\131\012\064\020\122\021\120" +
    "\022\063\034\166\035\162\036\157\075\171\104\154\120" +
    "\152\123\160\124\170\001\002\000\020\074\207\075\210" +
    "\076\213\077\211\100\206\101\205\105\u016f\001\002\000" +
    "\070\003\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\067\uffca\070\uffca\071\uffca\074\uffca\075\uffca\076\uffca\077" +
    "\uffca\100\uffca\101\uffca\103\uffca\105\uffca\106\uffca\107\uffca" +
    "\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca\116\uffca\117" +
    "\uffca\121\uffca\001\002\000\022\003\u0172\074\207\075\210" +
    "\076\213\077\211\100\206\101\205\107\u0171\001\002\000" +
    "\044\003\172\004\156\005\163\010\102\011\131\012\064" +
    "\020\122\021\120\022\063\034\166\035\162\036\157\075" +
    "\171\104\154\120\152\123\160\124\170\001\002\000\044" +
    "\003\172\004\156\005\163\010\102\011\131\012\064\020" +
    "\122\021\120\022\063\034\166\035\162\036\157\075\171" +
    "\104\154\120\152\123\160\124\170\001\002\000\020\074" +
    "\207\075\210\076\213\077\211\100\206\101\205\105\u0174" +
    "\001\002\000\070\003\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\077\uffc9\100\uffc9\101\uffc9\103\uffc9\105\uffc9\106" +
    "\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9" +
    "\116\uffc9\117\uffc9\121\uffc9\001\002\000\022\003\u0176\074" +
    "\207\075\210\076\213\077\211\100\206\101\205\105\u0177" +
    "\001\002\000\070\003\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\067\uffc8\070\uffc8\071\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\101\uffc8\103\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8" +
    "\116\uffc8\117\uffc8\121\uffc8\001\002\000\070\003\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\103\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc" +
    "\112\uffcc\113\uffcc\114\uffcc\116\uffcc\117\uffcc\121\uffcc\001" +
    "\002\000\070\003\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\067\uffba\070\uffba\071\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\101\uffba\103\uffba\105\uffba\106\uffba" +
    "\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\116" +
    "\uffba\117\uffba\121\uffba\001\002\000\006\102\uff6c\107\311" +
    "\001\002\000\004\102\312\001\002\000\020\003\uff70\061" +
    "\uff70\071\uff70\072\uff70\073\uff70\116\uff70\117\uff70\001\002" +
    "\000\022\003\uffac\010\uffac\011\uffac\012\uffac\021\uffac\022" +
    "\uffac\034\uffac\102\327\001\002\000\020\026\uff6b\027\uff6b" +
    "\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\001\002\000" +
    "\020\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69" +
    "\034\uff69\001\002\000\020\003\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\021\uffaf\022\uffaf\034\uffaf\001\002\000\004\117\u0181" +
    "\001\002\000\012\002\uffe2\006\015\116\012\117\011\001" +
    "\002\000\004\002\uffea\001\002\000\012\002\uff78\006\uff78" +
    "\116\uff78\117\uff78\001\002\000\010\003\uff7e\105\uff7e\117" +
    "\uff7e\001\002\000\010\003\uff7f\105\uff7f\117\uff7f\001\002" +
    "\000\004\117\u0188\001\002\000\010\003\uff80\105\uff80\117" +
    "\uff80\001\002\000\012\002\uff77\006\uff77\116\uff77\117\uff77" +
    "\001\002\000\012\003\u018c\024\u0190\025\136\034\u018f\001" +
    "\002\000\012\003\u018c\024\u0190\025\136\034\u018f\001\002" +
    "\000\006\003\u0199\106\u019a\001\002\000\006\003\uff7b\106" +
    "\uff7b\001\002\000\006\003\u0197\117\u0198\001\002\000\004" +
    "\034\u0195\001\002\000\006\061\u0192\071\147\001\002\000" +
    "\006\003\u017e\025\u017d\001\002\000\050\003\172\004\156" +
    "\005\163\010\102\011\131\012\064\020\122\021\120\022" +
    "\063\034\166\035\162\036\157\066\246\075\171\104\243" +
    "\115\244\120\152\123\160\124\170\001\002\000\050\003" +
    "\uff62\004\uff62\005\uff62\010\uff62\011\uff62\012\uff62\020\uff62" +
    "\021\uff62\022\uff62\034\uff62\035\uff62\036\uff62\066\uff62\075" +
    "\uff62\104\uff62\115\uff62\120\uff62\123\uff62\124\uff62\001\002" +
    "\000\006\003\uff7c\106\uff7c\001\002\000\022\003\uff7a\105" +
    "\uff7a\106\uff7a\110\254\111\251\112\255\113\256\114\252" +
    "\001\002\000\006\061\u0192\071\147\001\002\000\006\003" +
    "\uff7d\106\uff7d\001\002\000\012\002\uff11\006\uff11\116\uff11" +
    "\117\uff11\001\002\000\012\002\uff13\006\uff13\116\uff13\117" +
    "\uff13\001\002\000\050\003\172\004\156\005\163\010\102" +
    "\011\131\012\064\020\122\021\120\022\063\034\166\035" +
    "\162\036\157\066\246\075\171\104\243\115\244\120\152" +
    "\123\160\124\170\001\002\000\050\003\172\004\156\005" +
    "\163\010\102\011\131\012\064\020\122\021\120\022\063" +
    "\034\166\035\162\036\157\066\246\075\171\104\243\115" +
    "\244\120\152\123\160\124\170\001\002\000\006\003\uff10" +
    "\117\uff10\001\002\000\020\003\u019d\106\u019e\110\254\111" +
    "\251\112\255\113\256\114\252\001\002\000\006\003\u01a0" +
    "\034\u01a1\001\002\000\006\003\u01a0\034\u01a1\001\002\000" +
    "\006\003\u01a7\105\u01a8\001\002\000\014\003\u0184\061\u0192" +
    "\071\147\072\u0187\073\u0185\001\002\000\014\003\u0184\061" +
    "\u0192\071\147\072\u0187\073\u0185\001\002\000\006\003\uff0e" +
    "\117\uff0e\001\002\000\006\003\uff84\105\uff84\001\002\000" +
    "\006\003\uff83\105\uff83\001\002\000\006\003\uff82\105\uff82" +
    "\001\002\000\006\003\uff81\105\uff81\001\002\000\010\003" +
    "\ufff8\116\020\117\ufff8\001\002\000\010\003\ufff8\116\020" +
    "\117\ufff8\001\002\000\006\003\uff0c\117\uff0c\001\002\000" +
    "\006\003\uff0b\117\uff0b\001\002\000\006\003\uff0d\117\uff0d" +
    "\001\002\000\006\003\uff0f\117\uff0f\001\002\000\004\117" +
    "\u01ae\001\002\000\012\002\uff12\006\uff12\116\uff12\117\uff12" +
    "\001\002\000\004\117\u01b0\001\002\000\012\002\uffe2\006" +
    "\015\116\012\117\011\001\002\000\004\002\uffe8\001\002" +
    "\000\024\003\ufff8\074\207\075\210\076\213\077\211\100" +
    "\206\101\205\116\020\117\ufff8\001\002\000\006\003\u01b4" +
    "\117\u01b5\001\002\000\006\116\uff14\117\uff14\001\002\000" +
    "\006\116\uff16\117\uff16\001\002\000\050\003\172\004\156" +
    "\005\163\010\102\011\131\012\064\020\122\021\120\022" +
    "\063\034\166\035\162\036\157\066\246\075\171\104\243" +
    "\115\244\120\152\123\160\124\170\001\002\000\050\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\066\246\075" +
    "\171\104\243\115\244\120\152\123\160\124\170\001\002" +
    "\000\010\003\u01b9\116\020\117\ufff8\001\002\000\012\002" +
    "\uff36\006\uff36\116\uff36\117\uff36\001\002\000\004\117\u01bb" +
    "\001\002\000\012\002\uff38\006\uff38\116\uff38\117\uff38\001" +
    "\002\000\004\117\u01bd\001\002\000\012\002\uff37\006\uff37" +
    "\116\uff37\117\uff37\001\002\000\012\002\uffe2\006\015\116" +
    "\012\117\011\001\002\000\004\002\ufff1\001\002\000\044" +
    "\003\172\004\156\005\163\010\102\011\131\012\064\020" +
    "\122\021\120\022\063\034\166\035\162\036\157\075\171" +
    "\104\154\120\152\123\160\124\170\001\002\000\044\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\075\171\104" +
    "\154\120\152\123\160\124\170\001\002\000\070\003\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\103\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111" +
    "\uffb1\112\uffb1\113\uffb1\114\uffb1\116\uffb1\117\uffb1\121\uffb1" +
    "\001\002\000\022\003\u01c5\074\207\075\210\076\213\077" +
    "\211\100\206\101\205\107\u01c4\001\002\000\016\003\u01c9" +
    "\013\u01c6\014\u01cb\015\u01c7\016\u01cc\017\u01ca\001\002\000" +
    "\016\003\u01c9\013\u01c6\014\u01cb\015\u01c7\016\u01cc\017\u01ca" +
    "\001\002\000\006\003\uffd2\105\uffd2\001\002\000\006\003" +
    "\uffd0\105\uffd0\001\002\000\004\105\u01cd\001\002\000\006" +
    "\003\uffcd\105\uffcd\001\002\000\006\003\uffce\105\uffce\001" +
    "\002\000\006\003\uffd1\105\uffd1\001\002\000\006\003\uffcf" +
    "\105\uffcf\001\002\000\070\003\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\103\uffbd\105" +
    "\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd" +
    "\114\uffbd\116\uffbd\117\uffbd\121\uffbd\001\002\000\006\003" +
    "\u01cf\105\u01d0\001\002\000\070\003\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\067\uffbc\070\uffbc\071\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\103\uffbc" +
    "\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113" +
    "\uffbc\114\uffbc\116\uffbc\117\uffbc\121\uffbc\001\002\000\070" +
    "\003\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\103\uffbe\105\uffbe\106\uffbe\107\uffbe\110" +
    "\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\116\uffbe\117\uffbe" +
    "\121\uffbe\001\002\000\070\003\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\067\uffb0\070\uffb0\071\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0" +
    "\114\uffb0\116\uffb0\117\uffb0\121\uffb0\001\002\000\044\003" +
    "\172\004\156\005\163\010\102\011\131\012\064\020\122" +
    "\021\120\022\063\034\166\035\162\036\157\075\171\104" +
    "\154\120\152\123\160\124\170\001\002\000\044\003\172" +
    "\004\156\005\163\010\102\011\131\012\064\020\122\021" +
    "\120\022\063\034\166\035\162\036\157\075\171\104\154" +
    "\120\152\123\160\124\170\001\002\000\022\003\u01d6\074" +
    "\207\075\210\076\213\077\211\100\206\101\205\105\u01d7" +
    "\001\002\000\070\003\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\101\uffb3\103\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3" +
    "\116\uffb3\117\uffb3\121\uffb3\001\002\000\070\003\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\103\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\114\uffbf\116\uffbf\117\uffbf\121\uffbf\001" +
    "\002\000\070\003\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\067\uffc0\070\uffc0\071\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\103\uffc0\105\uffc0\106\uffc0" +
    "\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0\116" +
    "\uffc0\117\uffc0\121\uffc0\001\002\000\070\003\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\103\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112" +
    "\uffb2\113\uffb2\114\uffb2\116\uffb2\117\uffb2\121\uffb2\001\002" +
    "\000\004\002\uffeb\001\002\000\004\002\ufff2\001\002\000" +
    "\006\003\uff91\104\uff91\001\002\000\006\003\uff90\104\uff90" +
    "\001\002\000\004\104\u0203\001\002\000\006\003\uff93\104" +
    "\uff93\001\002\000\006\003\uff92\104\uff92\001\002\000\006" +
    "\003\u01e3\104\u01e4\001\002\000\006\003\uff94\104\uff94\001" +
    "\002\000\006\003\uff8f\104\uff8f\001\002\000\020\003\u01f1" +
    "\026\067\027\111\030\101\031\075\032\106\105\u01e5\001" +
    "\002\000\020\003\u01e6\026\067\027\111\030\101\031\075" +
    "\032\106\105\u01e5\001\002\000\010\003\uffa3\116\uffa3\117" +
    "\uffa3\001\002\000\014\003\uff9a\105\uff9a\107\uff9a\116\020" +
    "\117\ufff8\001\002\000\010\003\u01f6\033\u01f8\034\u01f7\001" +
    "\002\000\010\003\u01ee\105\u01ef\107\u01ed\001\002\000\010" +
    "\003\u01ea\116\020\117\ufff8\001\002\000\012\002\uffa7\006" +
    "\uffa7\116\uffa7\117\uffa7\001\002\000\004\117\u01ec\001\002" +
    "\000\012\002\uffaa\006\uffaa\116\uffaa\117\uffaa\001\002\000" +
    "\016\003\u01f1\026\067\027\111\030\101\031\075\032\106" +
    "\001\002\000\016\003\u01f1\026\067\027\111\030\101\031" +
    "\075\032\106\001\002\000\010\003\uffa0\116\uffa0\117\uffa0" +
    "\001\002\000\010\003\uffa4\116\uffa4\117\uffa4\001\002\000" +
    "\010\003\uff9a\105\uff9a\107\uff9a\001\002\000\010\003\u01ee" +
    "\105\u01ef\107\u01ed\001\002\000\010\003\uffa1\116\uffa1\117" +
    "\uffa1\001\002\000\010\003\u01ee\105\u01ef\107\u01ed\001\002" +
    "\000\010\003\uffa2\116\uffa2\117\uffa2\001\002\000\012\003" +
    "\uff9d\034\u01fd\105\uff9d\107\uff9d\001\002\000\010\003\uff9f" +
    "\105\uff9f\107\uff9f\001\002\000\006\003\u01f9\034\u01fa\001" +
    "\002\000\012\003\uffac\102\327\105\uffac\107\uffac\001\002" +
    "\000\012\003\uffac\102\327\105\uffac\107\uffac\001\002\000" +
    "\010\003\uff9e\105\uff9e\107\uff9e\001\002\000\010\003\uff9b" +
    "\105\uff9b\107\uff9b\001\002\000\012\003\uffac\102\327\105" +
    "\uffac\107\uffac\001\002\000\010\003\uff9c\105\uff9c\107\uff9c" +
    "\001\002\000\004\117\u0200\001\002\000\012\002\uffa6\006" +
    "\uffa6\116\uffa6\117\uffa6\001\002\000\004\117\u0202\001\002" +
    "\000\012\002\uffa8\006\uffa8\116\uffa8\117\uffa8\001\002\000" +
    "\020\003\u01f1\026\067\027\111\030\101\031\075\032\106" +
    "\105\u01e5\001\002\000\004\117\u0205\001\002\000\012\002" +
    "\uffa9\006\uffa9\116\uffa9\117\uffa9\001\002\000\004\002\uffe5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\016\045\004\056\005\073\013\074\012\075" +
    "\006\076\003\001\001\000\002\001\001\000\054\002\120" +
    "\035\136\036\133\037\057\040\073\044\131\047\103\052" +
    "\126\053\060\054\107\055\134\057\065\060\116\061\122" +
    "\062\112\063\125\064\113\065\061\103\114\104\104\105" +
    "\132\001\001\000\014\045\004\056\005\073\013\074\012" +
    "\076\055\001\001\000\002\001\001\000\016\045\004\056" +
    "\005\073\013\074\012\075\053\076\003\001\001\000\014" +
    "\045\004\056\005\073\013\074\012\076\052\001\001\000" +
    "\004\046\051\001\001\000\004\046\046\001\001\000\004" +
    "\046\043\001\001\000\002\001\001\000\006\022\042\046" +
    "\022\001\001\000\006\022\023\046\022\001\001\000\004" +
    "\046\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\030\046\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\034\046\031\001\001\000\002\001\001\000" +
    "\006\023\040\046\031\001\001\000\006\023\037\046\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\045\004" +
    "\056\005\073\013\074\012\076\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\045\004\056\005\073\013" +
    "\074\012\076\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\045\004\056\005\073\013\074" +
    "\012\076\u0205\001\001\000\004\052\u01df\001\001\000\014" +
    "\045\004\056\005\073\013\074\012\076\u01d9\001\001\000" +
    "\014\045\004\056\005\073\013\074\012\076\u01d8\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\313\041" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\160\004\150\052\126\054\164\057" +
    "\154\100\u01b1\001\001\000\004\046\u01ae\001\001\000\002" +
    "\001\001\000\010\015\u0182\050\142\051\u0185\001\001\000" +
    "\002\001\001\000\004\046\u017f\001\001\000\006\036\u017b" +
    "\047\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\160\004\150\045\004\052\126" +
    "\054\164\056\005\057\154\073\013\074\012\076\u014a\100" +
    "\u0149\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\160\004\150\052\126\054\164\057" +
    "\154\100\u0145\001\001\000\004\046\u0142\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\045\004\056\005\073" +
    "\013\074\012\076\u0133\001\001\000\014\045\004\056\005" +
    "\073\013\074\012\076\u0132\001\001\000\002\001\001\000" +
    "\004\046\u0125\001\001\000\014\045\004\056\005\073\013" +
    "\074\012\076\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\045\004\056\005\073\013" +
    "\074\012\076\u0108\001\001\000\002\001\001\000\004\046" +
    "\371\001\001\000\014\045\004\056\005\073\013\074\012" +
    "\076\370\001\001\000\002\001\001\000\004\046\351\001" +
    "\001\000\002\001\001\000\004\047\334\001\001\000\002" +
    "\001\001\000\004\033\327\001\001\000\014\045\004\056" +
    "\005\073\013\074\012\076\325\001\001\000\002\001\001" +
    "\000\004\040\140\001\001\000\006\025\313\041\312\001" +
    "\001\000\012\015\141\016\145\046\144\050\142\001\001" +
    "\000\002\001\001\000\022\003\160\004\150\013\247\014" +
    "\244\052\126\054\164\057\154\100\246\001\001\000\006" +
    "\003\152\004\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\160\004\172\027\163\052\126\054\164\057" +
    "\154\100\166\001\001\000\002\001\001\000\016\003\160" +
    "\004\150\052\126\054\164\057\154\100\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\232\001\001\000\002\001\001\000\004" +
    "\026\224\001\001\000\004\030\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\177\001\001\000\004\005\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\160\004\150\052\126\054\164\057\154\100\221" +
    "\001\001\000\016\003\160\004\150\052\126\054\164\057" +
    "\154\100\220\001\001\000\016\003\160\004\150\052\126" +
    "\054\164\057\154\100\217\001\001\000\016\003\160\004" +
    "\150\052\126\054\164\057\154\100\216\001\001\000\016" +
    "\003\160\004\150\052\126\054\164\057\154\100\215\001" +
    "\001\000\016\003\160\004\150\052\126\054\164\057\154" +
    "\100\214\001\001\000\002\001\001\000\016\003\160\004" +
    "\150\052\126\054\164\057\154\100\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\222" +
    "\001\001\000\002\001\001\000\016\003\160\004\150\052" +
    "\126\054\164\057\154\100\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\231\001\001\000\004\026" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\160\004\150\027\236\052\126\054\164\057\154\100\166" +
    "\001\001\000\004\006\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\160\004\150" +
    "\013\306\014\305\052\126\054\164\057\154\100\302\001" +
    "\001\000\022\003\160\004\150\013\304\014\244\052\126" +
    "\054\164\057\154\100\246\001\001\000\002\001\001\000" +
    "\020\003\160\004\150\014\264\052\126\054\164\057\154" +
    "\100\246\001\001\000\002\001\001\000\012\015\141\016" +
    "\252\046\144\050\142\001\001\000\022\003\160\004\150" +
    "\013\262\014\244\052\126\054\164\057\154\100\246\001" +
    "\001\000\022\003\160\004\150\013\261\014\244\052\126" +
    "\054\164\057\154\100\246\001\001\000\002\001\001\000" +
    "\022\003\160\004\150\013\260\014\244\052\126\054\164" +
    "\057\154\100\246\001\001\000\022\003\160\004\150\013" +
    "\257\014\244\052\126\054\164\057\154\100\246\001\001" +
    "\000\022\003\160\004\150\013\256\014\244\052\126\054" +
    "\164\057\154\100\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\160\004\150\014\301\052\126\054\164" +
    "\057\154\100\302\001\001\000\002\001\001\000\020\003" +
    "\160\004\150\014\300\052\126\054\164\057\154\100\246" +
    "\001\001\000\020\003\160\004\150\014\277\052\126\054" +
    "\164\057\154\100\246\001\001\000\020\003\160\004\150" +
    "\014\276\052\126\054\164\057\154\100\246\001\001\000" +
    "\020\003\160\004\150\014\275\052\126\054\164\057\154" +
    "\100\246\001\001\000\020\003\160\004\150\014\274\052" +
    "\126\054\164\057\154\100\246\001\001\000\020\003\160" +
    "\004\150\014\273\052\126\054\164\057\154\100\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\160\004\150\052\126" +
    "\054\164\057\154\100\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\320\001\001" +
    "\000\004\026\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\324\001\001\000\004\041\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\333\001\001" +
    "\000\004\033\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\160\004\150\034\350" +
    "\052\126\054\164\057\154\100\340\001\001\000\020\003" +
    "\160\004\150\034\337\052\126\054\164\057\154\100\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\160\004\150\052\126\054\164\057\154\100\345\001\001" +
    "\000\016\003\160\004\150\052\126\054\164\057\154\100" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\160\004\150\013\355\014\244\031\356\052" +
    "\126\054\164\057\154\100\246\001\001\000\004\032\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\160\004\150\013\366\014\244\052\126\054\164\057\154" +
    "\100\246\001\001\000\002\001\001\000\022\003\160\004" +
    "\150\013\364\014\244\052\126\054\164\057\154\100\246" +
    "\001\001\000\002\001\001\000\004\032\365\001\001\000" +
    "\002\001\001\000\004\032\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\160\004\150\012\u0105\013\377" +
    "\014\244\052\126\054\164\057\154\100\246\001\001\000" +
    "\024\003\160\004\150\012\376\013\377\014\244\052\126" +
    "\054\164\057\154\100\246\001\001\000\004\046\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\160\004\150\052\126\054" +
    "\164\057\154\067\u010f\100\u010c\001\001\000\020\003\160" +
    "\004\150\052\126\054\164\057\154\067\u010b\100\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\160\004\150\052\126\054\164\057" +
    "\154\070\u0121\100\u011e\001\001\000\020\003\160\004\150" +
    "\052\126\054\164\057\154\070\u011d\100\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\160\004\150\012\u012d\013\377\014\244\052" +
    "\126\054\164\057\154\100\246\001\001\000\024\003\160" +
    "\004\150\012\u0129\013\377\014\244\052\126\054\164\057" +
    "\154\100\246\001\001\000\004\046\u012b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\160\004\150\012\u0130" +
    "\013\377\014\244\052\126\054\164\057\154\100\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\160\004\150\052\126\054" +
    "\164\057\154\100\u013e\001\001\000\016\003\160\004\150" +
    "\052\126\054\164\057\154\100\u0136\001\001\000\002\001" +
    "\001\000\004\046\u013c\001\001\000\004\046\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\004\056\005\073\013\074\012" +
    "\076\u0144\001\001\000\002\001\001\000\004\046\u0146\001" +
    "\001\000\002\001\001\000\014\045\004\056\005\073\013" +
    "\074\012\076\u0148\001\001\000\002\001\001\000\004\046" +
    "\u014b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\066\u0177\077\u015e\001\001\000\006\066" +
    "\u0155\077\u015e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\160\004" +
    "\150\052\126\054\164\057\154\100\u0168\001\001\000\016" +
    "\003\160\004\150\052\126\054\164\057\154\100\u0162\001" +
    "\001\000\002\001\001\000\016\003\160\004\150\052\126" +
    "\054\164\057\154\100\u0164\001\001\000\002\001\001\000" +
    "\016\003\160\004\150\052\126\054\164\057\154\100\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\160\004\150\052\126\054\164\057\154" +
    "\100\u016f\001\001\000\016\003\160\004\150\052\126\054" +
    "\164\057\154\100\u016b\001\001\000\002\001\001\000\016" +
    "\003\160\004\150\052\126\054\164\057\154\100\u016d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\160\004\150\052\126\054\164\057\154\100" +
    "\u0174\001\001\000\016\003\160\004\150\052\126\054\164" +
    "\057\154\100\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\u0179\001\001\000\004\025" +
    "\u017a\001\001\000\002\001\001\000\004\033\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\004\056\005\073\013\074\012" +
    "\076\u0181\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u01ac\035\u018d\043" +
    "\u018a\044\131\001\001\000\012\007\u018c\035\u018d\043\u018a" +
    "\044\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\u0192\050\u0190" +
    "\001\001\000\002\001\001\000\022\003\160\004\150\013" +
    "\u0193\014\244\052\126\054\164\057\154\100\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\u0195\050\u0190\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\160\004\150\010" +
    "\u01ab\013\u019b\014\244\052\126\054\164\057\154\100\246" +
    "\001\001\000\024\003\160\004\150\010\u019a\013\u019b\014" +
    "\244\052\126\054\164\057\154\100\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u01aa\042\u019e\001" +
    "\001\000\006\011\u01a1\042\u019e\001\001\000\002\001\001" +
    "\000\010\017\u01a5\050\u0190\051\u01a4\001\001\000\010\017" +
    "\u01a3\050\u0190\051\u01a2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u01a9\001\001\000\004\046\u01a8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\045\004\056\005\073\013\074\012\076" +
    "\u01b0\001\001\000\002\001\001\000\004\046\u01b2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\160\004\150\012\u01bb\013\377\014\244\052\126" +
    "\054\164\057\154\100\246\001\001\000\024\003\160\004" +
    "\150\012\u01b7\013\377\014\244\052\126\054\164\057\154" +
    "\100\246\001\001\000\004\046\u01b9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\045\004\056\005\073\013\074" +
    "\012\076\u01be\001\001\000\002\001\001\000\020\003\160" +
    "\004\150\052\126\054\164\057\154\072\u01d0\100\u01c2\001" +
    "\001\000\020\003\160\004\150\052\126\054\164\057\154" +
    "\072\u01c1\100\u01c2\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u01cd\001\001\000\004\101\u01c7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\160" +
    "\004\150\052\126\054\164\057\154\071\u01d7\100\u01d3\001" +
    "\001\000\020\003\160\004\150\052\126\054\164\057\154" +
    "\071\u01d4\100\u01d3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\u0200\047\u01e6\102\u01e7\001\001\000\010" +
    "\020\u01e8\047\u01e6\102\u01e7\001\001\000\002\001\001\000" +
    "\004\046\u01fe\001\001\000\002\001\001\000\004\021\u01ef" +
    "\001\001\000\004\046\u01ea\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\u01e6\102\u01f3" +
    "\001\001\000\006\047\u01e6\102\u01f1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u01f2" +
    "\001\001\000\002\001\001\000\004\021\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u01fb\001\001\000\004\033\u01fa\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u01fd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\u0203" +
    "\047\u01e6\102\u01e7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhytonSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhytonSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhytonSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        int errors=0;
        String tokenError="";
        int lineError, columnError =0;
        String expectedTokens="";
        ArrayList<SyntaxError> list = new ArrayList();
        ArrayList<Instruction> instructions = new ArrayList();

        public void settingInstructions(ArrayList<Instruction> ins){
                for(int index=ins.size()-1; index>=0; index--){
                        instructions.add(ins.get(index));
                }
        }

        public ArrayList<Instruction> getInstructions(){
                return instructions;
        }

        public ArrayList<SyntaxError> getList(){
                return list;
        }

        public void report_error(String message, Object info) { 
                if (info instanceof String){
                        Symbol s = cur_token;
                        //System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);;
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
        }

        public void report_error_final(String message, Object info){
                if (info instanceof String){
                        Symbol s = cur_token;
                        errors++;       
                        //System.err.println("  "+ errors + "==> " + info + ": "+ message);
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
                
        }

    @Override
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
            int column = symbol.right;
            String token = (String) cur_token.value;
            //We get the production
                tokenError = token;
                lineError = line;
                columnError = column;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ",";
                }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
                tokenError = (String) cur_token.value;
                lineError = symbol.left;
                columnError = symbol.right;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
                report_error_final("Estado Ilegal de Expresion", "Sintaxis incorrecta");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PhytonSyntax$actions {
  private final PhytonSyntax parser;

  /** Constructor */
  CUP$PhytonSyntax$actions(PhytonSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PhytonSyntax$do_action_part00000000(
    int                        CUP$PhytonSyntax$act_num,
    java_cup.runtime.lr_parser CUP$PhytonSyntax$parser,
    java.util.Stack            CUP$PhytonSyntax$stack,
    int                        CUP$PhytonSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhytonSyntax$result;

      /* select the action based on the action number */
      switch (CUP$PhytonSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = start_val;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PhytonSyntax$parser.done_parsing();
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // kar ::= KEEP 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kar",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // kar ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kar",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS tab_re SPACE 
            {
              Principal RESULT =null;
		
                RESULT = new Principal(cur_token.left, cur_token.right);
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= kar PRINCIPAL error CLOSE_PARENTHESIS SPACE 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS error SPACE 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tab ::= TAB tab_re 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT=1+e; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tab_re ::= TAB tab_re 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT=1+e; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab_re",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tab_re ::= 
            {
              Integer RESULT =null;
		 RESULT=0; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab_re",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        settingInstructions(ins);
                }
         
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("main_body",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_body ::= error main_body 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Simbolo no esperado","Inicio ilegal de la expresion"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("main_body",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= tab principal instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int prinleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int prinright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Principal prin = (Principal)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(prin!=null){
                                prin.setIndentation(numTab);
                                lista.add(prin);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= pista instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Pista pis = (Pista)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(pis!=null){
                                lista.add(pis);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= tab throw_function tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		ThrowFunction func = (ThrowFunction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= tab function instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(func!=null){
                                lista.add(func);
                                func.setIndentation(numTab);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= tab func_especiales SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= tab v instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= tab for instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= tab while instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= tab do_while instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= tab if instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= tab switch instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= tab EXIT tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                Exit newExit = new Exit(num, cur_token.left, cur_token.right);
                                ins.add(newExit);
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= tab RETORNA value tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                Return newReturn = new Return(numTab, cur_token.left, cur_token.right, v);
                                lista.add(newReturn);
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= tab CONTINUE tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                Continue newContinue = new Continue(numTab, cur_token.left, cur_token.right);
                                lista.add(newContinue);
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= default tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null && e1!=null){
                                ins.add(e1);
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= cases tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null && e1 !=null){
                                ins.add(e1);
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= tab SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = ins;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = ins;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= tab error instruction 
            {
              ArrayList<Instruction> RESULT =null;
		 parser.report_error("Se esperaba alguna expresion como si, sino si, sino, mientras, hacer, para...","Inicio ilegal de la expresion"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> list = new ArrayList(); RESULT=list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // notas ::= DO 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // notas ::= RE 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // notas ::= MI 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // notas ::= FA 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // notas ::= SOL 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // notas ::= LA 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // notas ::= SI 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // notas ::= DOR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // notas ::= RER 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // notas ::= MIR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // notas ::= FAR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // notas ::= SOLR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // notas ::= LAR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // notas ::= SIR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString(), cur_token.left, cur_token.right); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // notas ::= error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		parser.report_error("Valor incorrecto en, se esperaba una nota musical","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ordenar_options ::= ASCENDENTE 
            {
              Operation RESULT =null;
		
                        Value value = new Value("cadena", "ascendente", cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ordenar_options ::= DESCENDENTE 
            {
              Operation RESULT =null;
		
                        Value value = new Value("cadena", "descendente", cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ordenar_options ::= PARES 
            {
              Operation RESULT =null;
		
                        Value value = new Value("cadena", "pares", cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ordenar_options ::= IMPARES 
            {
              Operation RESULT =null;
		
                        Value value = new Value("cadena", "impares", cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ordenar_options ::= PRIMOS 
            {
              Operation RESULT =null;
		
                        Value value = new Value("cadena", "primos", cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ordenar_options ::= error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Valor incorrecto en, se esperaba un metodo de ordenamiento","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reproducir_syntax ::= notas COMA value COMA value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation e3 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e4 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Reproducir reproducir = new Reproducir(cur_token.left, cur_token.right);
                        reproducir.setNota(e1);
                        reproducir.setOctava(e2);
                        reproducir.setMilisegundos(e3);
                        reproducir.setCanal(e4);
                        RESULT = reproducir;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reproducir_syntax ::= notas error value COMA value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reproducir_syntax ::= notas COMA value error value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // reproducir_syntax ::= notas COMA value COMA value error value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reproducir_syntax ::= notas COMA value COMA value COMA value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // esperar_syntax ::= value COMA value CLOSE_PARENTHESIS 
            {
              Esperar RESULT =null;
		int milisegundosleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int milisegundosright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation milisegundos = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation canal = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Esperar esperar = new Esperar(cur_token.left, cur_token.right);
                        Operation miliSegundos=null;
                        Operation canalOp=null;
                        if(milisegundos!=null && canal!=null){
                                miliSegundos = milisegundos;
                                canalOp = canal;
                        }
                        esperar.setMilisegundos(miliSegundos);
                        esperar.setCanal(canalOp);
                        RESULT =esperar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",26, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // esperar_syntax ::= value error value CLOSE_PARENTHESIS 
            {
              Esperar RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",26, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // esperar_syntax ::= value COMA value error 
            {
              Esperar RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",26, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sumarizar_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Sumarizar sumarizar = new Sumarizar(cur_token.left, cur_token.right);
                        sumarizar.setArreglo(e1);
                        RESULT = sumarizar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sumarizar_syntax ::= value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba en \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // longitud_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Longitud longitud = new Longitud(cur_token.left, cur_token.right);
                        longitud.setArray(e1);
                        RESULT = longitud;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // longitud_syntax ::= value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mensaje_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Mensaje mensaje = new Mensaje(cur_token.left, cur_token.right);
                        mensaje.setMensaje(e1);
                        RESULT = mensaje;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mensaje_syntax ::= value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ordenar_syntax ::= value COMA ordenar_options CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation sim = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int ordleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation ord = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Ordenar ordenar = new Ordenar(cur_token.left, cur_token.right);
                        Operation operation = sim;
                        ordenar.setArray(sim);
                        ordenar.setForma(ord);
                        RESULT = ordenar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ordenar_syntax ::= value error ordenar_options CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ordenar_syntax ::= value COMA ordenar_options error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_especiales ::= REPRODUCIR OPEN_PARENTHESIS reproducir_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_especiales ::= REPRODUCIR error reproducir_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_especiales ::= SUMARIZAR OPEN_PARENTHESIS sumarizar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // func_especiales ::= SUMARIZAR error sumarizar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func_especiales ::= LONGITUD OPEN_PARENTHESIS longitud_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_especiales ::= LONGITUD error longitud_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\"  ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func_especiales ::= ESPERAR OPEN_PARENTHESIS esperar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Esperar e1 = (Esperar)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // func_especiales ::= ESPERAR error esperar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // func_especiales ::= MENSAJE OPEN_PARENTHESIS mensaje_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // func_especiales ::= MENSAJE error mensaje_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // func_especiales ::= ORDENAR OPEN_PARENTHESIS ordenar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // func_especiales ::= ORDENAR error ordenar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // kf ::= KEEP type_function function_mode 
            {
              VariableIndicator RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		VariableIndicator tf = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(tf!=null){
                VariableIndicator indicator = tf;
                indicator.setGlobal(true);
                if(m!=null){
                        indicator.setSize(m);
                }
                RESULT=indicator;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",29, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // kf ::= type_function function_mode 
            {
              VariableIndicator RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		VariableIndicator tf = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(tf!=null){
                VariableIndicator indicator = tf;
                if(m!=null){
                        indicator.setSize(m);
                }
                RESULT=indicator;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",29, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function_mode ::= OPEN_BRACKET CLOSE_BRACKET function_mode 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(m!=null){
                                RESULT = m+1;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_mode",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_mode ::= 
            {
              Integer RESULT =null;
		
                        RESULT = 0;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_mode",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_mode ::= OPEN_BRACKET error function_mode 
            {
              Integer RESULT =null;
		parser.report_error("Se esperaba \"]\" ","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_mode",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function ::= kf word_functions OPEN_PARENTHESIS multiple_v tab_re SPACE 
            {
              Function RESULT =null;
		int variableIndicatorleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int variableIndicatorright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		VariableIndicator variableIndicator = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		ArrayList<Operation> mv = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(variableIndicator!=null && mv!=null){
                        VariableIndicator indicator = variableIndicator;
                        ArrayList<Operation> list = mv;
                        Value value = new Value("function",sim, cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        Function function = new Function(cur_token.left, cur_token.right);
                        function.setName(value);
                        function.setParameters(list);
                        function.setParamsIndicator(indicator);
                        RESULT = function;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function ::= kf error OPEN_PARENTHESIS multiple_v SPACE 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function ::= kf word_functions error multiple_v SPACE 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function ::= kf word_functions OPEN_PARENTHESIS multiple_v error 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function ::= kf word_functions OPEN_PARENTHESIS error tab_re SPACE 
            {
              Function RESULT =null;
		int variableIndicatorleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int variableIndicatorright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		VariableIndicator variableIndicator = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Inicio ilegal de expresion declarando parametros ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // type_function ::= data_type 
            {
              VariableIndicator RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String typ = "";
                ArrayList<Operation> dimension = new ArrayList();
                if(data!=null){
                        typ=data;
                }
                VariableIndicator indicator = new VariableIndicator(false, typ, dimension);
                RESULT = indicator;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type_function",28, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // multiple_v ::= function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation fv = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mvreleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mvreright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> mvre = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(mvre!=null){
                        ArrayList<Operation> list = mvre;
                        list.add(fv);
                        ArrayList<Operation> aux = new ArrayList();
                        for(int index=list.size()-1; index>=0; index--){
                                aux.add(list.get(index));
                        }
                        RESULT = aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // multiple_v ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                ArrayList<Operation> list = new ArrayList();
                RESULT = list;
            
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // multiple_v_re ::= COMA function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation fv = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mvreleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mvreright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> mvre = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(mvre!=null){
                                ArrayList<Operation> list = mvre;
                                list.add(fv);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // multiple_v_re ::= error function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma o \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // multiple_v_re ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                        ArrayList<Operation> list = new ArrayList();
                        RESULT = list;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // function_variables ::= data_type SIMBOLO 
            {
              Operation RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                                Value value = new Value(data, sim.toString(), cur_token.left, cur_token.right);
                                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                                RESULT = operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // function_variables ::= data_type ARREGLO SIMBOLO function_mode 
            {
              Operation RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                                Value value = new Value(data, sim.toString(), dim, cur_token.left, cur_token.right);
                                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                                RESULT = operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // function_variables ::= data_type error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // function_variables ::= data_type error SIMBOLO function_mode 
            {
              Operation RESULT =null;
		 parser.report_error("Error, se esperaba la palabra arreglo","Mal declarado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // function_variables ::= data_type ARREGLO error function_mode 
            {
              Operation RESULT =null;
		 parser.report_error("Error, se esperaba el identificador","Mal declarado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // function_variables ::= error 
            {
              Operation RESULT =null;
		parser.report_error("Error, se esperaba un nombre","Nombre no encontrado");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // method_value ::= condition_re method_value_re 
            {
              ArrayList<Operation> RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition condition = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> re = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(condition !=null && re !=null){
                        ArrayList<Operation> aux = new ArrayList();
                        re.add(new Operation(condition, cur_token.left, cur_token.right));
                        for(int index=re.size()-1; index>=0; index--){
                                aux.add(re.get(index));
                        }
                        RESULT = aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value",23, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // method_value ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                        ArrayList<Operation> lista = new ArrayList();
                        RESULT = lista;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value",23, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // method_value_re ::= COMA condition_re method_value_re 
            {
              ArrayList<Operation> RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition condition = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> re = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(condition!=null && re !=null){
                                Operation operation = new Operation(condition, cur_token.left, cur_token.right);
                                re.add(operation);
                                RESULT = re;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value_re",24, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // method_value_re ::= error condition_re method_value_re 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma o \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value_re",24, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // method_value_re ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                        ArrayList<Operation> lista = new ArrayList();
                        RESULT = lista;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value_re",24, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // word_functions ::= SIMBOLO 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT= sim.toString();
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // word_functions ::= REPRODUCIR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // word_functions ::= ESPERAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // word_functions ::= ORDENAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // word_functions ::= LONGITUD 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // word_functions ::= MENSAJE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // throw_function ::= word_functions OPEN_PARENTHESIS method_value 
            {
              ThrowFunction RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> v = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(sim!=null && v !=null){
                                ThrowFunction function = new ThrowFunction(sim, cur_token.left, cur_token.right);
                                function.setParameters(v);
                                RESULT = function;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("throw_function",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // pista ::= PISTA SIMBOLO d 
            {
              Pista RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int extendedleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int extendedright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> extended = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        ArrayList<Operation> list;
        if(extended!=null){
                list = extended;
        }else{
                list = new ArrayList();
        }
        Pista function = new Pista(cur_token.left, cur_token.right);
        function.setName(sim.toString());
        function.setExtendeds(list);
        RESULT = function;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // pista ::= PISTA error d 
            {
              Pista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Error, se esperaba un nombre de la funcion","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // pista ::= PISTA SIMBOLO error 
            {
              Pista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("No se encontro un salto de linea o extension de pistas","Problema en Pista"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // d ::= EXTIENDE SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> d = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista",sim.toString(), cur_token.left, cur_token.right);
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                ArrayList<Operation> auxiliar = new ArrayList();
                for(int index=lista.size()-1; index>=0; index--){
                        auxiliar.add(lista.get(index));
                }
                RESULT = auxiliar;
        }        
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d",16, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // d ::= tab_re SPACE 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d",16, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // d_ ::= COMA SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> d = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista", sim.toString(), cur_token.left, cur_token.right);
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                RESULT = lista;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // d_ ::= error SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // d_ ::= COMA error d_ 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro la pista","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // d_ ::= tab_re SPACE 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // increm_variables ::= SIMBOLO increm 
            {
              Variable RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Variable variable = new Variable(cur_token.left, cur_token.right);
                        variable.setName(sim.toString());
                        Assignment assignment = new Assignment(cur_token.left, cur_token.right);
                        assignment.setMetodo(in);
                        variable.setValue(assignment);
                        RESULT = variable;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm_variables",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // increm_variables ::= SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm_variables",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // increm_variables ::= error increm 
            {
              Variable RESULT =null;
		 parser.report_error("Se esperaba ++ o -- ","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm_variables",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // increm_variables ::= error assign_for 
            {
              Variable RESULT =null;
		 parser.report_error("Se esperaba ++ o -- ","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm_variables",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // increm ::= INCREASE 
            {
              String RESULT =null;
		RESULT = "++";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // increm ::= DECREASE 
            {
              String RESULT =null;
		RESULT = "--";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // increm ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba ++ o -- o alguna asignacion","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // v_for ::= type SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		VariableIndicator typ = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignforleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignforright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assignfor = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Assignment assignment = assignfor;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                variable.setParameters(typ);
                RESULT = variable;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // v_for ::= SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Assignment assignment = assign;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                RESULT = variable;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // v_for ::= error 
            {
              Variable RESULT =null;
		parser.report_error("Se esperaba la declaracion de una variable","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // assign_for ::= equal condition_re 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition op = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(e1!=null && op!=null){
                        String mode = e1.toString();
                        Operation operation = new Operation(op,cur_token.left, cur_token.right);
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(operation);
                        RESULT=asignacion;
        }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_for",13, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // v ::= type variables assign_special 
            {
              Instruction RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		VariableIndicator typ = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(var!=null){
                Assignment assignment = assign;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment, typ);
                RESULT = chunk;
        }    
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // v ::= variables assign 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assig = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(var!=null){
                Assignment assignment = assig;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment);
                RESULT = chunk;
        }    
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // v ::= variables increm SPACE 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
         if(inc!=null && var!=null){
                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                asignacion.setMetodo(inc);
                VariableChunk chunk = new VariableChunk(var ,asignacion);
                RESULT = chunk;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // data_type ::= ENTERO 
            {
              String RESULT =null;
		RESULT="entero";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // data_type ::= DOBLE 
            {
              String RESULT =null;
		RESULT="doble";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // data_type ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT="boolean";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // data_type ::= CADENA 
            {
              String RESULT =null;
		RESULT="cadena";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // data_type ::= CARACTER 
            {
              String RESULT =null;
		RESULT="caracter";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variables ::= SIMBOLO variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Variable> arr = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(arr!=null){
                        lista=arr;
                        lista.add(variable);
                        ArrayList<Variable> auxiliar = new ArrayList();
                        for(int index=lista.size()-1; index>=0; index--){
                                auxiliar.add(lista.get(index));
                        }
                }
                RESULT = lista;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variables ::= ARREGLO SIMBOLO variables_re dimension 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> re = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(re!=null && dim!=null){
                                Variable variable = new Variable(cur_token.left, cur_token.right);
                                variable.setName(sim.toString());
                                re.add(variable);
                                for(int index=0; index<re.size(); index++){
                                        re.get(index).setDimension(dim);
                                }
                                RESULT = re;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variables ::= SIMBOLO dimension 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(dim!=null){
                                Variable variable = new Variable(cur_token.left, cur_token.right);
                                variable.setName(sim.toString());
                                variable.setDimension(dim);
                                ArrayList<Variable> list = new ArrayList();
                                list.add(variable);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variables_re ::= COMA SIMBOLO variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Variable> arr = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(arr!=null){
                        lista = arr;
                        lista.add(variable);
                }
                RESULT=lista;
                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",31, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // variables_re ::= COMA error variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba nombre de una variable ","Simbolo no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",31, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // variables_re ::= 
            {
              ArrayList<Variable> RESULT =null;
		 ArrayList<Variable> variables = new ArrayList(); RESULT =variables; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",31, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // k ::= KEEP VAR 
            {
              Boolean RESULT =null;
		RESULT=true;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // k ::= VAR 
            {
              Boolean RESULT =null;
		RESULT=false;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // k ::= KEEP error 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        parser.report_error("Se esperaba \"var\" ","Sintaxis incorrecta");
        RESULT=false;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // type ::= k data_type 
            {
              VariableIndicator RESULT =null;
		int kValueleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int kValueright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Boolean kValue = (Boolean)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String data=typ;
                boolean keep = kValue;
                ArrayList<Operation> list = new ArrayList();
                if(data==null){
                        data="";
                }
                if(list==null){
                        ArrayList<Operation> value = new ArrayList();
                        list = value;
                }
                VariableIndicator indicator = new VariableIndicator(keep, data, list);
                RESULT = indicator;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // type ::= k 
            {
              VariableIndicator RESULT =null;
		int kValueleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int kValueright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Boolean kValue = (Boolean)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String data="void";
                boolean keep = kValue;
                ArrayList<Operation> list = new ArrayList();
                if(data==null){
                        data="";
                }
                if(list==null){
                        ArrayList<Operation> value = new ArrayList();
                        list = value;
                }
                VariableIndicator indicator = new VariableIndicator(keep, data, list);
                RESULT = indicator;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // assign_special ::= assign 
            {
              Assignment RESULT =null;
		int assileft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assiright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assi = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = assi;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_special",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // assign_special ::= tab_re SPACE 
            {
              Assignment RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_special",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // assign ::= equal condition_re assign_special 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition re = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment f = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(e1!=null && re!=null){
                        if(f!=null){
                                String mode = e1.toString();
                                Operation value = new Operation(re,cur_token.left, cur_token.right);
                                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                                asignacion.setMetodo(mode);
                                asignacion.setValue(value);
                                asignacion.setAssignment(f);
                                RESULT=asignacion;
                        }else{
                                String mode = e1.toString();
                                Operation value = new Operation(re,cur_token.left, cur_token.right);
                                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                                asignacion.setMetodo(mode);
                                asignacion.setValue(value);
                                RESULT=asignacion;
                        }
                }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // assign ::= EQUAL array_assign 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Dimension f = (Dimension)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(f!=null){
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        Value value = new Value(f, cur_token.left, cur_token.right);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        asignacion.setValue(operation);
                        RESULT = asignacion;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // equal ::= EQUAL 
            {
              String RESULT =null;
		RESULT = "=";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // equal ::= EQUAL_MORE 
            {
              String RESULT =null;
		RESULT = "+=";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // array ::= ARREGLO dimension 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(dim!=null)
                {
                        RESULT=dim;
                }else{
                        ArrayList<Operation> list = new ArrayList(); 
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array",18, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // array ::= 
            {
              ArrayList<Operation> RESULT =null;
		 ArrayList<Operation> list = new ArrayList(); RESULT=list; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array",18, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dimension ::= OPEN_BRACKET value CLOSE_BRACKET dimension_re 
            {
              ArrayList<Operation> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        ArrayList<Operation> aux = new ArrayList();
                        list.add(v);
                        for(int index=list.size()-1; index>=0; index--){
                                aux.add(list.get(index));
                        }
                        RESULT = aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dimension ::= OPEN_BRACKET value error dimension_re 
            {
              ArrayList<Operation> RESULT =null;
		parser.report_error("Se esperaba \"]\"","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dimension_re ::= OPEN_BRACKET value CLOSE_BRACKET dimension_re 
            {
              ArrayList<Operation> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        list.add(v);
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension_re",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // dimension_re ::= OPEN_BRACKET value error dimension_re 
            {
              ArrayList<Operation> RESULT =null;
		parser.report_error("Se esperaba \"]\"","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension_re",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // dimension_re ::= 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> lista = new ArrayList(); 
                RESULT = lista;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension_re",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // array_assign ::= assign_arr 
            {
              Dimension RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Dimension> arr = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(arr!=null){
                                Dimension dimension = new Dimension(cur_token.left,cur_token.right);
                                dimension.setDimensions(arr);
                                dimension.setDimension(0);
                                RESULT = dimension;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array_assign",1, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // new_assign ::= CLOSE_CURLY COMA OPEN_CURLY mult_values new_assign 
            {
              ArrayList<Dimension> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Operation> m = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Dimension> n = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(m!=null && n!=null){
                                Dimension dimension = new Dimension(cur_token.left,cur_token.right);
                                dimension.setDimension(1);
                                dimension.setData(m);
                                n.add(dimension);
                                RESULT = n;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("new_assign",4, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // new_assign ::= CLOSE_CURLY 
            {
              ArrayList<Dimension> RESULT =null;
		
                        ArrayList<Dimension> dimension = new ArrayList();
                        RESULT = dimension;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("new_assign",4, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // assign_arr ::= OPEN_CURLY assign_arr assign_arr_re 
            {
              ArrayList<Dimension> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Dimension> arr = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Dimension> re = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 //Como es la parte final le damos vuelta a los arreglos siempre
                if(arr!=null && re!=null){
                        Dimension dimension = new Dimension(cur_token.left,cur_token.right);
                        dimension.setDimensions(arr);
                        re.add(dimension);
                        ArrayList<Dimension> aux = new ArrayList();
                        for(int index=re.size()-1; index>=0; index--){
                                aux.add(re.get(index));
                        }
                        RESULT=aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr",2, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // assign_arr ::= OPEN_CURLY mult_values new_assign 
            {
              ArrayList<Dimension> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Operation> m = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Dimension> n = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 //SOlo para dimensiones de grado 1
                        if(n!=null && m!=null){
                                Dimension dimension = new Dimension(cur_token.left,cur_token.right);
                                dimension.setDimension(1);
                                dimension.setData(m);
                                n.add(dimension);
                                ArrayList<Dimension> aux = new ArrayList();
                                for(int index=n.size()-1; index>=0; index--){
                                        aux.add(n.get(index));
                                }
                                RESULT = aux;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr",2, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // assign_arr_re ::= CLOSE_CURLY COMA OPEN_CURLY assign_arr assign_arr_re 
            {
              ArrayList<Dimension> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Dimension> arr = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Dimension> re = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(arr!=null && re!=null){
                                Dimension dimension = new Dimension(cur_token.left,cur_token.right);
                                dimension.setDimensions(arr);
                                re.add(dimension);
                                RESULT = re;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr_re",3, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // assign_arr_re ::= CLOSE_CURLY 
            {
              ArrayList<Dimension> RESULT =null;
		
                        ArrayList<Dimension> dimension = new ArrayList();
                        RESULT = dimension;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr_re",3, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // mult_values ::= value mult_values_re 
            {
              ArrayList<Operation> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> re = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(v!=null && re!=null){
                        ArrayList<Operation> aux = new ArrayList();
                        re.add(v);
                        for(int index=re.size()-1; index>=0; index--){
                                aux.add(re.get(index));
                        }
                        RESULT = aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values",21, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // mult_values_re ::= COMA value mult_values_re 
            {
              ArrayList<Operation> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> re = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(v!=null && re!=null){
                                re.add(v);
                                RESULT = re;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values_re",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // mult_values_re ::= 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values_re",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // value ::= NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("entero",num.toString(), cur_token.left, cur_token.right); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // value ::= MINUS NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("entero","-"+num.toString(), cur_token.left, cur_token.right); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // value ::= DECIMAL 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("doble",num.toString(), cur_token.left, cur_token.right); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // value ::= MINUS DECIMAL 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("doble","-"+num.toString(), cur_token.left, cur_token.right); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // value ::= STRING 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                        String text = num.toString();
                        text = text.substring(1, text.length() - 1);
                        Value value = new Value("cadena",text, cur_token.left, cur_token.right);
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // value ::= CHAR 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                        String text = num.toString();
                        text = text.substring(1, text.length() - 1);
                        Value value = new Value("caracter", text, cur_token.left, cur_token.right); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // value ::= array_assign 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e!=null){
                                Value value = new Value(e, cur_token.left, cur_token.right);
                                Operation operation = new Operation(value,cur_token.left, cur_token.right);
                                RESULT=operation;
                        }
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // value ::= throw_function 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ThrowFunction num = (ThrowFunction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Operation operation = new Operation(num, cur_token.left, cur_token.right);
                        RESULT = operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // value ::= value ADD value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;
                        }
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // value ::= value MINUS value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // value ::= value MULTIPLY value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // value ::= value DIV value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // value ::= value POW value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // value ::= value MODULE value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // value ::= OPEN_PARENTHESIS value CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = e2;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // value ::= SIMBOLO dimension_re 
            {
              Operation RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
        Value value = new Value(sim.toString(), dim, cur_token.left, cur_token.right);
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation; 
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // value ::= TRUE 
            {
              Operation RESULT =null;
		Value value = new Value("boolean","true", cur_token.left, cur_token.right); 
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // value ::= func_especiales 
            {
              Operation RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction func = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        Value value = new Value("specialFunction",func , cur_token.left, cur_token.right);
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // value ::= FALSE 
            {
              Operation RESULT =null;
		Value value = new Value("boolean","false", cur_token.left, cur_token.right);
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
         RESULT = operation;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // value ::= error 
            {
              Operation RESULT =null;
		 parser.report_error("Se esperaba algun valor","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // if ::= block_if 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		If e1 = (If)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // if ::= block_elseif 
            {
              Instruction RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ElseIf e2 = (ElseIf)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e2;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // if ::= block_else 
            {
              Instruction RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Else e3 = (Else)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e3;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // block_if ::= SI OPEN_PARENTHESIS condition tab_re SPACE 
            {
              If RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(con!=null){
                        If block = new If(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",65, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // block_if ::= SI error condition SPACE 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" en ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",65, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // block_if ::= SI OPEN_PARENTHESIS condition error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",65, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // block_elseif ::= ELSE SI OPEN_PARENTHESIS condition tab_re SPACE 
            {
              ElseIf RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(con!=null){
                        ElseIf block = new ElseIf(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // block_elseif ::= ELSE error OPEN_PARENTHESIS condition SPACE 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("No se agrego \"Si\" en la declaracion","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // block_elseif ::= ELSE SI error condition SPACE 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // block_elseif ::= ELSE SI OPEN_PARENTHESIS condition error 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // block_else ::= ELSE tab_re SPACE 
            {
              Else RESULT =null;
		
                Else block = new Else(cur_token.left, cur_token.right);
                RESULT = block;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_else",67, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // block_else ::= ELSE error 
            {
              Else RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_else",67, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // condition ::= condition_re CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        if(con!=null){
                                RESULT = con;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // condition ::= condition_re error 
            {
              Condition RESULT =null;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // condition_re ::= condition_re AND condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // condition_re ::= condition_re NAND condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // condition_re ::= condition_re OR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // condition_re ::= condition_re NOR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // condition_re ::= condition_re XOR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // condition_re ::= OPEN_PARENTHESIS condition_re CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 RESULT = e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // condition_re ::= NOT condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!");
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // condition_re ::= comparation 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Comparation comparation = e1;
                                Condition condition = new Condition(comparation, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // comparation ::= comparation EQUALIZATION comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // comparation ::= comparation DIFFERENTIATION comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // comparation ::= comparation GREATER comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // comparation ::= comparation GREATER_THAN comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // comparation ::= comparation LESSER comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // comparation ::= comparation LESSER_THAN comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // comparation ::= OPEN_PARENTHESIS comparation CLOSE_PARENTHESIS 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // comparation ::= NULL_ comparation 
            {
              Comparation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Comparation comparation = new Comparation(true, e, cur_token.left, cur_token.right);
                        RESULT = comparation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // comparation ::= value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Comparation comparation = new Comparation(e1, cur_token.left, cur_token.right);
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // switch ::= SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS tab_re SPACE 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		
                        Switch newSwitch = new Switch(cur_token.left, cur_token.right);
                        newSwitch.setVariable(val);
                        RESULT = newSwitch;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // switch ::= SWITCH error value CLOSE_PARENTHESIS tab_re SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // switch ::= SWITCH OPEN_PARENTHESIS value error tab_re SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // switch ::= SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS tab_re error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // default ::= tab DEFAULT tab_re SPACE 
            {
              Instruction RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		
                Default lastCase = new Default(ind, cur_token.left, cur_token.right);
                RESULT = lastCase;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("default",58, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // default ::= tab DEFAULT tab_re error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("default",58, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // cases ::= tab CASE value tab_re SPACE 
            {
              Instruction RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(val!=null){
                        Case newCase = new Case(ind, cur_token.left, cur_token.right);
                        newCase.setValue(val);
                        RESULT = newCase;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cases ::= tab error value tab_re SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Se esperaba la palabra una declaracion ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cases ::= tab CASE value tab_re error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // for ::= FOR OPEN_PARENTHESIS for_instructions SPACE 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(f!=null){
                        RESULT = f;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // for ::= FOR error for_instructions SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // for ::= FOR OPEN_PARENTHESIS for_instructions error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // for_instructions ::= v_for COLON for_condition 
            {
              For RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(f!=null){
                                For newFor = f;
                                newFor.setVariable(v);
                                RESULT = newFor;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_instructions",5, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // for_instructions ::= v_for error for_condition 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \";\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_instructions",5, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // for_condition ::= condition_re COLON for_increm 
            {
              For RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(f!=null){
                                For newFor = f;
                                newFor.setCondition(con);
                                RESULT = newFor;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_condition",6, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // for_condition ::= condition_re error for_increm 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \";\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_condition",6, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // for_increm ::= increm_variables CLOSE_PARENTHESIS tab_re 
            {
              For RESULT =null;
		int incvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int incvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Variable incv = (Variable)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                        For newFor = new For(cur_token.left, cur_token.right);
                        newFor.setPaso(incv);
                        RESULT = newFor;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_increm",7, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // for_increm ::= increm_variables error tab_re 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_increm",7, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // while ::= WHILE OPEN_PARENTHESIS condition tab_re SPACE 
            {
              Instruction RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(con!=null){
                        While newWhile = new While(cur_token.left, cur_token.right);
                        newWhile.setCondition(con);
                        RESULT = newWhile;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // while ::= WHILE error condition tab_re SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // while ::= WHILE OPEN_PARENTHESIS condition tab_re error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // do_while ::= HACER tab_re SPACE 
            {
              Instruction RESULT =null;
		
                DoWhile doWhile = new DoWhile(cur_token.left, cur_token.right);
                RESULT = doWhile;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("do_while",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // do_while ::= HACER tab_re error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("do_while",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PhytonSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PhytonSyntax$do_action(
    int                        CUP$PhytonSyntax$act_num,
    java_cup.runtime.lr_parser CUP$PhytonSyntax$parser,
    java.util.Stack            CUP$PhytonSyntax$stack,
    int                        CUP$PhytonSyntax$top)
    throws java.lang.Exception
    {
              return CUP$PhytonSyntax$do_action_part00000000(
                               CUP$PhytonSyntax$act_num,
                               CUP$PhytonSyntax$parser,
                               CUP$PhytonSyntax$stack,
                               CUP$PhytonSyntax$top);
    }
}

}
