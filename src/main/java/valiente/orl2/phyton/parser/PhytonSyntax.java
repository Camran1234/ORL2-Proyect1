
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package valiente.orl2.phyton.parser;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import valiente.orl2.phyton.conditions.*;
import valiente.orl2.phyton.cycles.*;
import valiente.orl2.phyton.instructions.*;
import valiente.orl2.phyton.specialInstructions.*;
import valiente.orl2.phyton.values.*;
import valiente.orl2.phyton.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PhytonSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PhytonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PhytonSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PhytonSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PhytonSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\376\000\002\002\004\000\002\010\003\000\002\010" +
    "\002\000\002\056\010\000\002\056\007\000\002\056\007" +
    "\000\002\056\007\000\002\046\004\000\002\047\004\000" +
    "\002\047\002\000\002\074\003\000\002\074\004\000\002" +
    "\075\005\000\002\075\004\000\002\075\007\000\002\075" +
    "\005\000\002\075\006\000\002\075\005\000\002\075\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\005\000" +
    "\002\075\005\000\002\075\010\000\002\075\007\000\002" +
    "\075\005\000\002\075\004\000\002\075\005\000\002\075" +
    "\002\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\067\012\000\002\067\013\000\002\067\013\000" +
    "\002\067\013\000\002\067\013\000\002\067\013\000\002" +
    "\035\006\000\002\035\007\000\002\035\007\000\002\035" +
    "\007\000\002\070\004\000\002\070\005\000\002\070\005" +
    "\000\002\071\004\000\002\071\005\000\002\071\005\000" +
    "\002\072\004\000\002\072\005\000\002\072\005\000\002" +
    "\073\006\000\002\073\007\000\002\073\007\000\002\073" +
    "\007\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\040" +
    "\005\000\002\040\004\000\002\034\003\000\002\034\002" +
    "\000\002\054\010\000\002\054\007\000\002\054\007\000" +
    "\002\054\007\000\002\037\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\102\004\000\002\102\006\000\002\102\006" +
    "\000\002\102\004\000\002\011\004\000\002\011\003\000" +
    "\002\012\005\000\002\012\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\055\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\027\005\000" +
    "\002\027\004\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\004\000\002\043\004\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\044\005" +
    "\000\002\044\004\000\002\024\004\000\002\061\005\000" +
    "\002\061\004\000\002\061\005\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\041\004\000\002\041\006\000\002\042\005" +
    "\000\002\042\005\000\002\042\002\000\002\045\004\000" +
    "\002\045\003\000\002\045\003\000\002\045\004\000\002" +
    "\036\004\000\002\023\003\000\002\023\004\000\002\022" +
    "\005\000\002\022\005\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\031\004\000\002\031\002\000" +
    "\002\032\006\000\002\033\006\000\002\033\002\000\002" +
    "\003\005\000\002\002\006\000\002\002\002\000\002\004" +
    "\006\000\002\004\004\000\002\005\007\000\002\005\003" +
    "\000\002\006\004\000\002\007\005\000\002\007\002\000" +
    "\002\100\003\000\002\100\004\000\002\100\003\000\002" +
    "\100\004\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\005\000\002\100\005\000\002\100\005" +
    "\000\002\100\005\000\002\100\005\000\002\100\005\000" +
    "\002\100\005\000\002\100\004\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\103\007" +
    "\000\002\103\006\000\002\103\006\000\002\104\010\000" +
    "\002\104\007\000\002\104\007\000\002\104\007\000\002" +
    "\105\005\000\002\105\004\000\002\017\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\003" +
    "\000\002\076\005\000\002\076\007\000\002\076\005\000" +
    "\002\076\005\000\002\076\005\000\002\076\005\000\002" +
    "\076\005\000\002\076\005\000\002\076\006\000\002\076" +
    "\006\000\002\076\005\000\002\076\004\000\002\076\004" +
    "\000\002\076\004\000\002\076\005\000\002\066\011\000" +
    "\002\066\011\000\002\066\011\000\002\066\011\000\002" +
    "\016\011\000\002\016\011\000\002\016\010\000\002\016" +
    "\006\000\002\016\006\000\002\016\004\000\002\016\003" +
    "\000\002\062\006\000\002\062\006\000\002\062\006\000" +
    "\002\013\005\000\002\013\005\000\002\014\005\000\002" +
    "\014\005\000\002\015\005\000\002\015\004\000\002\063" +
    "\007\000\002\063\006\000\002\063\006\000\002\064\005" +
    "\000\002\064\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021f\000\014\002\uffe5\003\006\006\013\116\005\117" +
    "\010\001\002\000\004\002\ufff7\001\002\000\076\003\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\060\ufff8" +
    "\116\016\117\ufff8\122\ufff8\001\002\000\012\002\uffe5\006" +
    "\013\116\005\117\010\001\002\000\066\003\067\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\023\uffff\024" +
    "\063\025\121\026\055\027\075\030\064\031\061\032\072" +
    "\033\065\034\053\037\102\040\076\044\060\045\106\046" +
    "\113\047\057\060\056\117\045\122\073\001\002\000\012" +
    "\002\uffe5\006\013\116\005\117\010\001\002\000\004\002" +
    "\043\001\002\000\012\002\uffe5\006\013\116\005\117\010" +
    "\001\002\000\006\003\014\034\015\001\002\000\010\007" +
    "\020\116\016\117\ufff8\001\002\000\012\003\017\007\020" +
    "\116\016\117\ufff8\001\002\000\076\003\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\060\ufff8\116\016\117" +
    "\ufff8\122\ufff8\001\002\000\012\002\uff92\006\uff92\116\uff92" +
    "\117\uff92\001\002\000\004\034\024\001\002\000\004\117" +
    "\023\001\002\000\012\002\uff94\006\uff94\116\uff94\117\uff94" +
    "\001\002\000\012\002\uff90\006\uff90\116\uff90\117\uff90\001" +
    "\002\000\012\003\026\107\025\116\016\117\ufff8\001\002" +
    "\000\006\003\034\034\035\001\002\000\004\034\032\001" +
    "\002\000\012\002\uff91\006\uff91\116\uff91\117\uff91\001\002" +
    "\000\004\117\031\001\002\000\012\002\uff8c\006\uff8c\116" +
    "\uff8c\117\uff8c\001\002\000\012\003\026\107\025\116\016" +
    "\117\ufff8\001\002\000\012\002\uff8e\006\uff8e\116\uff8e\117" +
    "\uff8e\001\002\000\012\003\026\107\025\116\016\117\ufff8" +
    "\001\002\000\012\003\026\107\025\116\016\117\ufff8\001" +
    "\002\000\012\002\uff8f\006\uff8f\116\uff8f\117\uff8f\001\002" +
    "\000\012\002\uff8d\006\uff8d\116\uff8d\117\uff8d\001\002\000" +
    "\074\003\ufff9\010\ufff9\011\ufff9\012\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\060\ufff9\117\ufff9\122\ufff9\001\002\000\012\002\uff93" +
    "\006\uff93\116\uff93\117\uff93\001\002\000\004\002\ufff4\001" +
    "\002\000\004\002\001\001\002\000\004\002\uffe7\001\002" +
    "\000\012\002\uffe5\006\013\116\005\117\010\001\002\000" +
    "\020\003\u01fd\010\u01fe\011\u01ff\012\u01fb\021\u01fc\022\u0202" +
    "\034\u0200\001\002\000\012\002\uffe5\006\013\116\005\117" +
    "\010\001\002\000\012\002\uffe5\006\013\116\005\117\010" +
    "\001\002\000\006\003\u01f0\104\u01f1\001\002\000\006\003" +
    "\u01db\104\u01dc\001\002\000\020\003\uff78\061\uff78\071\uff78" +
    "\072\uff78\073\uff78\104\uff9b\107\275\001\002\000\004\117" +
    "\u01d9\001\002\000\024\003\uff81\010\uff81\011\uff81\012\uff81" +
    "\021\uff81\022\uff81\033\uff81\034\uff81\102\uff81\001\002\000" +
    "\006\003\u01d1\104\u01d2\001\002\000\006\116\016\117\ufff8" +
    "\001\002\000\006\003\u01ae\104\u01af\001\002\000\024\003" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\021\uff7d\022\uff7d\033\uff7d" +
    "\034\uff7d\102\uff7d\001\002\000\014\003\u01a9\061\127\071" +
    "\132\072\u01ac\073\u01aa\001\002\000\022\003\u0152\023\000" +
    "\025\u0151\026\055\027\075\030\064\031\061\032\072\001" +
    "\002\000\024\003\uff7f\010\uff7f\011\uff7f\012\uff7f\021\uff7f" +
    "\022\uff7f\033\uff7f\034\uff7f\102\uff7f\001\002\000\004\034" +
    "\u01a3\001\002\000\006\003\u0178\104\u0179\001\002\000\024" +
    "\002\uffe5\006\013\026\uff75\027\uff75\030\uff75\031\uff75\032" +
    "\uff75\116\005\117\010\001\002\000\022\003\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\021\uffa9\022\uffa9\034\uffa9\102\uffa9\001" +
    "\002\000\014\002\uff48\003\uff48\006\uff48\116\uff48\117\uff48" +
    "\001\002\000\024\003\uff7e\010\uff7e\011\uff7e\012\uff7e\021" +
    "\uff7e\022\uff7e\033\uff7e\034\uff7e\102\uff7e\001\002\000\042" +
    "\003\156\004\140\005\147\010\066\011\114\012\052\020" +
    "\107\021\104\022\051\034\151\035\146\036\141\075\155" +
    "\104\203\123\144\124\154\001\002\000\006\116\016\117" +
    "\ufff8\001\002\000\024\003\uff80\010\uff80\011\uff80\012\uff80" +
    "\021\uff80\022\uff80\033\uff80\034\uff80\102\uff80\001\002\000" +
    "\006\003\u0121\104\u0122\001\002\000\012\002\uffe5\006\013" +
    "\116\005\117\010\001\002\000\012\002\uffe5\006\013\116" +
    "\005\117\010\001\002\000\014\002\uff49\003\uff49\006\uff49" +
    "\116\uff49\117\uff49\001\002\000\012\003\u0110\060\u0111\116" +
    "\016\117\ufff8\001\002\000\012\002\uffe5\006\013\116\005" +
    "\117\010\001\002\000\006\003\u0106\104\u0107\001\002\000" +
    "\004\023\373\001\002\000\006\003\361\104\362\001\002" +
    "\000\006\003\350\104\351\001\002\000\012\002\uffe5\006" +
    "\013\116\005\117\010\001\002\000\012\002\uffe5\006\013" +
    "\116\005\117\010\001\002\000\004\104\335\001\002\000" +
    "\010\003\332\116\016\117\ufff8\001\002\000\006\003\313" +
    "\104\314\001\002\000\014\026\055\027\075\030\064\031" +
    "\061\032\072\001\002\000\014\002\uff47\003\uff47\006\uff47" +
    "\116\uff47\117\uff47\001\002\000\022\003\uffae\010\uffae\011" +
    "\uffae\012\uffae\021\uffae\022\uffae\034\uffae\102\uff67\001\002" +
    "\000\012\002\uffe5\006\013\116\005\117\010\001\002\000" +
    "\014\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\001\002" +
    "\000\006\033\065\034\123\001\002\000\016\003\uff78\061" +
    "\uff78\071\uff78\107\275\116\uff78\117\uff78\001\002\000\014" +
    "\003\126\061\127\071\132\116\016\117\ufff8\001\002\000" +
    "\014\002\uff72\003\uff72\006\uff72\116\uff72\117\uff72\001\002" +
    "\000\050\003\uff6c\004\uff6c\005\uff6c\010\uff6c\011\uff6c\012" +
    "\uff6c\020\uff6c\021\uff6c\022\uff6c\034\uff6c\035\uff6c\036\uff6c" +
    "\066\uff6c\075\uff6c\104\uff6c\115\uff6c\120\uff6c\123\uff6c\124" +
    "\uff6c\001\002\000\050\003\uff6e\004\uff6e\005\uff6e\010\uff6e" +
    "\011\uff6e\012\uff6e\020\uff6e\021\uff6e\022\uff6e\034\uff6e\035" +
    "\uff6e\036\uff6e\066\uff6e\075\uff6e\104\uff6e\115\uff6e\120\uff6e" +
    "\123\uff6e\124\uff6e\001\002\000\050\003\156\004\140\005" +
    "\147\010\066\011\114\012\052\020\107\021\104\022\051" +
    "\034\151\035\146\036\141\066\152\075\155\104\135\115" +
    "\142\120\137\123\144\124\154\001\002\000\004\117\134" +
    "\001\002\000\050\003\uff6d\004\uff6d\005\uff6d\010\uff6d\011" +
    "\uff6d\012\uff6d\020\uff6d\021\uff6d\022\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\066\uff6d\075\uff6d\104\uff6d\115\uff6d\120\uff6d\123" +
    "\uff6d\124\uff6d\001\002\000\014\002\uff84\003\uff84\006\uff84" +
    "\116\uff84\117\uff84\001\002\000\014\002\uff71\003\uff71\006" +
    "\uff71\116\uff71\117\uff71\001\002\000\046\003\156\004\140" +
    "\005\147\010\066\011\114\012\052\020\107\021\104\022" +
    "\051\034\151\035\146\036\141\066\152\075\155\104\135" +
    "\115\142\123\144\124\154\001\002\000\070\003\uff4c\061" +
    "\uff4c\062\uff4c\063\uff4c\064\uff4c\065\uff4c\067\uff4c\070\uff4c" +
    "\071\uff4c\074\uff4c\075\uff4c\076\uff4c\077\uff4c\100\uff4c\101" +
    "\uff4c\103\uff4c\105\uff4c\106\uff4c\107\uff4c\110\uff4c\111\uff4c" +
    "\112\uff4c\113\uff4c\114\uff4c\116\uff4c\117\uff4c\121\uff4c\001" +
    "\002\000\044\003\156\004\140\005\147\010\066\011\114" +
    "\012\052\020\107\021\104\022\051\034\151\035\146\036" +
    "\141\075\155\104\203\120\243\123\144\124\154\001\002" +
    "\000\070\003\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065" +
    "\uff5a\067\uff5a\070\uff5a\071\uff5a\074\uff5a\075\uff5a\076\uff5a" +
    "\077\uff5a\100\uff5a\101\uff5a\103\uff5a\105\uff5a\106\uff5a\107" +
    "\uff5a\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\116\uff5a" +
    "\117\uff5a\121\uff5a\001\002\000\070\003\uff57\061\uff57\062" +
    "\uff57\063\uff57\064\uff57\065\uff57\067\uff57\070\uff57\071\uff57" +
    "\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57\101\uff57\103" +
    "\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\113\uff57\114\uff57\116\uff57\117\uff57\121\uff57\001\002\000" +
    "\046\003\156\004\140\005\147\010\066\011\114\012\052" +
    "\020\107\021\104\022\051\034\151\035\146\036\141\066" +
    "\152\075\155\104\135\115\142\123\144\124\154\001\002" +
    "\000\050\003\uff34\061\uff34\062\225\063\226\064\224\065" +
    "\227\067\223\070\222\071\uff34\105\uff34\106\uff34\107\uff34" +
    "\110\uff34\111\uff34\112\uff34\113\uff34\114\uff34\116\uff34\117" +
    "\uff34\001\002\000\070\003\uff4d\061\uff4d\062\uff4d\063\uff4d" +
    "\064\uff4d\065\uff4d\067\uff4d\070\uff4d\071\uff4d\074\uff4d\075" +
    "\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d\103\uff4d\105\uff4d" +
    "\106\uff4d\107\uff4d\110\uff4d\111\uff4d\112\uff4d\113\uff4d\114" +
    "\uff4d\116\uff4d\117\uff4d\121\uff4d\001\002\000\004\117\221" +
    "\001\002\000\070\003\uff58\061\uff58\062\uff58\063\uff58\064" +
    "\uff58\065\uff58\067\uff58\070\uff58\071\uff58\074\uff58\075\uff58" +
    "\076\uff58\077\uff58\100\uff58\101\uff58\103\uff58\105\uff58\106" +
    "\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\114\uff58" +
    "\116\uff58\117\uff58\121\uff58\001\002\000\070\003\uff5c\061" +
    "\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\067\uff5c\070\uff5c" +
    "\071\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101" +
    "\uff5c\103\uff5c\105\uff5c\106\uff5c\107\uff5c\110\uff5c\111\uff5c" +
    "\112\uff5c\113\uff5c\114\uff5c\116\uff5c\117\uff5c\121\uff5c\001" +
    "\002\000\070\003\uff56\061\uff56\062\uff56\063\uff56\064\uff56" +
    "\065\uff56\067\uff56\070\uff56\071\uff56\074\uff56\075\uff56\076" +
    "\uff56\077\uff56\100\uff56\101\uff56\103\uff56\105\uff56\106\uff56" +
    "\107\uff56\110\uff56\111\uff56\112\uff56\113\uff56\114\uff56\116" +
    "\uff56\117\uff56\121\uff56\001\002\000\074\003\uff67\061\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\067\uff67\070\uff67\071" +
    "\uff67\074\uff67\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67" +
    "\102\uff67\103\uff67\104\uff9b\105\uff67\106\uff67\107\uff67\110" +
    "\uff67\111\uff67\112\uff67\113\uff67\114\uff67\116\uff67\117\uff67" +
    "\121\uff67\001\002\000\046\003\156\004\140\005\147\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\034\151" +
    "\035\146\036\141\066\152\075\155\104\135\115\142\123" +
    "\144\124\154\001\002\000\064\003\uff2c\061\uff2c\062\uff2c" +
    "\063\uff2c\064\uff2c\065\uff2c\067\uff2c\070\uff2c\071\uff2c\074" +
    "\177\075\200\076\202\077\201\100\176\101\175\105\uff2c" +
    "\106\uff2c\107\uff2c\110\uff2c\111\uff2c\112\uff2c\113\uff2c\114" +
    "\uff2c\116\uff2c\117\uff2c\001\002\000\070\003\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\064\uff4b\065\uff4b\067\uff4b\070\uff4b\071" +
    "\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\100\uff4b\101\uff4b" +
    "\103\uff4b\105\uff4b\106\uff4b\107\uff4b\110\uff4b\111\uff4b\112" +
    "\uff4b\113\uff4b\114\uff4b\116\uff4b\117\uff4b\121\uff4b\001\002" +
    "\000\006\004\174\005\173\001\002\000\070\003\uff4a\061" +
    "\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\067\uff4a\070\uff4a" +
    "\071\uff4a\074\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101" +
    "\uff4a\103\uff4a\105\uff4a\106\uff4a\107\uff4a\110\uff4a\111\uff4a" +
    "\112\uff4a\113\uff4a\114\uff4a\116\uff4a\117\uff4a\121\uff4a\001" +
    "\002\000\026\003\126\061\127\071\132\110\163\111\160" +
    "\112\164\113\165\114\161\116\016\117\ufff8\001\002\000" +
    "\046\003\156\004\140\005\147\010\066\011\114\012\052" +
    "\020\107\021\104\022\051\034\151\035\146\036\141\066" +
    "\152\075\155\104\135\115\142\123\144\124\154\001\002" +
    "\000\046\003\156\004\140\005\147\010\066\011\114\012" +
    "\052\020\107\021\104\022\051\034\151\035\146\036\141" +
    "\066\152\075\155\104\135\115\142\123\144\124\154\001" +
    "\002\000\014\002\uff6f\003\uff6f\006\uff6f\116\uff6f\117\uff6f" +
    "\001\002\000\046\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\066\152\075\155\104\135\115\142\123\144\124" +
    "\154\001\002\000\046\003\156\004\140\005\147\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\034\151\035" +
    "\146\036\141\066\152\075\155\104\135\115\142\123\144" +
    "\124\154\001\002\000\046\003\156\004\140\005\147\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\034\151" +
    "\035\146\036\141\066\152\075\155\104\135\115\142\123" +
    "\144\124\154\001\002\000\034\003\uff3a\061\uff3a\071\uff3a" +
    "\105\uff3a\106\uff3a\107\uff3a\110\uff3a\111\uff3a\112\uff3a\113" +
    "\uff3a\114\uff3a\116\uff3a\117\uff3a\001\002\000\034\003\uff39" +
    "\061\uff39\071\uff39\105\uff39\106\uff39\107\uff39\110\uff39\111" +
    "\uff39\112\uff39\113\uff39\114\uff39\116\uff39\117\uff39\001\002" +
    "\000\034\003\uff3b\061\uff3b\071\uff3b\105\uff3b\106\uff3b\107" +
    "\uff3b\110\uff3b\111\uff3b\112\164\113\165\114\161\116\uff3b" +
    "\117\uff3b\001\002\000\034\003\uff38\061\uff38\071\uff38\105" +
    "\uff38\106\uff38\107\uff38\110\uff38\111\uff38\112\uff38\113\uff38" +
    "\114\uff38\116\uff38\117\uff38\001\002\000\034\003\uff3c\061" +
    "\uff3c\071\uff3c\105\uff3c\106\uff3c\107\uff3c\110\uff3c\111\uff3c" +
    "\112\164\113\165\114\161\116\uff3c\117\uff3c\001\002\000" +
    "\070\003\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b" +
    "\067\uff5b\070\uff5b\071\uff5b\074\uff5b\075\uff5b\076\uff5b\077" +
    "\uff5b\100\uff5b\101\uff5b\103\uff5b\105\uff5b\106\uff5b\107\uff5b" +
    "\110\uff5b\111\uff5b\112\uff5b\113\uff5b\114\uff5b\116\uff5b\117" +
    "\uff5b\121\uff5b\001\002\000\070\003\uff59\061\uff59\062\uff59" +
    "\063\uff59\064\uff59\065\uff59\067\uff59\070\uff59\071\uff59\074" +
    "\uff59\075\uff59\076\uff59\077\uff59\100\uff59\101\uff59\103\uff59" +
    "\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113" +
    "\uff59\114\uff59\116\uff59\117\uff59\121\uff59\001\002\000\042" +
    "\003\156\004\140\005\147\010\066\011\114\012\052\020" +
    "\107\021\104\022\051\034\151\035\146\036\141\075\155" +
    "\104\203\123\144\124\154\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\203\123" +
    "\144\124\154\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\042\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\075\155\104\203\123\144\124\154\001\002\000" +
    "\042\003\156\004\140\005\147\010\066\011\114\012\052" +
    "\020\107\021\104\022\051\034\151\035\146\036\141\075" +
    "\155\104\203\123\144\124\154\001\002\000\042\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\075\155\104\203" +
    "\123\144\124\154\001\002\000\042\003\156\004\140\005" +
    "\147\010\066\011\114\012\052\020\107\021\104\022\051" +
    "\034\151\035\146\036\141\075\155\104\203\123\144\124" +
    "\154\001\002\000\070\003\uff53\061\uff53\062\uff53\063\uff53" +
    "\064\uff53\065\uff53\067\uff53\070\uff53\071\uff53\074\uff53\075" +
    "\uff53\076\uff53\077\uff53\100\uff53\101\175\103\uff53\105\uff53" +
    "\106\uff53\107\uff53\110\uff53\111\uff53\112\uff53\113\uff53\114" +
    "\uff53\116\uff53\117\uff53\121\uff53\001\002\000\020\074\177" +
    "\075\200\076\202\077\201\100\176\101\175\105\206\001" +
    "\002\000\070\003\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f" +
    "\065\uff4f\067\uff4f\070\uff4f\071\uff4f\074\uff4f\075\uff4f\076" +
    "\uff4f\077\uff4f\100\uff4f\101\uff4f\103\uff4f\105\uff4f\106\uff4f" +
    "\107\uff4f\110\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\116" +
    "\uff4f\117\uff4f\121\uff4f\001\002\000\070\003\uff52\061\uff52" +
    "\062\uff52\063\uff52\064\uff52\065\uff52\067\uff52\070\uff52\071" +
    "\uff52\074\uff52\075\uff52\076\uff52\077\uff52\100\uff52\101\175" +
    "\103\uff52\105\uff52\106\uff52\107\uff52\110\uff52\111\uff52\112" +
    "\uff52\113\uff52\114\uff52\116\uff52\117\uff52\121\uff52\001\002" +
    "\000\070\003\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065" +
    "\uff54\067\uff54\070\uff54\071\uff54\074\uff54\075\uff54\076\202" +
    "\077\201\100\176\101\175\103\uff54\105\uff54\106\uff54\107" +
    "\uff54\110\uff54\111\uff54\112\uff54\113\uff54\114\uff54\116\uff54" +
    "\117\uff54\121\uff54\001\002\000\070\003\uff55\061\uff55\062" +
    "\uff55\063\uff55\064\uff55\065\uff55\067\uff55\070\uff55\071\uff55" +
    "\074\uff55\075\uff55\076\202\077\201\100\176\101\175\103" +
    "\uff55\105\uff55\106\uff55\107\uff55\110\uff55\111\uff55\112\uff55" +
    "\113\uff55\114\uff55\116\uff55\117\uff55\121\uff55\001\002\000" +
    "\070\003\uff50\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50" +
    "\067\uff50\070\uff50\071\uff50\074\uff50\075\uff50\076\uff50\077" +
    "\uff50\100\uff50\101\175\103\uff50\105\uff50\106\uff50\107\uff50" +
    "\110\uff50\111\uff50\112\uff50\113\uff50\114\uff50\116\uff50\117" +
    "\uff50\121\uff50\001\002\000\070\003\uff51\061\uff51\062\uff51" +
    "\063\uff51\064\uff51\065\uff51\067\uff51\070\uff51\071\uff51\074" +
    "\uff51\075\uff51\076\uff51\077\uff51\100\uff51\101\uff51\103\uff51" +
    "\105\uff51\106\uff51\107\uff51\110\uff51\111\uff51\112\uff51\113" +
    "\uff51\114\uff51\116\uff51\117\uff51\121\uff51\001\002\000\034" +
    "\003\uff36\061\uff36\071\uff36\105\uff36\106\uff36\107\uff36\110" +
    "\163\111\160\112\164\113\165\114\161\116\uff36\117\uff36" +
    "\001\002\000\072\003\uff4e\061\uff4e\062\uff4e\063\uff4e\064" +
    "\uff4e\065\uff4e\067\uff4e\070\uff4e\071\uff4e\074\uff4e\075\uff4e" +
    "\076\uff4e\077\uff4e\100\uff4e\101\uff4e\102\216\103\uff4e\105" +
    "\uff4e\106\uff4e\107\uff4e\110\uff4e\111\uff4e\112\uff4e\113\uff4e" +
    "\114\uff4e\116\uff4e\117\uff4e\121\uff4e\001\002\000\042\003" +
    "\156\004\140\005\147\010\066\011\114\012\052\020\107" +
    "\021\104\022\051\034\151\035\146\036\141\075\155\104" +
    "\203\123\144\124\154\001\002\000\020\074\177\075\200" +
    "\076\202\077\201\100\176\101\175\103\220\001\002\000" +
    "\072\003\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68" +
    "\067\uff68\070\uff68\071\uff68\074\uff68\075\uff68\076\uff68\077" +
    "\uff68\100\uff68\101\uff68\102\uff68\103\uff68\105\uff68\106\uff68" +
    "\107\uff68\110\uff68\111\uff68\112\uff68\113\uff68\114\uff68\116" +
    "\uff68\117\uff68\121\uff68\001\002\000\014\002\uff70\003\uff70" +
    "\006\uff70\116\uff70\117\uff70\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\230\123" +
    "\144\124\154\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\230\123\144\124\154" +
    "\001\002\000\042\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\075\155\104\230\123\144\124\154\001\002\000" +
    "\042\003\156\004\140\005\147\010\066\011\114\012\052" +
    "\020\107\021\104\022\051\034\151\035\146\036\141\075" +
    "\155\104\230\123\144\124\154\001\002\000\042\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\075\155\104\230" +
    "\123\144\124\154\001\002\000\042\003\156\004\140\005" +
    "\147\010\066\011\114\012\052\020\107\021\104\022\051" +
    "\034\151\035\146\036\141\075\155\104\230\123\144\124" +
    "\154\001\002\000\042\003\156\004\140\005\147\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\034\151\035" +
    "\146\036\141\075\155\104\230\123\144\124\154\001\002" +
    "\000\050\003\uff2e\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065" +
    "\uff2e\067\uff2e\070\uff2e\071\uff2e\105\uff2e\106\uff2e\107\uff2e" +
    "\110\uff2e\111\uff2e\112\uff2e\113\uff2e\114\uff2e\116\uff2e\117" +
    "\uff2e\001\002\000\020\062\225\063\226\064\224\065\227" +
    "\067\223\070\222\105\234\001\002\000\046\062\uff2c\063" +
    "\uff2c\064\uff2c\065\uff2c\067\uff2c\070\uff2c\074\177\075\200" +
    "\076\202\077\201\100\176\101\175\105\206\110\uff2c\111" +
    "\uff2c\112\uff2c\113\uff2c\114\uff2c\001\002\000\050\003\uff2d" +
    "\061\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d\067\uff2d\070" +
    "\uff2d\071\uff2d\105\uff2d\106\uff2d\107\uff2d\110\uff2d\111\uff2d" +
    "\112\uff2d\113\uff2d\114\uff2d\116\uff2d\117\uff2d\001\002\000" +
    "\050\003\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065\uff32" +
    "\067\uff32\070\uff32\071\uff32\105\uff32\106\uff32\107\uff32\110" +
    "\uff32\111\uff32\112\uff32\113\uff32\114\uff32\116\uff32\117\uff32" +
    "\001\002\000\050\003\uff33\061\uff33\062\uff33\063\uff33\064" +
    "\uff33\065\uff33\067\uff33\070\uff33\071\uff33\105\uff33\106\uff33" +
    "\107\uff33\110\uff33\111\uff33\112\uff33\113\uff33\114\uff33\116" +
    "\uff33\117\uff33\001\002\000\050\003\uff30\061\uff30\062\uff30" +
    "\063\uff30\064\uff30\065\uff30\067\uff30\070\uff30\071\uff30\105" +
    "\uff30\106\uff30\107\uff30\110\uff30\111\uff30\112\uff30\113\uff30" +
    "\114\uff30\116\uff30\117\uff30\001\002\000\050\003\uff31\061" +
    "\uff31\062\uff31\063\uff31\064\uff31\065\uff31\067\uff31\070\uff31" +
    "\071\uff31\105\uff31\106\uff31\107\uff31\110\uff31\111\uff31\112" +
    "\uff31\113\uff31\114\uff31\116\uff31\117\uff31\001\002\000\050" +
    "\003\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f\067" +
    "\uff2f\070\uff2f\071\uff2f\105\uff2f\106\uff2f\107\uff2f\110\uff2f" +
    "\111\uff2f\112\uff2f\113\uff2f\114\uff2f\116\uff2f\117\uff2f\001" +
    "\002\000\034\003\uff35\061\uff35\071\uff35\105\uff35\106\uff35" +
    "\107\uff35\110\163\111\160\112\164\113\165\114\161\116" +
    "\uff35\117\uff35\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\004\121\260\001\002\000\022\074\177\075" +
    "\200\076\202\077\201\100\176\101\175\107\254\121\uff5d" +
    "\001\002\000\006\107\247\117\uff64\001\002\000\004\120" +
    "\251\001\002\000\004\117\uff66\001\002\000\044\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\075\155\104\203" +
    "\120\243\123\144\124\154\001\002\000\006\107\247\117" +
    "\uff64\001\002\000\004\117\uff65\001\002\000\042\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\075\155\104\203" +
    "\123\144\124\154\001\002\000\004\121\uff5f\001\002\000" +
    "\022\074\177\075\200\076\202\077\201\100\176\101\175" +
    "\107\254\121\uff5d\001\002\000\004\121\uff5e\001\002\000" +
    "\006\107\uff62\117\uff62\001\002\000\004\121\262\001\002" +
    "\000\006\107\263\121\264\001\002\000\004\120\266\001" +
    "\002\000\006\107\uff60\117\uff60\001\002\000\006\107\uff63" +
    "\117\uff63\001\002\000\042\003\156\004\140\005\147\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\034\151" +
    "\035\146\036\141\075\155\104\203\123\144\124\154\001" +
    "\002\000\004\121\270\001\002\000\006\107\263\121\264" +
    "\001\002\000\006\107\uff61\117\uff61\001\002\000\032\062" +
    "\225\063\226\064\224\065\227\067\223\070\222\105\234" +
    "\110\uff34\111\uff34\112\uff34\113\uff34\114\uff34\001\002\000" +
    "\016\105\274\110\163\111\160\112\164\113\165\114\161" +
    "\001\002\000\034\003\uff37\061\uff37\071\uff37\105\uff37\106" +
    "\uff37\107\uff37\110\uff37\111\uff37\112\uff37\113\uff37\114\uff37" +
    "\116\uff37\117\uff37\001\002\000\006\003\277\034\300\001" +
    "\002\000\020\003\uff7c\061\uff7c\071\uff7c\072\uff7c\073\uff7c" +
    "\116\uff7c\117\uff7c\001\002\000\024\003\uff78\061\uff78\071" +
    "\uff78\072\uff78\073\uff78\102\uff78\107\275\116\uff78\117\uff78" +
    "\001\002\000\024\003\uff78\061\uff78\071\uff78\072\uff78\073" +
    "\uff78\102\uff78\107\275\116\uff78\117\uff78\001\002\000\022" +
    "\003\uff7a\061\uff7a\071\uff7a\072\uff7a\073\uff7a\102\uff7a\116" +
    "\uff7a\117\uff7a\001\002\000\022\003\uff79\061\uff79\071\uff79" +
    "\072\uff79\073\uff79\102\uff79\116\uff79\117\uff79\001\002\000" +
    "\004\002\ufff5\001\002\000\020\003\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\021\uffb0\022\uffb0\034\uffb0\001\002\000\020\003" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\021\uffaf\022\uffaf\034\uffaf" +
    "\001\002\000\004\102\307\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\203\123" +
    "\144\124\154\001\002\000\020\074\177\075\200\076\202" +
    "\077\201\100\176\101\175\103\311\001\002\000\042\003" +
    "\uff69\010\uff69\011\uff69\012\uff69\021\uff69\022\uff69\034\uff69" +
    "\061\uff69\071\uff69\072\uff69\073\uff69\102\uff68\105\uff69\107" +
    "\uff69\116\uff69\117\uff69\001\002\000\006\033\uff73\034\uff73" +
    "\001\002\000\042\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\075\155\104\203\123\144\124\154\001\002\000" +
    "\042\003\156\004\140\005\147\010\066\011\114\012\052" +
    "\020\107\021\104\022\051\034\151\035\146\036\141\075" +
    "\155\104\203\123\144\124\154\001\002\000\070\003\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\103\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111" +
    "\uffb7\112\uffb7\113\uffb7\114\uffb7\116\uffb7\117\uffb7\121\uffb7" +
    "\001\002\000\022\003\320\074\177\075\200\076\202\077" +
    "\201\100\176\101\175\107\317\001\002\000\042\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\075\155\104\203" +
    "\123\144\124\154\001\002\000\042\003\156\004\140\005" +
    "\147\010\066\011\114\012\052\020\107\021\104\022\051" +
    "\034\151\035\146\036\141\075\155\104\203\123\144\124" +
    "\154\001\002\000\020\074\177\075\200\076\202\077\201" +
    "\100\176\101\175\105\322\001\002\000\004\117\323\001" +
    "\002\000\070\003\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\067\uffcd\070\uffcd\071\uffcd\074\uffcd\075\uffcd\076" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\103\uffcd\105\uffcd\106\uffcd" +
    "\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd\116" +
    "\uffcd\117\uffcd\121\uffcd\001\002\000\022\003\325\074\177" +
    "\075\200\076\202\077\201\100\176\101\175\105\326\001" +
    "\002\000\004\117\330\001\002\000\070\003\uffce\061\uffce" +
    "\062\uffce\063\uffce\064\uffce\065\uffce\067\uffce\070\uffce\071" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce" +
    "\103\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112" +
    "\uffce\113\uffce\114\uffce\116\uffce\117\uffce\121\uffce\001\002" +
    "\000\070\003\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\067\uffcb\070\uffcb\071\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\100\uffcb\101\uffcb\103\uffcb\105\uffcb\106\uffcb\107" +
    "\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb\114\uffcb\116\uffcb" +
    "\117\uffcb\121\uffcb\001\002\000\070\003\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\103" +
    "\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc" +
    "\113\uffcc\114\uffcc\116\uffcc\117\uffcc\121\uffcc\001\002\000" +
    "\070\003\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\103\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\116\uffb6\117" +
    "\uffb6\121\uffb6\001\002\000\014\002\uff04\003\uff04\006\uff04" +
    "\116\uff04\117\uff04\001\002\000\004\117\334\001\002\000" +
    "\014\002\uff05\003\uff05\006\uff05\116\uff05\117\uff05\001\002" +
    "\000\050\003\156\004\140\005\147\010\066\011\114\012" +
    "\052\020\107\021\104\022\051\034\151\035\146\036\141" +
    "\066\152\075\155\104\135\105\340\115\142\123\144\124" +
    "\154\001\002\000\020\105\343\107\341\110\163\111\160" +
    "\112\164\113\165\114\161\001\002\000\070\003\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\067\uff95\070\uff95" +
    "\071\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101" +
    "\uff95\103\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111\uff95" +
    "\112\uff95\113\uff95\114\uff95\116\uff95\117\uff95\121\uff95\001" +
    "\002\000\070\003\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\067\uff9e\070\uff9e\071\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\103\uff9e\105\uff9e\106\uff9e" +
    "\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\116" +
    "\uff9e\117\uff9e\121\uff9e\001\002\000\046\003\156\004\140" +
    "\005\147\010\066\011\114\012\052\020\107\021\104\022" +
    "\051\034\151\035\146\036\141\066\152\075\155\104\135" +
    "\115\142\123\144\124\154\001\002\000\070\003\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\103\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f" +
    "\112\uff9f\113\uff9f\114\uff9f\116\uff9f\117\uff9f\121\uff9f\001" +
    "\002\000\070\003\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\067\uff9c\070\uff9c\071\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\105\uff9c\106\uff9c" +
    "\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\116" +
    "\uff9c\117\uff9c\121\uff9c\001\002\000\020\105\343\107\341" +
    "\110\163\111\160\112\164\113\165\114\161\001\002\000" +
    "\070\003\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\103\uff9d\105\uff9d\106\uff9d\107\uff9d" +
    "\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\116\uff9d\117" +
    "\uff9d\121\uff9d\001\002\000\004\002\uffed\001\002\000\004" +
    "\002\uffef\001\002\000\042\003\156\004\140\005\147\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\034\151" +
    "\035\146\036\141\075\155\104\203\123\144\124\154\001" +
    "\002\000\042\003\156\004\140\005\147\010\066\011\114" +
    "\012\052\020\107\021\104\022\051\034\151\035\146\036" +
    "\141\075\155\104\203\123\144\124\154\001\002\000\070" +
    "\003\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\103\uffbb\105\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\116\uffbb\117\uffbb" +
    "\121\uffbb\001\002\000\022\003\354\074\177\075\200\076" +
    "\202\077\201\100\176\101\175\105\355\001\002\000\004" +
    "\117\357\001\002\000\070\003\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\067\uffca\070\uffca\071\uffca\074\uffca" +
    "\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\103\uffca\105" +
    "\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca" +
    "\114\uffca\116\uffca\117\uffca\121\uffca\001\002\000\070\003" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\103\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\113\uffc8\114\uffc8\116\uffc8\117\uffc8\121" +
    "\uffc8\001\002\000\070\003\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\103\uffc9\105\uffc9" +
    "\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\114" +
    "\uffc9\116\uffc9\117\uffc9\121\uffc9\001\002\000\070\003\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\067\uffba\070" +
    "\uffba\071\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\103\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111" +
    "\uffba\112\uffba\113\uffba\114\uffba\116\uffba\117\uffba\121\uffba" +
    "\001\002\000\046\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\066\152\075\155\104\135\115\142\123\144\124" +
    "\154\001\002\000\046\003\156\004\140\005\147\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\034\151\035" +
    "\146\036\141\066\152\075\155\104\135\115\142\123\144" +
    "\124\154\001\002\000\010\003\366\116\016\117\ufff8\001" +
    "\002\000\016\105\365\110\163\111\160\112\164\113\165" +
    "\114\161\001\002\000\010\003\uff3d\116\uff3d\117\uff3d\001" +
    "\002\000\014\002\uff06\003\uff06\006\uff06\116\uff06\117\uff06" +
    "\001\002\000\004\117\370\001\002\000\014\002\uff08\003" +
    "\uff08\006\uff08\116\uff08\117\uff08\001\002\000\004\117\372" +
    "\001\002\000\014\002\uff07\003\uff07\006\uff07\116\uff07\117" +
    "\uff07\001\002\000\006\003\374\104\375\001\002\000\004" +
    "\105\u0104\001\002\000\006\003\376\105\377\001\002\000" +
    "\004\117\u0103\001\002\000\010\003\u0100\116\016\117\ufff8" +
    "\001\002\000\012\002\ufffb\006\ufffb\116\ufffb\117\ufffb\001" +
    "\002\000\004\117\u0102\001\002\000\012\002\ufffe\006\ufffe" +
    "\116\ufffe\117\ufffe\001\002\000\012\002\ufffc\006\ufffc\116" +
    "\ufffc\117\ufffc\001\002\000\004\117\u0105\001\002\000\012" +
    "\002\ufffd\006\ufffd\116\ufffd\117\ufffd\001\002\000\042\003" +
    "\156\004\140\005\147\010\066\011\114\012\052\020\107" +
    "\021\104\022\051\034\151\035\146\036\141\075\155\104" +
    "\203\123\144\124\154\001\002\000\042\003\156\004\140" +
    "\005\147\010\066\011\114\012\052\020\107\021\104\022" +
    "\051\034\151\035\146\036\141\075\155\104\203\123\144" +
    "\124\154\001\002\000\070\003\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\067\uffb9\070\uffb9\071\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\103\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9" +
    "\114\uffb9\116\uffb9\117\uffb9\121\uffb9\001\002\000\022\003" +
    "\u010a\074\177\075\200\076\202\077\201\100\176\101\175" +
    "\105\u010b\001\002\000\006\003\u010c\117\u010d\001\002\000" +
    "\070\003\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\067\uffc7\070\uffc7\071\uffc7\074\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\103\uffc7\105\uffc7\106\uffc7\107\uffc7" +
    "\110\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7\116\uffc7\117" +
    "\uffc7\121\uffc7\001\002\000\070\003\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\067\uffc5\070\uffc5\071\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\103\uffc5" +
    "\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113" +
    "\uffc5\114\uffc5\116\uffc5\117\uffc5\121\uffc5\001\002\000\070" +
    "\003\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\103\uffc6\105\uffc6\106\uffc6\107\uffc6\110" +
    "\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\116\uffc6\117\uffc6" +
    "\121\uffc6\001\002\000\070\003\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\067\uffb8\070\uffb8\071\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\103\uffb8\105" +
    "\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8" +
    "\114\uffb8\116\uffb8\117\uffb8\121\uffb8\001\002\000\004\002" +
    "\ufff0\001\002\000\016\002\uff3e\003\uff3e\006\uff3e\104\u011c" +
    "\116\uff3e\117\uff3e\001\002\000\006\003\u0114\104\u0115\001" +
    "\002\000\004\117\u0113\001\002\000\014\002\uff3f\003\uff3f" +
    "\006\uff3f\116\uff3f\117\uff3f\001\002\000\046\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\066\152\075\155\104" +
    "\135\115\142\123\144\124\154\001\002\000\046\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\066\152\075\155" +
    "\104\135\115\142\123\144\124\154\001\002\000\010\003" +
    "\u0117\116\016\117\ufff8\001\002\000\014\002\uff40\003\uff40" +
    "\006\uff40\116\uff40\117\uff40\001\002\000\004\117\u0119\001" +
    "\002\000\014\002\uff43\003\uff43\006\uff43\116\uff43\117\uff43" +
    "\001\002\000\004\117\u011b\001\002\000\014\002\uff41\003" +
    "\uff41\006\uff41\116\uff41\117\uff41\001\002\000\046\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\066\152\075\155" +
    "\104\135\115\142\123\144\124\154\001\002\000\004\117" +
    "\u011e\001\002\000\014\002\uff42\003\uff42\006\uff42\116\uff42" +
    "\117\uff42\001\002\000\004\002\uffec\001\002\000\004\002" +
    "\uffee\001\002\000\042\003\156\004\140\005\147\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\034\151\035" +
    "\146\036\141\075\155\104\203\123\144\124\154\001\002" +
    "\000\042\003\156\004\140\005\147\010\066\011\114\012" +
    "\052\020\107\021\104\022\051\034\151\035\146\036\141" +
    "\075\155\104\203\123\144\124\154\001\002\000\022\003" +
    "\u0124\074\177\075\200\076\202\077\201\100\176\101\175" +
    "\105\u0125\001\002\000\006\116\016\117\ufff8\001\002\000" +
    "\010\003\ufff8\116\016\117\ufff8\001\002\000\006\003\u0127" +
    "\117\u0128\001\002\000\010\003\u0129\116\005\117\u012c\001" +
    "\002\000\010\003\u0129\116\005\117\u012c\001\002\000\010" +
    "\003\u0129\116\005\117\u012c\001\002\000\010\003\u012e\041" +
    "\u012f\043\u012d\001\002\000\014\002\uff1c\003\uff1c\006\uff1c" +
    "\116\uff1c\117\uff1c\001\002\000\014\002\uff12\003\uff12\006" +
    "\uff12\116\uff12\117\uff12\001\002\000\046\003\156\004\140" +
    "\005\147\010\066\011\114\012\052\020\107\021\104\022" +
    "\051\034\151\035\146\036\141\075\155\104\203\116\016" +
    "\117\ufff8\123\144\124\154\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\203\123" +
    "\144\124\154\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\024\003\u0132\074\177\075\200\076\202\077" +
    "\201\100\176\101\175\116\016\117\ufff8\001\002\000\004" +
    "\117\u015a\001\002\000\010\003\u0134\116\005\117\u0136\001" +
    "\002\000\010\003\u0129\116\005\117\u012c\001\002\000\010" +
    "\003\u0134\116\005\117\u0136\001\002\000\054\003\u013e\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\024\u013d" +
    "\025\121\033\065\034\053\037\102\040\076\042\u013c\044" +
    "\060\045\106\046\113\047\u013b\060\056\117\u0138\122\u013f" +
    "\001\002\000\010\003\u0134\116\005\117\u0136\001\002\000" +
    "\010\003\uff20\116\uff20\117\uff20\001\002\000\010\003\u0134" +
    "\116\005\117\u0136\001\002\000\010\003\u0134\116\005\117" +
    "\u0136\001\002\000\010\003\u0134\116\005\117\u0136\001\002" +
    "\000\042\003\156\004\140\005\147\010\066\011\114\012" +
    "\052\020\107\021\104\022\051\034\151\035\146\036\141" +
    "\075\155\104\203\123\144\124\154\001\002\000\010\003" +
    "\uff1f\116\uff1f\117\uff1f\001\002\000\006\003\u0152\025\u0151" +
    "\001\002\000\022\003\u0134\026\uff75\027\uff75\030\uff75\031" +
    "\uff75\032\uff75\116\005\117\u0136\001\002\000\042\003\156" +
    "\004\140\005\147\010\066\011\114\012\052\020\107\021" +
    "\104\022\051\034\151\035\146\036\141\075\155\104\203" +
    "\123\144\124\154\001\002\000\006\116\016\117\ufff8\001" +
    "\002\000\010\003\u0134\116\005\117\u0136\001\002\000\010" +
    "\003\u0134\116\005\117\u0136\001\002\000\010\003\u0134\116" +
    "\005\117\u0136\001\002\000\010\003\u0134\116\005\117\u0136" +
    "\001\002\000\010\003\u0134\116\005\117\u0136\001\002\000" +
    "\010\003\uff26\116\uff26\117\uff26\001\002\000\010\003\uff28" +
    "\116\uff28\117\uff28\001\002\000\010\003\uff29\116\uff29\117" +
    "\uff29\001\002\000\010\003\uff25\116\uff25\117\uff25\001\002" +
    "\000\010\003\uff27\116\uff27\117\uff27\001\002\000\004\117" +
    "\u014c\001\002\000\010\003\u0134\116\005\117\u0136\001\002" +
    "\000\010\003\uff2a\116\uff2a\117\uff2a\001\002\000\024\003" +
    "\u0134\074\177\075\200\076\202\077\201\100\176\101\175" +
    "\116\005\117\u0136\001\002\000\010\003\uff23\116\uff23\117" +
    "\uff23\001\002\000\010\003\uff1d\116\uff1d\117\uff1d\001\002" +
    "\000\014\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\001" +
    "\002\000\014\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74" +
    "\001\002\000\024\003\u0134\074\177\075\200\076\202\077" +
    "\201\100\176\101\175\116\005\117\u0136\001\002\000\010" +
    "\003\uff22\116\uff22\117\uff22\001\002\000\010\003\uff2b\116" +
    "\uff2b\117\uff2b\001\002\000\010\003\uff24\116\uff24\117\uff24" +
    "\001\002\000\010\003\uff21\116\uff21\117\uff21\001\002\000" +
    "\010\003\uff1e\116\uff1e\117\uff1e\001\002\000\014\002\uff16" +
    "\003\uff16\006\uff16\116\uff16\117\uff16\001\002\000\010\003" +
    "\u0134\116\005\117\u0136\001\002\000\010\003\u0129\116\005" +
    "\117\u012c\001\002\000\014\002\uff18\003\uff18\006\uff18\116" +
    "\uff18\117\uff18\001\002\000\022\074\177\075\200\076\202" +
    "\077\201\100\176\101\175\116\016\117\ufff8\001\002\000" +
    "\004\117\u015f\001\002\000\010\003\u0134\116\005\117\u0136" +
    "\001\002\000\010\003\u0129\116\005\117\u012c\001\002\000" +
    "\014\002\uff17\003\uff17\006\uff17\116\uff17\117\uff17\001\002" +
    "\000\020\003\u0165\074\177\075\200\076\202\077\201\100" +
    "\176\101\175\001\002\000\004\117\u0164\001\002\000\014" +
    "\002\uff15\003\uff15\006\uff15\116\uff15\117\uff15\001\002\000" +
    "\014\002\uff14\003\uff14\006\uff14\116\uff14\117\uff14\001\002" +
    "\000\014\002\uff13\003\uff13\006\uff13\116\uff13\117\uff13\001" +
    "\002\000\014\002\uff19\003\uff19\006\uff19\116\uff19\117\uff19" +
    "\001\002\000\004\117\u0169\001\002\000\010\003\u0129\116" +
    "\005\117\u012c\001\002\000\014\002\uff1a\003\uff1a\006\uff1a" +
    "\116\uff1a\117\uff1a\001\002\000\020\074\177\075\200\076" +
    "\202\077\201\100\176\101\175\105\u016c\001\002\000\006" +
    "\116\016\117\ufff8\001\002\000\004\117\u016e\001\002\000" +
    "\010\003\u0129\116\005\117\u012c\001\002\000\014\002\uff1b" +
    "\003\uff1b\006\uff1b\116\uff1b\117\uff1b\001\002\000\004\117" +
    "\u0171\001\002\000\012\002\uffe5\006\013\116\005\117\010" +
    "\001\002\000\004\002\ufff3\001\002\000\022\074\177\075" +
    "\200\076\202\077\201\100\176\101\175\116\016\117\ufff8" +
    "\001\002\000\004\117\u0175\001\002\000\012\002\uffe5\006" +
    "\013\116\005\117\010\001\002\000\004\002\uffea\001\002" +
    "\000\004\002\uffe6\001\002\000\026\003\u017f\050\u0181\051" +
    "\u017b\052\u0183\053\u017e\054\u017a\055\u0182\056\u017c\057\u0180" +
    "\060\u0184\001\002\000\026\003\u017f\050\u0181\051\u017b\052" +
    "\u0183\053\u017e\054\u017a\055\u0182\056\u017c\057\u0180\060\u0184" +
    "\001\002\000\006\003\uffe2\107\uffe2\001\002\000\006\003" +
    "\uffdc\107\uffdc\001\002\000\006\003\uffe0\107\uffe0\001\002" +
    "\000\070\003\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\067\uffbd\070\uffbd\071\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\100\uffbd\101\uffbd\103\uffbd\105\uffbd\106\uffbd\107" +
    "\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\116\uffbd" +
    "\117\uffbd\121\uffbd\001\002\000\006\003\uffe3\107\uffe3\001" +
    "\002\000\006\003\uffdb\107\uffdb\001\002\000\006\003\uffdf" +
    "\107\uffdf\001\002\000\006\003\uffdd\107\uffdd\001\002\000" +
    "\006\003\uffe1\107\uffe1\001\002\000\006\003\uffe4\107\uffe4" +
    "\001\002\000\006\003\uffde\107\uffde\001\002\000\006\003" +
    "\u0187\107\u0186\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\042\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\075\155\104\203\123\144\124\154\001\002\000" +
    "\020\074\177\075\200\076\202\077\201\100\176\101\175" +
    "\107\u0189\001\002\000\042\003\156\004\140\005\147\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\034\151" +
    "\035\146\036\141\075\155\104\203\123\144\124\154\001" +
    "\002\000\020\074\177\075\200\076\202\077\201\100\176" +
    "\101\175\107\u018b\001\002\000\042\003\156\004\140\005" +
    "\147\010\066\011\114\012\052\020\107\021\104\022\051" +
    "\034\151\035\146\036\141\075\155\104\203\123\144\124" +
    "\154\001\002\000\020\074\177\075\200\076\202\077\201" +
    "\100\176\101\175\105\u018d\001\002\000\004\117\u018e\001" +
    "\002\000\070\003\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\067\uffd3\070\uffd3\071\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\103\uffd3\105\uffd3\106\uffd3" +
    "\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\116" +
    "\uffd3\117\uffd3\121\uffd3\001\002\000\022\003\u0191\074\177" +
    "\075\200\076\202\077\201\100\176\101\175\107\u0190\001" +
    "\002\000\042\003\156\004\140\005\147\010\066\011\114" +
    "\012\052\020\107\021\104\022\051\034\151\035\146\036" +
    "\141\075\155\104\203\123\144\124\154\001\002\000\042" +
    "\003\156\004\140\005\147\010\066\011\114\012\052\020" +
    "\107\021\104\022\051\034\151\035\146\036\141\075\155" +
    "\104\203\123\144\124\154\001\002\000\020\074\177\075" +
    "\200\076\202\077\201\100\176\101\175\107\u0193\001\002" +
    "\000\042\003\156\004\140\005\147\010\066\011\114\012" +
    "\052\020\107\021\104\022\051\034\151\035\146\036\141" +
    "\075\155\104\203\123\144\124\154\001\002\000\020\074" +
    "\177\075\200\076\202\077\201\100\176\101\175\105\u0195" +
    "\001\002\000\004\117\u0196\001\002\000\070\003\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\103\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2" +
    "\112\uffd2\113\uffd2\114\uffd2\116\uffd2\117\uffd2\121\uffd2\001" +
    "\002\000\022\003\u0199\074\177\075\200\076\202\077\201" +
    "\100\176\101\175\107\u0198\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\203\123" +
    "\144\124\154\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\020\074\177\075\200\076\202\077\201\100" +
    "\176\101\175\105\u019b\001\002\000\004\117\u019c\001\002" +
    "\000\070\003\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\103\uffd1\105\uffd1\106\uffd1\107" +
    "\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\116\uffd1" +
    "\117\uffd1\121\uffd1\001\002\000\022\003\u019e\074\177\075" +
    "\200\076\202\077\201\100\176\101\175\105\u019f\001\002" +
    "\000\004\117\u01a1\001\002\000\070\003\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\103" +
    "\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4" +
    "\113\uffd4\114\uffd4\116\uffd4\117\uffd4\121\uffd4\001\002\000" +
    "\070\003\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\067\uffcf\070\uffcf\071\uffcf\074\uffcf\075\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\103\uffcf\105\uffcf\106\uffcf\107\uffcf" +
    "\110\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\116\uffcf\117" +
    "\uffcf\121\uffcf\001\002\000\070\003\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\103\uffd0" +
    "\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113" +
    "\uffd0\114\uffd0\116\uffd0\117\uffd0\121\uffd0\001\002\000\070" +
    "\003\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\103\uffbc\105\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\116\uffbc\117\uffbc" +
    "\121\uffbc\001\002\000\006\102\uff78\107\275\001\002\000" +
    "\004\102\uff67\001\002\000\020\003\uff7b\061\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\116\uff7b\117\uff7b\001\002\000\022\003" +
    "\uffae\010\uffae\011\uffae\012\uffae\021\uffae\022\uffae\034\uffae" +
    "\102\uff67\001\002\000\020\003\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\021\uffb1\022\uffb1\034\uffb1\001\002\000\014\002\uff83" +
    "\003\uff83\006\uff83\116\uff83\117\uff83\001\002\000\052\003" +
    "\uff6c\004\uff6c\005\uff6c\010\uff6c\011\uff6c\012\uff6c\020\uff6c" +
    "\021\uff6c\022\uff6c\034\uff6c\035\uff6c\036\uff6c\066\uff6c\075" +
    "\uff6c\104\uff6c\115\uff6c\117\uff88\120\uff6c\123\uff6c\124\uff6c" +
    "\001\002\000\010\003\uff89\105\uff89\117\uff89\001\002\000" +
    "\004\117\u01ad\001\002\000\010\003\uff8a\105\uff8a\117\uff8a" +
    "\001\002\000\014\002\uff82\003\uff82\006\uff82\116\uff82\117" +
    "\uff82\001\002\000\012\003\u01b2\024\u013d\025\121\034\u01b4" +
    "\001\002\000\012\003\u01b2\024\u013d\025\121\034\u01b4\001" +
    "\002\000\006\003\u01bc\106\u01bd\001\002\000\006\003\u01ba" +
    "\117\u01bb\001\002\000\014\026\uff75\027\uff75\030\uff75\031" +
    "\uff75\032\uff75\001\002\000\004\034\u01b8\001\002\000\010" +
    "\003\126\061\127\071\132\001\002\000\046\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\066\152\075\155\104" +
    "\135\115\142\123\144\124\154\001\002\000\006\003\uff86" +
    "\106\uff86\001\002\000\020\003\uff85\106\uff85\110\163\111" +
    "\160\112\164\113\165\114\161\001\002\000\010\003\126" +
    "\061\127\071\132\001\002\000\006\003\uff87\106\uff87\001" +
    "\002\000\014\002\uff0f\003\uff0f\006\uff0f\116\uff0f\117\uff0f" +
    "\001\002\000\014\002\uff11\003\uff11\006\uff11\116\uff11\117" +
    "\uff11\001\002\000\046\003\156\004\140\005\147\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\034\151\035" +
    "\146\036\141\066\152\075\155\104\135\115\142\123\144" +
    "\124\154\001\002\000\046\003\156\004\140\005\147\010" +
    "\066\011\114\012\052\020\107\021\104\022\051\034\151" +
    "\035\146\036\141\066\152\075\155\104\135\115\142\123" +
    "\144\124\154\001\002\000\006\003\uff0e\117\uff0e\001\002" +
    "\000\020\003\u01c0\106\u01c1\110\163\111\160\112\164\113" +
    "\165\114\161\001\002\000\004\034\u01c3\001\002\000\004" +
    "\034\u01c3\001\002\000\006\003\u01c7\105\u01c8\001\002\000" +
    "\010\003\u01c5\072\u01ac\073\u01aa\001\002\000\006\003\uff0c" +
    "\117\uff0c\001\002\000\006\003\uff88\105\uff88\001\002\000" +
    "\006\003\uff8b\105\uff8b\001\002\000\006\003\uff09\117\uff09" +
    "\001\002\000\010\003\ufff8\116\016\117\ufff8\001\002\000" +
    "\006\003\uff0a\117\uff0a\001\002\000\006\003\uff0b\117\uff0b" +
    "\001\002\000\006\003\uff0d\117\uff0d\001\002\000\004\117" +
    "\u01cd\001\002\000\014\002\uff10\003\uff10\006\uff10\116\uff10" +
    "\117\uff10\001\002\000\004\117\u01cf\001\002\000\012\002" +
    "\uffe5\006\013\116\005\117\010\001\002\000\004\002\uffe9" +
    "\001\002\000\046\003\156\004\140\005\147\010\066\011" +
    "\114\012\052\020\107\021\104\022\051\034\151\035\146" +
    "\036\141\066\152\075\155\104\135\115\142\123\144\124" +
    "\154\001\002\000\046\003\156\004\140\005\147\010\066" +
    "\011\114\012\052\020\107\021\104\022\051\034\151\035" +
    "\146\036\141\066\152\075\155\104\135\115\142\123\144" +
    "\124\154\001\002\000\010\003\u01d4\116\016\117\ufff8\001" +
    "\002\000\014\002\uff44\003\uff44\006\uff44\116\uff44\117\uff44" +
    "\001\002\000\004\117\u01d6\001\002\000\014\002\uff46\003" +
    "\uff46\006\uff46\116\uff46\117\uff46\001\002\000\004\117\u01d8" +
    "\001\002\000\014\002\uff45\003\uff45\006\uff45\116\uff45\117" +
    "\uff45\001\002\000\012\002\uffe5\006\013\116\005\117\010" +
    "\001\002\000\004\002\ufff1\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\203\123" +
    "\144\124\154\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\070\003\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\101\uffb3\103\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3" +
    "\116\uffb3\117\uffb3\121\uffb3\001\002\000\022\003\u01e0\074" +
    "\177\075\200\076\202\077\201\100\176\101\175\107\u01df" +
    "\001\002\000\016\003\u01e3\013\u01e1\014\u01e6\015\u01e2\016" +
    "\u01e7\017\u01e5\001\002\000\016\003\u01e3\013\u01e1\014\u01e6" +
    "\015\u01e2\016\u01e7\017\u01e5\001\002\000\006\003\uffda\105" +
    "\uffda\001\002\000\006\003\uffd8\105\uffd8\001\002\000\006" +
    "\003\uffd5\105\uffd5\001\002\000\004\105\u01e8\001\002\000" +
    "\006\003\uffd6\105\uffd6\001\002\000\006\003\uffd9\105\uffd9" +
    "\001\002\000\006\003\uffd7\105\uffd7\001\002\000\004\117" +
    "\u01e9\001\002\000\070\003\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\067\uffc0\070\uffc0\071\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\103\uffc0\105\uffc0" +
    "\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114" +
    "\uffc0\116\uffc0\117\uffc0\121\uffc0\001\002\000\006\003\u01eb" +
    "\105\u01ec\001\002\000\004\117\u01ee\001\002\000\070\003" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100" +
    "\uffc1\101\uffc1\103\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\113\uffc1\114\uffc1\116\uffc1\117\uffc1\121" +
    "\uffc1\001\002\000\070\003\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\067\uffbe\070\uffbe\071\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\103\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114" +
    "\uffbe\116\uffbe\117\uffbe\121\uffbe\001\002\000\070\003\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\070" +
    "\uffbf\071\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\103\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111" +
    "\uffbf\112\uffbf\113\uffbf\114\uffbf\116\uffbf\117\uffbf\121\uffbf" +
    "\001\002\000\070\003\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\067\uffb2\070\uffb2\071\uffb2\074\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\100\uffb2\101\uffb2\103\uffb2\105\uffb2\106" +
    "\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2" +
    "\116\uffb2\117\uffb2\121\uffb2\001\002\000\042\003\156\004" +
    "\140\005\147\010\066\011\114\012\052\020\107\021\104" +
    "\022\051\034\151\035\146\036\141\075\155\104\203\123" +
    "\144\124\154\001\002\000\042\003\156\004\140\005\147" +
    "\010\066\011\114\012\052\020\107\021\104\022\051\034" +
    "\151\035\146\036\141\075\155\104\203\123\144\124\154" +
    "\001\002\000\022\003\u01f4\074\177\075\200\076\202\077" +
    "\201\100\176\101\175\105\u01f5\001\002\000\070\003\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\103\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111" +
    "\uffb5\112\uffb5\113\uffb5\114\uffb5\116\uffb5\117\uffb5\121\uffb5" +
    "\001\002\000\004\117\u01f7\001\002\000\070\003\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\103\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4" +
    "\112\uffc4\113\uffc4\114\uffc4\116\uffc4\117\uffc4\121\uffc4\001" +
    "\002\000\070\003\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\067\uffc2\070\uffc2\071\uffc2\074\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\100\uffc2\101\uffc2\103\uffc2\105\uffc2\106\uffc2" +
    "\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\116" +
    "\uffc2\117\uffc2\121\uffc2\001\002\000\070\003\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3" +
    "\103\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112" +
    "\uffc3\113\uffc3\114\uffc3\116\uffc3\117\uffc3\121\uffc3\001\002" +
    "\000\070\003\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\103\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\116\uffb4" +
    "\117\uffb4\121\uffb4\001\002\000\004\002\uffeb\001\002\000" +
    "\004\002\ufff2\001\002\000\006\003\uff98\104\uff98\001\002" +
    "\000\006\003\uff97\104\uff97\001\002\000\004\104\u021c\001" +
    "\002\000\006\003\uff9a\104\uff9a\001\002\000\006\003\uff99" +
    "\104\uff99\001\002\000\006\003\uff9b\104\uff9b\001\002\000" +
    "\006\003\u0203\104\u0204\001\002\000\006\003\uff96\104\uff96" +
    "\001\002\000\016\026\055\027\075\030\064\031\061\032" +
    "\072\105\u0205\001\002\000\016\026\055\027\075\030\064" +
    "\031\061\032\072\105\u0205\001\002\000\010\003\uffa7\116" +
    "\uffa7\117\uffa7\001\002\000\010\003\u0214\033\u0216\034\u0215" +
    "\001\002\000\010\003\u020d\105\u020e\107\u020c\001\002\000" +
    "\010\003\u0209\116\016\117\ufff8\001\002\000\012\002\uffaa" +
    "\006\uffaa\116\uffaa\117\uffaa\001\002\000\004\117\u020b\001" +
    "\002\000\012\002\uffad\006\uffad\116\uffad\117\uffad\001\002" +
    "\000\014\026\055\027\075\030\064\031\061\032\072\001" +
    "\002\000\014\026\055\027\075\030\064\031\061\032\072" +
    "\001\002\000\010\003\uffa4\116\uffa4\117\uffa4\001\002\000" +
    "\010\003\uffa8\116\uffa8\117\uffa8\001\002\000\010\003\u020d" +
    "\105\u020e\107\u020c\001\002\000\010\003\uffa5\116\uffa5\117" +
    "\uffa5\001\002\000\010\003\u020d\105\u020e\107\u020c\001\002" +
    "\000\010\003\uffa6\116\uffa6\117\uffa6\001\002\000\010\003" +
    "\uffa0\105\uffa0\107\uffa0\001\002\000\010\003\uffa3\105\uffa3" +
    "\107\uffa3\001\002\000\004\034\u0217\001\002\000\006\003" +
    "\u0218\102\uff67\001\002\000\010\003\uffa1\105\uffa1\107\uffa1" +
    "\001\002\000\010\003\uffa2\105\uffa2\107\uffa2\001\002\000" +
    "\004\117\u021b\001\002\000\012\002\uffab\006\uffab\116\uffab" +
    "\117\uffab\001\002\000\016\026\055\027\075\030\064\031" +
    "\061\032\072\105\u0205\001\002\000\004\117\u021e\001\002" +
    "\000\012\002\uffac\006\uffac\116\uffac\117\uffac\001\002\000" +
    "\004\002\uffe8\001\002\000\004\002\ufff6\001\002\000\074" +
    "\003\ufffa\010\ufffa\011\ufffa\012\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\060\ufffa\117\ufffa\122\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021f\000\012\046\006\057\011\074\010\075\003\001" +
    "\001\000\002\001\001\000\004\047\u0220\001\001\000\010" +
    "\046\006\057\011\075\u021f\001\001\000\054\010\104\036" +
    "\121\037\116\040\045\041\061\045\114\050\067\053\111" +
    "\054\046\055\073\056\117\060\053\061\102\062\107\063" +
    "\076\064\110\065\077\066\047\103\100\104\070\105\115" +
    "\001\001\000\010\046\006\057\011\075\043\001\001\000" +
    "\002\001\001\000\010\046\006\057\011\075\041\001\001" +
    "\000\002\001\001\000\006\027\040\047\020\001\001\000" +
    "\006\027\021\047\020\001\001\000\004\047\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\026\047\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\032" +
    "\047\027\001\001\000\002\001\001\000\006\030\036\047" +
    "\027\001\001\000\006\030\035\047\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\006\057\011\075\u021e\001\001\000\004\053" +
    "\u0200\001\001\000\010\046\006\057\011\075\u01f9\001\001" +
    "\000\010\046\006\057\011\075\u01f8\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\u01cd\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\u01a7\051\127\052\u01aa\001\001\000\006\037\u01a5\050" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\006\057\011\075\u0176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\053\111\055\147\060\135\100\u0172\001\001\000\004\047" +
    "\u016f\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\006\057\011\075\u011f\001\001\000\010\046\006\057" +
    "\011\075\u011e\001\001\000\002\001\001\000\004\047\u0111" +
    "\001\001\000\010\046\006\057\011\075\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\006\057\011\075\346\001\001\000" +
    "\010\046\006\057\011\075\345\001\001\000\002\001\001" +
    "\000\004\047\332\001\001\000\002\001\001\000\004\050" +
    "\311\001\001\000\002\001\001\000\010\032\304\033\305" +
    "\034\303\001\001\000\010\046\006\057\011\075\302\001" +
    "\001\000\002\001\001\000\004\041\123\001\001\000\004" +
    "\042\275\001\001\000\012\022\124\023\132\047\130\051" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\144\020\156\021\142\053\111\055" +
    "\147\060\135\100\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\272\021\271\053\111\055\147\060\135\100\232\001\001" +
    "\000\002\001\001\000\016\004\245\006\243\053\111\055" +
    "\147\060\135\100\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\241\021\142\053\111\055\147\060" +
    "\135\100\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\214\001\001\000\016\020\213" +
    "\021\142\053\111\055\147\060\135\100\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\124\023\161\047\130\051\127\001" +
    "\001\000\016\020\171\021\142\053\111\055\147\060\135" +
    "\100\152\001\001\000\016\020\170\021\142\053\111\055" +
    "\147\060\135\100\152\001\001\000\002\001\001\000\016" +
    "\020\167\021\142\053\111\055\147\060\135\100\152\001" +
    "\001\000\016\020\166\021\142\053\111\055\147\060\135" +
    "\100\152\001\001\000\016\020\165\021\142\053\111\055" +
    "\147\060\135\100\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\053\111" +
    "\055\147\060\135\100\212\001\001\000\012\053\111\055" +
    "\147\060\135\100\211\001\001\000\012\053\111\055\147" +
    "\060\135\100\210\001\001\000\012\053\111\055\147\060" +
    "\135\100\207\001\001\000\012\053\111\055\147\060\135" +
    "\100\206\001\001\000\012\053\111\055\147\060\135\100" +
    "\203\001\001\000\012\053\111\055\147\060\135\100\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\053\111\055\147\060\135\100\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\240\053\111\055\147\060\135\100\152" +
    "\001\001\000\014\021\237\053\111\055\147\060\135\100" +
    "\152\001\001\000\014\021\236\053\111\055\147\060\135" +
    "\100\152\001\001\000\014\021\235\053\111\055\147\060" +
    "\135\100\152\001\001\000\014\021\234\053\111\055\147" +
    "\060\135\100\152\001\001\000\014\021\230\053\111\055" +
    "\147\060\135\100\152\001\001\000\014\021\231\053\111" +
    "\055\147\060\135\100\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\260" +
    "\053\111\055\147\060\135\100\244\001\001\000\002\001" +
    "\001\000\004\007\254\001\001\000\004\002\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\251\006" +
    "\243\053\111\055\147\060\135\100\244\001\001\000\004" +
    "\002\252\001\001\000\002\001\001\000\012\053\111\055" +
    "\147\060\135\100\255\001\001\000\002\001\001\000\004" +
    "\007\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\266\053" +
    "\111\055\147\060\135\100\244\001\001\000\002\001\001" +
    "\000\004\005\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\301\001\001\000\004\042" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\053\111\055\147\060\135\100\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\035\330\053\111\055\147\060\135\100\315\001\001" +
    "\000\014\035\314\053\111\055\147\060\135\100\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\053\111" +
    "\055\147\060\135\100\323\001\001\000\012\053\111\055" +
    "\147\060\135\100\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\336\020\335\021\142\053\111" +
    "\055\147\060\135\100\152\001\001\000\004\012\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\343" +
    "\021\142\053\111\055\147\060\135\100\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\053\111\055\147\060\135\070\357\100\352\001\001" +
    "\000\014\053\111\055\147\060\135\070\351\100\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\370\020\363\021\142\053\111" +
    "\055\147\060\135\100\152\001\001\000\020\017\362\020" +
    "\363\021\142\053\111\055\147\060\135\100\152\001\001" +
    "\000\004\047\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\053\111\055\147\060\135\071\u010d\100" +
    "\u0108\001\001\000\014\053\111\055\147\060\135\071\u0107" +
    "\100\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\u0119\020\363\021\142\053\111\055\147\060" +
    "\135\100\152\001\001\000\020\017\u0115\020\363\021\142" +
    "\053\111\055\147\060\135\100\152\001\001\000\004\047" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\u011c\020\363\021\142\053\111\055\147\060\135\100\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\053\111\055\147\060\135" +
    "\100\u016a\001\001\000\012\053\111\055\147\060\135\100" +
    "\u0122\001\001\000\002\001\001\000\004\047\u0167\001\001" +
    "\000\004\047\u0125\001\001\000\002\001\001\000\006\016" +
    "\u0166\046\u0129\001\001\000\006\016\u012a\046\u0129\001\001" +
    "\000\006\016\u0165\046\u0129\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\047\u0162\053\111" +
    "\055\147\060\135\100\u0161\001\001\000\012\053\111\055" +
    "\147\060\135\100\u015c\001\001\000\012\053\111\055\147" +
    "\060\135\100\u012f\001\001\000\004\047\u0130\001\001\000" +
    "\002\001\001\000\006\046\u0134\076\u0132\001\001\000\006" +
    "\016\u0158\046\u0129\001\001\000\006\046\u0134\076\u0157\001" +
    "\001\000\040\036\121\041\061\045\114\053\111\055\u013f" +
    "\060\u0139\061\u0142\062\u0143\063\u0140\064\u0144\065\u0141\066" +
    "\u0138\103\100\104\070\105\115\001\001\000\006\046\u0134" +
    "\076\u0136\001\001\000\002\001\001\000\006\046\u0134\076" +
    "\u0156\001\001\000\006\046\u0134\076\u0155\001\001\000\006" +
    "\046\u0134\076\u0154\001\001\000\012\053\111\055\147\060" +
    "\135\100\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\u0134\076\u014f\001\001\000\012\053\111\055" +
    "\147\060\135\100\u014d\001\001\000\004\047\u014a\001\001" +
    "\000\006\046\u0134\076\u0149\001\001\000\006\046\u0134\076" +
    "\u0148\001\001\000\006\046\u0134\076\u0147\001\001\000\006" +
    "\046\u0134\076\u0146\001\001\000\006\046\u0134\076\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\u0134\076\u014c\001\001\000\002\001\001\000\006" +
    "\046\u0134\076\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\u0134" +
    "\076\u0153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\u0134\076\u015a\001\001\000\006\016" +
    "\u015b\046\u0129\001\001\000\002\001\001\000\004\047\u015d" +
    "\001\001\000\002\001\001\000\006\046\u0134\076\u015f\001" +
    "\001\000\006\016\u0160\046\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u0169\046\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u016c\001\001\000\002" +
    "\001\001\000\006\016\u016e\046\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\006\057\011\075\u0171" +
    "\001\001\000\002\001\001\000\004\047\u0173\001\001\000" +
    "\002\001\001\000\010\046\006\057\011\075\u0175\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\u01a1\077" +
    "\u0184\001\001\000\006\067\u017c\077\u0184\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\053\111\055\147" +
    "\060\135\100\u018e\001\001\000\012\053\111\055\147\060" +
    "\135\100\u0187\001\001\000\002\001\001\000\012\053\111" +
    "\055\147\060\135\100\u0189\001\001\000\002\001\001\000" +
    "\012\053\111\055\147\060\135\100\u018b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\053\111\055\147\060\135\100\u0196\001\001" +
    "\000\012\053\111\055\147\060\135\100\u0191\001\001\000" +
    "\002\001\001\000\012\053\111\055\147\060\135\100\u0193" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\053\111\055\147\060\135" +
    "\100\u019c\001\001\000\012\053\111\055\147\060\135\100" +
    "\u0199\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u01a3\001\001\000\006\032\u01a4\033\305\001" +
    "\001\000\002\001\001\000\010\032\304\033\305\034\u01a6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\u01cb\036\u01b2\044\u01af\045" +
    "\114\001\001\000\012\013\u01b0\036\u01b2\044\u01af\045\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\u01b5\051\u01b4\001\001" +
    "\000\016\020\u01b6\021\142\053\111\055\147\060\135\100" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\u01b8\051\u01b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\u01ca\020\u01be\021\142" +
    "\053\111\055\147\060\135\100\152\001\001\000\020\014" +
    "\u01bd\020\u01be\021\142\053\111\055\147\060\135\100\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u01c9\043\u01c1\001\001\000\006\015\u01c3\043\u01c1\001\001" +
    "\000\002\001\001\000\004\052\u01c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u01c8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\006\057\011\075\u01cf\001" +
    "\001\000\002\001\001\000\020\017\u01d6\020\363\021\142" +
    "\053\111\055\147\060\135\100\152\001\001\000\020\017" +
    "\u01d2\020\363\021\142\053\111\055\147\060\135\100\152" +
    "\001\001\000\004\047\u01d4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\006\057\011\075\u01d9\001\001\000" +
    "\002\001\001\000\014\053\111\055\147\060\135\073\u01ee" +
    "\100\u01dd\001\001\000\014\053\111\055\147\060\135\073" +
    "\u01dc\100\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u01e9\001\001\000\004\101\u01e3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\053\111\055\147" +
    "\060\135\072\u01f7\100\u01f1\001\001\000\014\053\111\055" +
    "\147\060\135\072\u01f2\100\u01f1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\u0219\050\u0205\102\u0206\001\001\000\010\025\u0207" +
    "\050\u0205\102\u0206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u020e\001\001\000\004\047\u0209\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\u0205\102\u0211\001\001\000\006\050\u0205\102\u020f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u0210\001\001\000\002\001\001\000\004\026\u0212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\u0218\033\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\u021c\050\u0205\102\u0206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhytonSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhytonSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhytonSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        int errors=0;
        String tokenError="";
        int lineError, columnError =0;
        String expectedTokens="";
        ArrayList<SyntaxError> list = new ArrayList();
        ArrayList<Instruction> instructions = new ArrayList();

        public void settingInstructions(ArrayList<Instruction> ins){
                for(int index=ins.size()-1; index>=0; index--){
                        instructions.add(ins.get(index));
                }
        }

        public ArrayList<Instruction> getInstructions(){
                return instructions;
        }

        public ArrayList<SyntaxError> getList(){
                return list;
        }

        public void report_error(String message, Object info) { 
                if (info instanceof String){
                        Symbol s = cur_token;
                        //System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);;
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
        }

        public void report_error_final(String message, Object info){
                if (info instanceof String){
                        Symbol s = cur_token;
                        errors++;       
                        //System.err.println("  "+ errors + "==> " + info + ": "+ message);
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
                
        }

    @Override
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
            int column = symbol.right;
            String token = (String) cur_token.value;
            //We get the production
                tokenError = token;
                lineError = line;
                columnError = column;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
                tokenError = (String) cur_token.value;
                lineError = symbol.left;
                columnError = symbol.right;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
                report_error_final("Estado Ilegal de Expresion", "Sintaxis incorrecta");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PhytonSyntax$actions {
  private final PhytonSyntax parser;

  /** Constructor */
  CUP$PhytonSyntax$actions(PhytonSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PhytonSyntax$do_action_part00000000(
    int                        CUP$PhytonSyntax$act_num,
    java_cup.runtime.lr_parser CUP$PhytonSyntax$parser,
    java.util.Stack            CUP$PhytonSyntax$stack,
    int                        CUP$PhytonSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhytonSyntax$result;

      /* select the action based on the action number */
      switch (CUP$PhytonSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = start_val;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PhytonSyntax$parser.done_parsing();
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // kar ::= KEEP 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kar",6, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // kar ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kar",6, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS tab_re SPACE 
            {
              Principal RESULT =null;
		
                RESULT = new Principal(cur_token.left, cur_token.right);
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= kar PRINCIPAL error CLOSE_PARENTHESIS SPACE 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS error SPACE 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tab ::= TAB tab_re 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT=1+e; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tab_re ::= TAB tab_re 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT=1+e; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab_re",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tab_re ::= 
            {
              Integer RESULT =null;
		 RESULT=0; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab_re",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        settingInstructions(ins);
                }
         
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("main_body",58, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_body ::= error instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Error en la sintaxis","Inicio ilegal de la expresion"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("main_body",58, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= tab principal instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int prinleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int prinright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Principal prin = (Principal)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(prin!=null){
                                prin.setIndentation(numTab);
                                lista.add(prin);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= pista instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Pista pis = (Pista)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(pis!=null){
                                lista.add(pis);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= tab throw_function tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= tab function instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(func!=null){
                                lista.add(func);
                                func.setIndentation(numTab);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= tab func_especiales SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= tab v instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= tab for instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= tab while instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= tab do_while instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= tab if instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= tab switch instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                if(e1 !=null){
                                        lista.add(e1);
                                        e1.setIndentation(numTab);
                                }
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= tab RETORNA value tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                Return newReturn = new Return(numTab, cur_token.left, cur_token.right, v);
                                lista.add(newReturn);
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= tab CONTINUE tab_re SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                Continue newContinue = new Continue(numTab, cur_token.left, cur_token.right);
                                lista.add(newContinue);
                                RESULT=lista;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= tab SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = ins;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = ins;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= tab error instruction 
            {
              ArrayList<Instruction> RESULT =null;
		 parser.report_error("Se esperaba alguna expresion como si, sino si, sino, mientras, hacer, para...","Inicio ilegal de la expresion"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> list = new ArrayList(); RESULT=list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // notas ::= DO 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // notas ::= RE 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // notas ::= MI 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // notas ::= FA 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // notas ::= SOL 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // notas ::= LA 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // notas ::= SI 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // notas ::= DOR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // notas ::= RER 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // notas ::= error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		parser.report_error("Valor incorrecto en, se esperaba una nota musical","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ordenar_options ::= ASCENDENTE 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "ascendente");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ordenar_options ::= DESCENDENTE 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "descendente");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ordenar_options ::= PARES 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "pares");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ordenar_options ::= IMPARES 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "impares");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ordenar_options ::= PRIMOS 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "primos");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ordenar_options ::= error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Valor incorrecto en, se esperaba un metodo de ordenamiento","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",63, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reproducir_syntax ::= notas COMA value COMA value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation e3 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e4 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Reproducir reproducir = new Reproducir(cur_token.left, cur_token.right);
                        reproducir.setNota(e1);
                        reproducir.setOctava(e2);
                        reproducir.setMilisegundos(e3);
                        reproducir.setCanal(e4);
                        RESULT = reproducir;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reproducir_syntax ::= notas error value COMA value COMA value CLOSE_PARENTHESIS SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reproducir_syntax ::= notas COMA value error value COMA value CLOSE_PARENTHESIS SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reproducir_syntax ::= notas COMA value COMA value error value CLOSE_PARENTHESIS SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reproducir_syntax ::= notas COMA value COMA value COMA value error SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reproducir_syntax ::= notas COMA value COMA value COMA value CLOSE_PARENTHESIS error 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Operation e3 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e4 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba un salto delinea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-8)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // esperar_syntax ::= value COMA value CLOSE_PARENTHESIS 
            {
              Esperar RESULT =null;
		int milisegundosleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int milisegundosright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation milisegundos = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation canal = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Esperar esperar = new Esperar(cur_token.left, cur_token.right);
                        Operation miliSegundos=null;
                        Operation canalOp=null;
                        if(milisegundos!=null && canal!=null){
                                miliSegundos = milisegundos;
                                canalOp = canal;
                        }
                        esperar.setMilisegundos(miliSegundos);
                        esperar.setCanal(canalOp);
                        RESULT =esperar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // esperar_syntax ::= value error value CLOSE_PARENTHESIS SPACE 
            {
              Esperar RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // esperar_syntax ::= value COMA value error SPACE 
            {
              Esperar RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // esperar_syntax ::= value COMA value CLOSE_PARENTHESIS error 
            {
              Esperar RESULT =null;
		int milisegundosleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int milisegundosright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Operation milisegundos = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation canal = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba un salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sumarizar_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Sumarizar sumarizar = new Sumarizar(cur_token.left, cur_token.right);
                        sumarizar.setArreglo(e1);
                        RESULT = sumarizar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sumarizar_syntax ::= value error SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba en \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sumarizar_syntax ::= value CLOSE_PARENTHESIS error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // longitud_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Longitud longitud = new Longitud(cur_token.left, cur_token.right);
                        longitud.setArray(e1);
                        RESULT = longitud;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // longitud_syntax ::= value error SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // longitud_syntax ::= value error error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mensaje_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Mensaje mensaje = new Mensaje(cur_token.left, cur_token.right);
                        mensaje.setMensaje(e1);
                        RESULT = mensaje;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mensaje_syntax ::= value error SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mensaje_syntax ::= value CLOSE_PARENTHESIS error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ordenar_syntax ::= value COMA ordenar_options CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation sim = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int ordleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation ord = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Ordenar ordenar = new Ordenar(cur_token.left, cur_token.right);
                        Operation operation = sim;
                        ordenar.setArray(sim);
                        ordenar.setForma(ord);
                        RESULT = ordenar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ordenar_syntax ::= value error ordenar_options CLOSE_PARENTHESIS SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ordenar_syntax ::= value COMA ordenar_options error SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ordenar_syntax ::= value COMA ordenar_options CLOSE_PARENTHESIS error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func_especiales ::= REPRODUCIR OPEN_PARENTHESIS reproducir_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_especiales ::= REPRODUCIR error reproducir_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_especiales ::= SUMARIZAR OPEN_PARENTHESIS sumarizar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_especiales ::= SUMARIZAR error sumarizar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_especiales ::= LONGITUD OPEN_PARENTHESIS longitud_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // func_especiales ::= LONGITUD error longitud_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\"  ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func_especiales ::= ESPERAR OPEN_PARENTHESIS esperar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Esperar e1 = (Esperar)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_especiales ::= ESPERAR error esperar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func_especiales ::= MENSAJE OPEN_PARENTHESIS mensaje_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // func_especiales ::= MENSAJE error mensaje_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // func_especiales ::= ORDENAR OPEN_PARENTHESIS ordenar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // func_especiales ::= ORDENAR error ordenar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // kf ::= KEEP type_function function_mode 
            {
              VariableIndicator RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		VariableIndicator tf = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> m = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(tf!=null){
                VariableIndicator indicator = tf;
                indicator.setGlobal(true);
                if(m!=null){
                        indicator.setDimension(m);
                }
                RESULT=indicator;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // kf ::= type_function function_mode 
            {
              VariableIndicator RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		VariableIndicator tf = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> m = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(tf!=null){
                VariableIndicator indicator = tf;
                if(m!=null){
                        indicator.setDimension(m);
                }
                RESULT=indicator;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_mode ::= dimension 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                RESULT = dim;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_mode",26, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_mode ::= 
            {
              ArrayList<Operation> RESULT =null;
		
                        ArrayList<Operation> lista = new ArrayList();
                        RESULT = lista;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_mode",26, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function ::= kf word_functions OPEN_PARENTHESIS multiple_v tab_re SPACE 
            {
              Function RESULT =null;
		int variableIndicatorleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int variableIndicatorright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		VariableIndicator variableIndicator = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		ArrayList<Operation> mv = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(variableIndicator!=null && mv!=null){
                        VariableIndicator indicator = variableIndicator;
                        ArrayList<Operation> list = mv;
                        Value value = new Value("function",sim);
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        Function function = new Function(cur_token.left, cur_token.right);
                        function.setName(value);
                        function.setParameters(list);
                        function.setParamsIndicator(indicator);
                        RESULT = function;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function ::= kf error OPEN_PARENTHESIS multiple_v SPACE 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function ::= kf word_functions error multiple_v SPACE 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function ::= kf word_functions OPEN_PARENTHESIS multiple_v error 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_function ::= data_type 
            {
              VariableIndicator RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String typ = "";
                ArrayList<Operation> dimension = new ArrayList();
                if(data!=null){
                        typ=data;
                }
                VariableIndicator indicator = new VariableIndicator(false, typ, dimension);
                RESULT = indicator;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type_function",29, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // multiple_v ::= function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation fv = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mvreleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mvreright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> mvre = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(mvre!=null){
                        ArrayList<Operation> list = mvre;
                        list.add(fv);
                        ArrayList<Operation> aux = new ArrayList();
                        for(int index=list.size()-1; index>=0; index--){
                                aux.add(list.get(index));
                        }
                        RESULT = aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multiple_v ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                ArrayList<Operation> list = new ArrayList();
                RESULT = list;
            
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multiple_v_re ::= COMA function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation fv = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mvreleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mvreright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> mvre = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(mvre!=null){
                                ArrayList<Operation> list = mvre;
                                list.add(fv);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // multiple_v_re ::= error function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma o \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // multiple_v_re ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                        ArrayList<Operation> list = new ArrayList();
                        RESULT = list;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // function_variables ::= data_type SIMBOLO 
            {
              Operation RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                                Value value = new Value(data, sim.toString());
                                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                                RESULT = operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_variables ::= data_type ARREGLO SIMBOLO dimension 
            {
              Operation RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // function_variables ::= data_type ARREGLO SIMBOLO error 
            {
              Operation RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_variables ::= data_type error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",64, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // method_value ::= condition_re method_value_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value",7, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // method_value ::= CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value",7, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // method_value_re ::= COMA condition_re method_value_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value_re",8, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // method_value_re ::= CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("method_value_re",8, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // word_functions ::= SIMBOLO 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT= sim.toString();
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // word_functions ::= REPRODUCIR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // word_functions ::= ESPERAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // word_functions ::= ORDENAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // word_functions ::= LONGITUD 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // word_functions ::= MENSAJE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT = e.toString(); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("word_functions",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // throw_function ::= word_functions OPEN_PARENTHESIS method_value 
            {
              Function RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        /*Function function = new Function(true ,cur_token.left, cur_token.right);
                        Value value = new Value("variable",sim.toString());
                        function.setName(value);
                        function.setParameters(v);
                        RESULT = function;*/
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("throw_function",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pista ::= PISTA SIMBOLO d 
            {
              Pista RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int extendedleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int extendedright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> extended = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        ArrayList<Operation> list;
        if(extended!=null){
                list = extended;
        }else{
                list = new ArrayList();
        }
        Pista function = new Pista(cur_token.left, cur_token.right);
        function.setName(sim.toString());
        function.setExtendeds(list);
        RESULT = function;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pista ::= PISTA error d 
            {
              Pista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Error, se esperaba un nombre de la funcion","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pista ::= PISTA SIMBOLO error 
            {
              Pista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("No se encontro un salto de linea o extension de pistas","Problema en Pista"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // d ::= EXTIENDE SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> d = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista",sim.toString());
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                ArrayList<Operation> auxiliar = new ArrayList();
                for(int index=lista.size()-1; index>=0; index--){
                        auxiliar.add(lista.get(index));
                }
                RESULT = auxiliar;
        }        
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // d ::= tab_re SPACE 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // d_ ::= COMA SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> d = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista", sim.toString());
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                RESULT = lista;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // d_ ::= error SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // d_ ::= COMA error d_ 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro la pista","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // d_ ::= tab_re SPACE 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // increm_variables ::= SIMBOLO increm 
            {
              Variable RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Variable variable = new Variable(cur_token.left, cur_token.right);
                        variable.setName(sim.toString());
                        Assignment assignment = new Assignment(cur_token.left, cur_token.right);
                        assignment.setMetodo(in);
                        variable.setValue(assignment);
                        RESULT = variable;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm_variables",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // increm ::= INCREASE 
            {
              String RESULT =null;
		RESULT = "++";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // increm ::= DECREASE 
            {
              String RESULT =null;
		RESULT = "--";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // increm ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba ++ o -- ","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // v_for ::= type SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		VariableIndicator typ = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignforleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignforright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assignfor = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Assignment assignment = assignfor;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                variable.setParameters(typ);
                RESULT = variable;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // v_for ::= SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Assignment assignment = assign;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                RESULT = variable;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // assign_for ::= equal condition_re 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition op = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(e1!=null && op!=null){
                        String mode = e1.toString();
                        Operation operation = new Operation(op,cur_token.left, cur_token.right);
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(operation);
                        RESULT=asignacion;
        }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_for",18, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // v ::= type variables assign_special 
            {
              Instruction RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		VariableIndicator typ = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(var!=null){
                Assignment assignment = assign;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment, typ);
                RESULT = chunk;
        }    
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // v ::= variables assign 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(var!=null){
                Assignment assignment = assign;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment);
                RESULT = chunk;
        }    
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // v ::= variables increm SPACE 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
         if(inc!=null && var!=null){
                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                asignacion.setMetodo(inc);
                VariableChunk chunk = new VariableChunk(var ,asignacion);
                RESULT = chunk;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // data_type ::= ENTERO 
            {
              String RESULT =null;
		RESULT="entero";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // data_type ::= DOBLE 
            {
              String RESULT =null;
		RESULT="doble";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // data_type ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT="boolean";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // data_type ::= CADENA 
            {
              String RESULT =null;
		RESULT="cadena";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // data_type ::= CARACTER 
            {
              String RESULT =null;
		RESULT="caracter";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variables ::= SIMBOLO variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Variable> arr = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(arr!=null){
                        lista=arr;
                        lista.add(variable);
                        ArrayList<Variable> auxiliar = new ArrayList();
                        for(int index=lista.size()-1; index>=0; index--){
                                auxiliar.add(lista.get(index));
                        }
                }
                
                RESULT = lista;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables",31, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // variables ::= ARREGLO SIMBOLO variables_re dimension 
            {
              ArrayList<Variable> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables",31, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variables_re ::= COMA SIMBOLO variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Variable> arr = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(arr!=null){
                        lista = arr;
                        lista.add(variable);
                }
                RESULT=lista;
                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variables_re ::= COMA error variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba nombre de una variable ","Simbolo no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // variables_re ::= 
            {
              ArrayList<Variable> RESULT =null;
		 ArrayList<Variable> variables = new ArrayList(); RESULT =variables; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // k ::= KEEP VAR 
            {
              Boolean RESULT =null;
		RESULT=true;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // k ::= VAR 
            {
              Boolean RESULT =null;
		RESULT=false;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // k ::= error 
            {
              Boolean RESULT =null;
		RESULT = false;  parser.report_error("Se esperaba un simbolo o declaracion de variable ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // k ::= KEEP error 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        parser.report_error("Se esperaba \"var\" ","Sintaxis incorrecta");
        RESULT=false;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // type ::= k data_type 
            {
              VariableIndicator RESULT =null;
		int kValueleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int kValueright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Boolean kValue = (Boolean)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String data=typ;
                boolean keep = kValue;
                ArrayList<Operation> list = new ArrayList();
                if(data==null){
                        data="";
                }
                if(list==null){
                        ArrayList<Operation> value = new ArrayList();
                        list = value;
                }
                VariableIndicator indicator = new VariableIndicator(keep, data, list);
                RESULT = indicator;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // assign_special ::= assign 
            {
              Assignment RESULT =null;
		int assileft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assiright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assi = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = assi;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_special",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // assign_special ::= tab_re SPACE 
            {
              Assignment RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_special",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // assign ::= equal array_assign SPACE 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",16, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // assign ::= equal condition_re assign_special 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition re = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(e1!=null && re!=null){
                        String mode = e1.toString();
                        Operation value = new Operation(re,cur_token.left, cur_token.right);
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(value);
                        RESULT=asignacion;
                }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",16, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // equal ::= EQUAL 
            {
              String RESULT =null;
		RESULT = "=";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // equal ::= EQUAL_MORE 
            {
              String RESULT =null;
		RESULT = "+=";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // equal ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("No se pudo declarar correctamente la variable","Igualacion esperada"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // array ::= ARREGLO dimension 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(dim!=null)
                {
                        RESULT=dim;
                }else{
                        ArrayList<Operation> list = new ArrayList(); 
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array",23, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // array ::= 
            {
              ArrayList<Operation> RESULT =null;
		 ArrayList<Operation> list = new ArrayList(); RESULT=list; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array",23, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dimension ::= dimension_re OPEN_BRACKET value CLOSE_BRACKET 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        list.add(v);
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension",24, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dimension_re ::= dimension_re OPEN_BRACKET value CLOSE_BRACKET 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        list.add(v);
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension_re",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dimension_re ::= 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> lista = new ArrayList(); 
                RESULT = lista;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension_re",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // array_assign ::= OPEN_CURLY assign_arr new_assign 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array_assign",1, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // new_assign ::= COMA OPEN_CURLY assign_arr new_assign 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("new_assign",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // new_assign ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("new_assign",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // assign_arr ::= OPEN_CURLY mult_values CLOSE_CURLY assign_arr_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr",2, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // assign_arr ::= mult_values CLOSE_CURLY 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr",2, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // assign_arr_re ::= COMA OPEN_CURLY mult_values CLOSE_CURLY assign_arr_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr_re",3, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // assign_arr_re ::= CLOSE_CURLY 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr_re",3, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // mult_values ::= value mult_values_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values",4, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // mult_values_re ::= COMA value mult_values_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values_re",5, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // mult_values_re ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values_re",5, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // value ::= NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("entero",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // value ::= MINUS NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("entero","-"+num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // value ::= DECIMAL 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("doble",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // value ::= MINUS DECIMAL 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("doble","-"+num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // value ::= STRING 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("cadena",num.toString());
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // value ::= CHAR 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("caracter",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // value ::= throw_function 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Function num = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Operation operation = new Operation(num, cur_token.left, cur_token.right);
                        RESULT = operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // value ::= value ADD value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;
                        }
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // value ::= value MINUS value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // value ::= value MULTIPLY value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // value ::= value DIV value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // value ::= value POW value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // value ::= value MODULE value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // value ::= OPEN_PARENTHESIS value CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = e2;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // value ::= SIMBOLO dimension_re 
            {
              Operation RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
        Value value = new Value(sim.toString(), dim);
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation; 
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // value ::= TRUE 
            {
              Operation RESULT =null;
		Value value = new Value("boolean","true"); 
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // value ::= func_especiales 
            {
              Operation RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction func = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        Value value = new Value("specialFunction",func );
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // value ::= FALSE 
            {
              Operation RESULT =null;
		Value value = new Value("boolean","false");
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
         RESULT = operation;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // value ::= error 
            {
              Operation RESULT =null;
		 parser.report_error("Se esperaba algun valor","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",62, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // if ::= block_if 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		If e1 = (If)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // if ::= block_elseif 
            {
              Instruction RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ElseIf e2 = (ElseIf)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e2;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // if ::= block_else 
            {
              Instruction RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Else e3 = (Else)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e3;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // block_if ::= SI OPEN_PARENTHESIS condition tab_re SPACE 
            {
              If RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(con!=null){
                        If block = new If(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",65, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // block_if ::= SI error condition SPACE 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" en ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",65, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // block_if ::= SI OPEN_PARENTHESIS condition error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",65, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // block_elseif ::= ELSE SI OPEN_PARENTHESIS condition tab_re SPACE 
            {
              ElseIf RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(con!=null){
                        ElseIf block = new ElseIf(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // block_elseif ::= ELSE error OPEN_PARENTHESIS condition SPACE 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("No se agrego \"Si\" en la declaracion","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // block_elseif ::= ELSE SI error condition SPACE 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // block_elseif ::= ELSE SI OPEN_PARENTHESIS condition error 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",66, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // block_else ::= ELSE tab_re SPACE 
            {
              Else RESULT =null;
		
                Else block = new Else(cur_token.left, cur_token.right);
                RESULT = block;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_else",67, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // block_else ::= ELSE error 
            {
              Else RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_else",67, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // condition ::= condition_re CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        if(con!=null){
                                RESULT = con;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // condition_re ::= condition_re AND condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // condition_re ::= condition_re NAND condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // condition_re ::= condition_re OR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // condition_re ::= condition_re NOR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // condition_re ::= condition_re XOR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // condition_re ::= OPEN_PARENTHESIS condition_re CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 RESULT = e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // condition_re ::= NULL_ condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!!");
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // condition_re ::= NOT condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!");
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // condition_re ::= comparation 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Comparation comparation = e1;
                                Condition condition = new Condition(comparation, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // comparation ::= comparation EQUALIZATION comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // comparation ::= comparation DIFFERENTIATION comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // comparation ::= comparation GREATER comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // comparation ::= comparation GREATER_THAN comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // comparation ::= comparation LESSER comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // comparation ::= comparation LESSER_THAN comparation 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e2 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // comparation ::= OPEN_PARENTHESIS comparation CLOSE_PARENTHESIS 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // comparation ::= value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Comparation comparation = new Comparation(e1, cur_token.left, cur_token.right);
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // instruction_switch ::= tab func_especiales instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                        
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // instruction_switch ::= tab throw_function tab_re SPACE instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // instruction_switch ::= tab v instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // instruction_switch ::= tab for instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // instruction_switch ::= tab while instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // instruction_switch ::= tab do_while instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // instruction_switch ::= tab if instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // instruction_switch ::= tab switch instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        
                        if(ins!=null){

                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // instruction_switch ::= tab RETORNA value instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Return retorna = new Return(t, cur_token.left, cur_token.right, val);
                        if(ins!=null){  
                                ins.add(retorna);
                                RESULT = ins;
                        }else{
                                ArrayList<Instruction> list = new ArrayList();
                                list.add(retorna);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // instruction_switch ::= tab CONTINUE value instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Continue newContinue = new Continue(t, cur_token.left, cur_token.right);
                        if(ins!=null){
                                ins.add(newContinue);
                                RESULT = ins;
                        }else{
                                ArrayList<Instruction> list = new ArrayList();
                                list.add(newContinue);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // instruction_switch ::= tab SPACE instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = ins;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // instruction_switch ::= SPACE instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = ins;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // instruction_switch ::= tab EXIT 
            {
              ArrayList<Instruction> RESULT =null;
		
                        ArrayList<Instruction> instructions = new ArrayList();
                        RESULT = instructions;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // instruction_switch ::= error instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro una instruccion","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // instruction_switch ::= tab error instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro una instruccion","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // switch ::= SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS tab_re SPACE cases 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Case> cas = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        ArrayList<Case> cases = new ArrayList();
                        if(cas !=null){
                                cases = cas;
                        }
                        Switch newSwitch = new Switch(cur_token.left, cur_token.right);
                        newSwitch.setVariable(val);
                        newSwitch.setCases(cases);
                        RESULT = newSwitch;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // switch ::= SWITCH error value CLOSE_PARENTHESIS tab_re SPACE cases 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // switch ::= SWITCH OPEN_PARENTHESIS value error tab_re SPACE cases 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // switch ::= SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS tab_re error cases 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // cases ::= tab CASE value tab_re SPACE instruction_switch cases 
            {
              ArrayList<Case> RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Case> cas = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(cas!=null){
                        ArrayList<Case> cases = cas;
                        Case newCase = new Case(ind, cur_token.left, cur_token.right);
                        newCase.setInstructions(ins);
                        newCase.setValue(val);
                        cases.add(newCase);
                        RESULT = cases;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // cases ::= tab error value tab_re SPACE instruction_switch cases 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		 parser.report_error("Se esperaba la palabra \"case\" o \"default\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // cases ::= tab CASE value error instruction_switch cases 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cases ::= tab DEFAULT tab_re SPACE 
            {
              ArrayList<Case> RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		
                ArrayList<Case> cases = new ArrayList();
                Default lastCase = new Default(ind, cur_token.left, cur_token.right);
                cases.add(lastCase);
                RESULT = cases;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cases ::= tab DEFAULT value error 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cases ::= error cases 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Error sintactico ","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cases ::= SPACE 
            {
              ArrayList<Case> RESULT =null;
		
                ArrayList<Case> cases = new ArrayList();
                RESULT = cases;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // for ::= FOR OPEN_PARENTHESIS for_instructions SPACE 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(f!=null){
                        RESULT = f;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // for ::= FOR error for_instructions SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // for ::= FOR OPEN_PARENTHESIS for_instructions error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // for_instructions ::= v_for COLON for_condition 
            {
              For RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(f!=null){
                                For newFor = f;
                                newFor.setVariable(v);
                                RESULT = newFor;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_instructions",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // for_instructions ::= v_for error for_condition 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \";\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_instructions",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // for_condition ::= condition_re COLON for_increm 
            {
              For RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(f!=null){
                                For newFor = f;
                                newFor.setCondition(con);
                                RESULT = newFor;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_condition",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // for_condition ::= condition_re error for_increm 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \";\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_condition",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // for_increm ::= increm_variables CLOSE_PARENTHESIS tab_re 
            {
              For RESULT =null;
		int incvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int incvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Variable incv = (Variable)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                        For newFor = new For(cur_token.left, cur_token.right);
                        newFor.setPaso(incv);
                        RESULT = newFor;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_increm",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // for_increm ::= increm_variables error 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_increm",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // while ::= WHILE OPEN_PARENTHESIS condition tab_re SPACE 
            {
              Instruction RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                if(con!=null){
                        While newWhile = new While(cur_token.left, cur_token.right);
                        newWhile.setCondition(con);
                        RESULT = newWhile;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // while ::= WHILE error condition SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // while ::= WHILE OPEN_PARENTHESIS condition error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // do_while ::= HACER tab_re SPACE 
            {
              Instruction RESULT =null;
		
                DoWhile doWhile = new DoWhile(cur_token.left, cur_token.right);
                RESULT = doWhile;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // do_while ::= HACER error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("do_while",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PhytonSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PhytonSyntax$do_action(
    int                        CUP$PhytonSyntax$act_num,
    java_cup.runtime.lr_parser CUP$PhytonSyntax$parser,
    java.util.Stack            CUP$PhytonSyntax$stack,
    int                        CUP$PhytonSyntax$top)
    throws java.lang.Exception
    {
              return CUP$PhytonSyntax$do_action_part00000000(
                               CUP$PhytonSyntax$act_num,
                               CUP$PhytonSyntax$parser,
                               CUP$PhytonSyntax$stack,
                               CUP$PhytonSyntax$top);
    }
}

}
