
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package valiente.orl2.phyton.parser;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import valiente.orl2.phyton.conditions.*;
import valiente.orl2.phyton.cycles.*;
import valiente.orl2.phyton.instructions.*;
import valiente.orl2.phyton.specialInstructions.*;
import valiente.orl2.phyton.values.*;
import valiente.orl2.phyton.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PhytonSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PhytonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PhytonSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PhytonSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PhytonSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\345\000\002\002\004\000\002\007\003\000\002\007" +
    "\002\000\002\050\007\000\002\050\007\000\002\050\007" +
    "\000\002\050\007\000\002\041\004\000\002\042\004\000" +
    "\002\042\002\000\002\066\003\000\002\066\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\067\005\000\002\067\006\000\002\067\006\000\002" +
    "\067\005\000\002\067\004\000\002\067\002\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\061\012" +
    "\000\002\061\012\000\002\061\012\000\002\061\012\000" +
    "\002\061\012\000\002\030\006\000\002\030\006\000\002" +
    "\030\006\000\002\062\004\000\002\062\004\000\002\063" +
    "\004\000\002\063\004\000\002\064\004\000\002\064\004" +
    "\000\002\065\006\000\002\065\006\000\002\065\006\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\033\004\000" +
    "\002\033\003\000\002\033\003\000\002\046\007\000\002" +
    "\046\007\000\002\046\007\000\002\046\007\000\002\032" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\074\004\000" +
    "\002\074\004\000\002\047\006\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\024\005\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\036\005\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\037\005\000\002" +
    "\037\004\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\053\005\000\002\053\004\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\034\004\000\002\035\005\000\002" +
    "\035\005\000\002\035\002\000\002\040\004\000\002\040" +
    "\003\000\002\040\004\000\002\031\005\000\002\020\003" +
    "\000\002\020\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\004\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\026\004\000\002\026\002\000\002\027" +
    "\006\000\002\027\002\000\002\003\005\000\002\002\006" +
    "\000\002\002\002\000\002\004\006\000\002\004\004\000" +
    "\002\005\004\000\002\006\005\000\002\006\002\000\002" +
    "\072\003\000\002\072\004\000\002\072\003\000\002\072" +
    "\004\000\002\072\003\000\002\072\003\000\002\072\005" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\072\005\000\002\072\005\000\002\072\005\000\002" +
    "\072\004\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\075\006\000\002\075\006\000" +
    "\002\075\006\000\002\076\007\000\002\076\007\000\002" +
    "\076\007\000\002\076\007\000\002\077\004\000\002\077" +
    "\004\000\002\014\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\006\000\002\070\006\000\002\070\005\000\002\070\004" +
    "\000\002\070\004\000\002\070\004\000\002\070\005\000" +
    "\002\060\010\000\002\060\010\000\002\060\010\000\002" +
    "\060\010\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\005\000\002\013\006\000\002\013\004" +
    "\000\002\013\003\000\002\054\006\000\002\054\006\000" +
    "\002\054\006\000\002\010\005\000\002\010\005\000\002" +
    "\011\005\000\002\011\005\000\002\012\004\000\002\012" +
    "\004\000\002\055\006\000\002\055\006\000\002\055\006" +
    "\000\002\056\004\000\002\056\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d6\000\020\002\uffe6\003\012\006\016\023\uffff\024" +
    "\015\116\014\117\013\001\002\000\004\002\ufff7\001\002" +
    "\000\062\003\104\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\024\101\025\133\026\072\027\112\030\102" +
    "\031\077\032\107\034\071\037\117\040\113\044\076\045" +
    "\124\046\126\047\075\060\073\117\063\122\110\001\002" +
    "\000\016\002\uffe6\006\016\023\uffff\024\015\116\014\117" +
    "\013\001\002\000\004\023\050\001\002\000\004\002\047" +
    "\001\002\000\016\002\uffe6\006\016\023\uffff\024\015\116" +
    "\014\117\013\001\002\000\020\002\uffe6\003\012\006\016" +
    "\023\uffff\024\015\116\014\117\013\001\002\000\016\002" +
    "\uffe6\006\016\023\uffff\024\015\116\014\117\013\001\002" +
    "\000\072\003\ufff8\010\ufff8\011\ufff8\012\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\034\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\060\ufff8" +
    "\116\041\117\ufff8\122\ufff8\001\002\000\004\023\000\001" +
    "\002\000\006\003\017\034\020\001\002\000\006\007\022" +
    "\117\023\001\002\000\010\003\021\007\022\117\023\001" +
    "\002\000\016\002\uffa6\006\uffa6\023\uffa6\024\uffa6\116\uffa6" +
    "\117\uffa6\001\002\000\004\034\025\001\002\000\016\002" +
    "\uffa4\006\uffa4\023\uffa4\024\uffa4\116\uffa4\117\uffa4\001\002" +
    "\000\016\002\uffa8\006\uffa8\023\uffa8\024\uffa8\116\uffa8\117" +
    "\uffa8\001\002\000\010\003\027\107\026\117\031\001\002" +
    "\000\006\003\034\034\035\001\002\000\004\034\032\001" +
    "\002\000\016\002\uffa5\006\uffa5\023\uffa5\024\uffa5\116\uffa5" +
    "\117\uffa5\001\002\000\016\002\uffa0\006\uffa0\023\uffa0\024" +
    "\uffa0\116\uffa0\117\uffa0\001\002\000\010\003\027\107\026" +
    "\117\031\001\002\000\016\002\uffa2\006\uffa2\023\uffa2\024" +
    "\uffa2\116\uffa2\117\uffa2\001\002\000\010\003\027\107\026" +
    "\117\031\001\002\000\010\003\027\107\026\117\031\001" +
    "\002\000\016\002\uffa3\006\uffa3\023\uffa3\024\uffa3\116\uffa3" +
    "\117\uffa3\001\002\000\016\002\uffa1\006\uffa1\023\uffa1\024" +
    "\uffa1\116\uffa1\117\uffa1\001\002\000\016\002\uffa7\006\uffa7" +
    "\023\uffa7\024\uffa7\116\uffa7\117\uffa7\001\002\000\072\003" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\034\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\060\ufff8\116\041\117" +
    "\ufff8\122\ufff8\001\002\000\070\003\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\060\ufffa\117\ufffa\122\ufffa\001\002\000\070" +
    "\003\ufff9\010\ufff9\011\ufff9\012\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\034\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\060\ufff9\117\ufff9" +
    "\122\ufff9\001\002\000\004\002\uffe7\001\002\000\004\002" +
    "\ufff6\001\002\000\004\002\ufff5\001\002\000\004\002\001" +
    "\001\002\000\006\003\051\104\052\001\002\000\004\105" +
    "\060\001\002\000\006\003\053\105\054\001\002\000\004" +
    "\117\057\001\002\000\006\003\055\117\056\001\002\000" +
    "\016\002\ufffb\006\ufffb\023\ufffb\024\ufffb\116\ufffb\117\ufffb" +
    "\001\002\000\016\002\ufffe\006\ufffe\023\ufffe\024\ufffe\116" +
    "\ufffe\117\ufffe\001\002\000\016\002\ufffc\006\ufffc\023\ufffc" +
    "\024\ufffc\116\ufffc\117\ufffc\001\002\000\004\117\061\001" +
    "\002\000\016\002\ufffd\006\ufffd\023\ufffd\024\ufffd\116\ufffd" +
    "\117\ufffd\001\002\000\004\002\ufff4\001\002\000\016\002" +
    "\uffe6\006\016\023\uffff\024\015\116\014\117\013\001\002" +
    "\000\006\003\u01cc\034\u01cd\001\002\000\016\002\uffe6\006" +
    "\016\023\uffff\024\015\116\014\117\013\001\002\000\016" +
    "\002\uffe6\006\016\023\uffff\024\015\116\014\117\013\001" +
    "\002\000\006\003\u01c3\104\u01c4\001\002\000\006\003\u01b1" +
    "\104\u01b2\001\002\000\020\003\uff8c\061\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\104\u01a1\107\237\001\002\000\010\003\uff94" +
    "\033\uff94\034\uff94\001\002\000\006\003\u019a\104\u019b\001" +
    "\002\000\016\002\uffe6\006\016\023\uffff\024\015\116\014" +
    "\117\013\001\002\000\042\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\075\165\104\151\123\157\124\164\001" +
    "\002\000\006\003\u0173\104\u0174\001\002\000\010\003\uff90" +
    "\033\uff90\034\uff90\001\002\000\014\003\141\061\137\071" +
    "\147\072\146\073\145\001\002\000\020\003\u0131\025\u0130" +
    "\026\072\027\112\030\102\031\077\032\107\001\002\000" +
    "\010\003\uff92\033\uff92\034\uff92\001\002\000\006\003\u014b" +
    "\104\u014c\001\002\000\006\003\uffb6\034\uffb6\001\002\000" +
    "\010\003\uff7e\033\247\034\uff7e\001\002\000\020\002\uff60" +
    "\003\uff60\006\uff60\023\uff60\024\uff60\116\uff60\117\uff60\001" +
    "\002\000\010\003\uff91\033\uff91\034\uff91\001\002\000\042" +
    "\003\166\004\155\005\161\010\103\011\127\012\070\020" +
    "\123\021\121\022\067\034\162\035\160\036\154\075\165" +
    "\104\151\123\157\124\164\001\002\000\016\002\uffe6\006" +
    "\016\023\uffff\024\015\116\014\117\013\001\002\000\010" +
    "\003\uff93\033\uff93\034\uff93\001\002\000\006\003\u0100\104" +
    "\u0101\001\002\000\016\002\uffe6\006\016\023\uffff\024\015" +
    "\116\014\117\013\001\002\000\016\002\uffe6\006\016\023" +
    "\uffff\024\015\116\014\117\013\001\002\000\020\002\uff61" +
    "\003\uff61\006\uff61\023\uff61\024\uff61\116\uff61\117\uff61\001" +
    "\002\000\010\003\361\060\362\117\363\001\002\000\016" +
    "\002\uffe6\006\016\023\uffff\024\015\116\014\117\013\001" +
    "\002\000\006\003\351\104\352\001\002\000\016\002\uffe6" +
    "\006\016\023\uffff\024\015\116\014\117\013\001\002\000" +
    "\006\003\341\104\342\001\002\000\006\003\270\104\271" +
    "\001\002\000\016\002\uffe6\006\016\023\uffff\024\015\116" +
    "\014\117\013\001\002\000\006\003\265\117\266\001\002" +
    "\000\006\003\251\104\252\001\002\000\014\026\072\027" +
    "\112\030\102\031\077\032\107\001\002\000\020\002\uff5f" +
    "\003\uff5f\006\uff5f\023\uff5f\024\uff5f\116\uff5f\117\uff5f\001" +
    "\002\000\006\003\uffb7\034\uffb7\001\002\000\014\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\001\002\000\004\034" +
    "\135\001\002\000\020\003\uff8c\061\uff8c\071\uff8c\072\uff8c" +
    "\073\uff8c\107\237\117\uff8c\001\002\000\016\003\141\061" +
    "\137\071\147\072\146\073\145\117\142\001\002\000\044" +
    "\003\uff82\004\uff82\005\uff82\010\uff82\011\uff82\012\uff82\020" +
    "\uff82\021\uff82\022\uff82\034\uff82\035\uff82\036\uff82\075\uff82" +
    "\104\uff82\120\uff82\123\uff82\124\uff82\001\002\000\020\002" +
    "\uff96\003\uff96\006\uff96\023\uff96\024\uff96\116\uff96\117\uff96" +
    "\001\002\000\050\003\uff80\004\uff80\005\uff80\010\uff80\011" +
    "\uff80\012\uff80\020\uff80\021\uff80\022\uff80\034\uff80\035\uff80" +
    "\036\uff80\075\uff80\104\uff80\106\uff9c\117\uff9c\120\uff80\123" +
    "\uff80\124\uff80\001\002\000\020\002\uff86\003\uff86\006\uff86" +
    "\023\uff86\024\uff86\116\uff86\117\uff86\001\002\000\004\117" +
    "\236\001\002\000\044\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\120\153\123\157\124\164" +
    "\001\002\000\006\106\uff9d\117\uff9d\001\002\000\006\106" +
    "\uff9e\117\uff9e\001\002\000\044\003\uff81\004\uff81\005\uff81" +
    "\010\uff81\011\uff81\012\uff81\020\uff81\021\uff81\022\uff81\034" +
    "\uff81\035\uff81\036\uff81\075\uff81\104\uff81\120\uff81\123\uff81" +
    "\124\uff81\001\002\000\020\002\uff87\003\uff87\006\uff87\023" +
    "\uff87\024\uff87\116\uff87\117\uff87\001\002\000\042\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\075\165\104\151" +
    "\123\157\124\164\001\002\000\074\002\uff64\003\uff64\006" +
    "\uff64\023\uff64\024\uff64\062\uff64\063\uff64\064\uff64\065\uff64" +
    "\067\uff64\070\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100" +
    "\uff64\101\uff64\103\uff64\105\uff64\106\uff64\107\uff64\110\uff64" +
    "\111\uff64\112\uff64\113\uff64\114\uff64\116\uff64\117\uff64\121" +
    "\uff64\001\002\000\044\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\120\213\123\157\124\164" +
    "\001\002\000\074\002\uff6e\003\uff6e\006\uff6e\023\uff6e\024" +
    "\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\067\uff6e\070\uff6e" +
    "\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\103" +
    "\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e\112\uff6e" +
    "\113\uff6e\114\uff6e\116\uff6e\117\uff6e\121\uff6e\001\002\000" +
    "\074\002\uff71\003\uff71\006\uff71\023\uff71\024\uff71\062\uff71" +
    "\063\uff71\064\uff71\065\uff71\067\uff71\070\uff71\074\uff71\075" +
    "\uff71\076\uff71\077\uff71\100\uff71\101\uff71\103\uff71\105\uff71" +
    "\106\uff71\107\uff71\110\uff71\111\uff71\112\uff71\113\uff71\114" +
    "\uff71\116\uff71\117\uff71\121\uff71\001\002\000\004\117\212" +
    "\001\002\000\074\002\uff65\003\uff65\006\uff65\023\uff65\024" +
    "\uff65\062\uff65\063\uff65\064\uff65\065\uff65\067\uff65\070\uff65" +
    "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\103" +
    "\uff65\105\uff65\106\uff65\107\uff65\110\uff65\111\uff65\112\uff65" +
    "\113\uff65\114\uff65\116\uff65\117\uff65\121\uff65\001\002\000" +
    "\074\002\uff6f\003\uff6f\006\uff6f\023\uff6f\024\uff6f\062\uff6f" +
    "\063\uff6f\064\uff6f\065\uff6f\067\uff6f\070\uff6f\074\uff6f\075" +
    "\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\103\uff6f\105\uff6f" +
    "\106\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f\113\uff6f\114" +
    "\uff6f\116\uff6f\117\uff6f\121\uff6f\001\002\000\074\002\uff73" +
    "\003\uff73\006\uff73\023\uff73\024\uff73\062\uff73\063\uff73\064" +
    "\uff73\065\uff73\067\uff73\070\uff73\074\uff73\075\uff73\076\uff73" +
    "\077\uff73\100\uff73\101\uff73\103\uff73\105\uff73\106\uff73\107" +
    "\uff73\110\uff73\111\uff73\112\uff73\113\uff73\114\uff73\116\uff73" +
    "\117\uff73\121\uff73\001\002\000\076\002\uff7c\003\uff7c\006" +
    "\uff7c\023\uff7c\024\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c" +
    "\067\uff7c\070\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100" +
    "\uff7c\101\uff7c\102\uff7c\103\uff7c\105\uff7c\106\uff7c\107\uff7c" +
    "\110\uff7c\111\uff7c\112\uff7c\113\uff7c\114\uff7c\116\uff7c\117" +
    "\uff7c\121\uff7c\001\002\000\020\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\117\176\001\002\000\074\002" +
    "\uff63\003\uff63\006\uff63\023\uff63\024\uff63\062\uff63\063\uff63" +
    "\064\uff63\065\uff63\067\uff63\070\uff63\074\uff63\075\uff63\076" +
    "\uff63\077\uff63\100\uff63\101\uff63\103\uff63\105\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\112\uff63\113\uff63\114\uff63\116" +
    "\uff63\117\uff63\121\uff63\001\002\000\006\004\170\005\167" +
    "\001\002\000\074\002\uff62\003\uff62\006\uff62\023\uff62\024" +
    "\uff62\062\uff62\063\uff62\064\uff62\065\uff62\067\uff62\070\uff62" +
    "\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62\103" +
    "\uff62\105\uff62\106\uff62\107\uff62\110\uff62\111\uff62\112\uff62" +
    "\113\uff62\114\uff62\116\uff62\117\uff62\121\uff62\001\002\000" +
    "\074\002\uff72\003\uff72\006\uff72\023\uff72\024\uff72\062\uff72" +
    "\063\uff72\064\uff72\065\uff72\067\uff72\070\uff72\074\uff72\075" +
    "\uff72\076\uff72\077\uff72\100\uff72\101\uff72\103\uff72\105\uff72" +
    "\106\uff72\107\uff72\110\uff72\111\uff72\112\uff72\113\uff72\114" +
    "\uff72\116\uff72\117\uff72\121\uff72\001\002\000\074\002\uff70" +
    "\003\uff70\006\uff70\023\uff70\024\uff70\062\uff70\063\uff70\064" +
    "\uff70\065\uff70\067\uff70\070\uff70\074\uff70\075\uff70\076\uff70" +
    "\077\uff70\100\uff70\101\uff70\103\uff70\105\uff70\106\uff70\107" +
    "\uff70\110\uff70\111\uff70\112\uff70\113\uff70\114\uff70\116\uff70" +
    "\117\uff70\121\uff70\001\002\000\042\003\166\004\155\005" +
    "\161\010\103\011\127\012\070\020\123\021\121\022\067" +
    "\034\162\035\160\036\154\075\165\104\151\123\157\124" +
    "\164\001\002\000\042\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\123\157\124\164\001\002" +
    "\000\042\003\166\004\155\005\161\010\103\011\127\012" +
    "\070\020\123\021\121\022\067\034\162\035\160\036\154" +
    "\075\165\104\151\123\157\124\164\001\002\000\042\003" +
    "\166\004\155\005\161\010\103\011\127\012\070\020\123" +
    "\021\121\022\067\034\162\035\160\036\154\075\165\104" +
    "\151\123\157\124\164\001\002\000\042\003\166\004\155" +
    "\005\161\010\103\011\127\012\070\020\123\021\121\022" +
    "\067\034\162\035\160\036\154\075\165\104\151\123\157" +
    "\124\164\001\002\000\020\002\uff85\003\uff85\006\uff85\023" +
    "\uff85\024\uff85\116\uff85\117\uff85\001\002\000\042\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\075\165\104\151" +
    "\123\157\124\164\001\002\000\074\002\uff6b\003\uff6b\006" +
    "\uff6b\023\uff6b\024\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b" +
    "\067\uff6b\070\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100" +
    "\uff6b\101\171\103\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b" +
    "\111\uff6b\112\uff6b\113\uff6b\114\uff6b\116\uff6b\117\uff6b\121" +
    "\uff6b\001\002\000\074\002\uff6a\003\uff6a\006\uff6a\023\uff6a" +
    "\024\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\067\uff6a\070" +
    "\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\171" +
    "\103\uff6a\105\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112" +
    "\uff6a\113\uff6a\114\uff6a\116\uff6a\117\uff6a\121\uff6a\001\002" +
    "\000\074\002\uff6c\003\uff6c\006\uff6c\023\uff6c\024\uff6c\062" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\067\uff6c\070\uff6c\074\uff6c" +
    "\075\uff6c\076\177\077\175\100\172\101\171\103\uff6c\105" +
    "\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\113\uff6c" +
    "\114\uff6c\116\uff6c\117\uff6c\121\uff6c\001\002\000\074\002" +
    "\uff6d\003\uff6d\006\uff6d\023\uff6d\024\uff6d\062\uff6d\063\uff6d" +
    "\064\uff6d\065\uff6d\067\uff6d\070\uff6d\074\uff6d\075\uff6d\076" +
    "\177\077\175\100\172\101\171\103\uff6d\105\uff6d\106\uff6d" +
    "\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\114\uff6d\116" +
    "\uff6d\117\uff6d\121\uff6d\001\002\000\074\002\uff68\003\uff68" +
    "\006\uff68\023\uff68\024\uff68\062\uff68\063\uff68\064\uff68\065" +
    "\uff68\067\uff68\070\uff68\074\uff68\075\uff68\076\uff68\077\uff68" +
    "\100\uff68\101\171\103\uff68\105\uff68\106\uff68\107\uff68\110" +
    "\uff68\111\uff68\112\uff68\113\uff68\114\uff68\116\uff68\117\uff68" +
    "\121\uff68\001\002\000\074\002\uff69\003\uff69\006\uff69\023" +
    "\uff69\024\uff69\062\uff69\063\uff69\064\uff69\065\uff69\067\uff69" +
    "\070\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101" +
    "\uff69\103\uff69\105\uff69\106\uff69\107\uff69\110\uff69\111\uff69" +
    "\112\uff69\113\uff69\114\uff69\116\uff69\117\uff69\121\uff69\001" +
    "\002\000\076\002\uff66\003\uff66\006\uff66\023\uff66\024\uff66" +
    "\062\uff66\063\uff66\064\uff66\065\uff66\067\uff66\070\uff66\074" +
    "\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66\102\207" +
    "\103\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111\uff66\112" +
    "\uff66\113\uff66\114\uff66\116\uff66\117\uff66\121\uff66\001\002" +
    "\000\042\003\166\004\155\005\161\010\103\011\127\012" +
    "\070\020\123\021\121\022\067\034\162\035\160\036\154" +
    "\075\165\104\151\123\157\124\164\001\002\000\020\074" +
    "\173\075\174\076\177\077\175\100\172\101\171\103\211" +
    "\001\002\000\100\002\uff7d\003\uff7d\006\uff7d\023\uff7d\024" +
    "\uff7d\034\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\067\uff7d" +
    "\070\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101" +
    "\uff7d\102\uff7d\103\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d" +
    "\111\uff7d\112\uff7d\113\uff7d\114\uff7d\116\uff7d\117\uff7d\121" +
    "\uff7d\001\002\000\020\002\uff84\003\uff84\006\uff84\023\uff84" +
    "\024\uff84\116\uff84\117\uff84\001\002\000\042\003\166\004" +
    "\155\005\161\010\103\011\127\012\070\020\123\021\121" +
    "\022\067\034\162\035\160\036\154\075\165\104\151\123" +
    "\157\124\164\001\002\000\004\121\230\001\002\000\022" +
    "\074\173\075\174\076\177\077\175\100\172\101\171\107" +
    "\224\121\uff74\001\002\000\010\106\uff79\107\217\117\uff79" +
    "\001\002\000\004\120\221\001\002\000\006\106\uff7b\117" +
    "\uff7b\001\002\000\044\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\120\213\123\157\124\164" +
    "\001\002\000\010\106\uff79\107\217\117\uff79\001\002\000" +
    "\006\106\uff7a\117\uff7a\001\002\000\042\003\166\004\155" +
    "\005\161\010\103\011\127\012\070\020\123\021\121\022" +
    "\067\034\162\035\160\036\154\075\165\104\151\123\157" +
    "\124\164\001\002\000\004\121\uff76\001\002\000\022\074" +
    "\173\075\174\076\177\077\175\100\172\101\171\107\224" +
    "\121\uff74\001\002\000\004\121\uff75\001\002\000\010\106" +
    "\uff77\107\uff77\117\uff77\001\002\000\004\121\232\001\002" +
    "\000\044\003\166\004\155\005\161\010\103\011\127\012" +
    "\070\020\123\021\121\022\067\034\162\035\160\036\154" +
    "\075\165\104\151\120\213\123\157\124\164\001\002\000" +
    "\010\106\uff78\107\uff78\117\uff78\001\002\000\020\074\173" +
    "\075\174\076\177\077\175\100\172\101\171\105\235\001" +
    "\002\000\074\002\uff67\003\uff67\006\uff67\023\uff67\024\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\067\uff67\070\uff67\074" +
    "\uff67\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67\103\uff67" +
    "\105\uff67\106\uff67\107\uff67\110\uff67\111\uff67\112\uff67\113" +
    "\uff67\114\uff67\116\uff67\117\uff67\121\uff67\001\002\000\020" +
    "\002\uff83\003\uff83\006\uff83\023\uff83\024\uff83\116\uff83\117" +
    "\uff83\001\002\000\006\003\241\034\242\001\002\000\016" +
    "\003\uff8f\061\uff8f\071\uff8f\072\uff8f\073\uff8f\117\uff8f\001" +
    "\002\000\020\003\uff8c\061\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\107\237\117\uff8c\001\002\000\020\003\uff8c\061\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\107\237\117\uff8c\001\002\000\016" +
    "\003\uff8e\061\uff8e\071\uff8e\072\uff8e\073\uff8e\117\uff8e\001" +
    "\002\000\016\003\uff8d\061\uff8d\071\uff8d\072\uff8d\073\uff8d" +
    "\117\uff8d\001\002\000\006\033\247\034\uff7e\001\002\000" +
    "\004\034\uff88\001\002\000\010\003\uff7c\034\uff7c\102\uff7c" +
    "\001\002\000\010\003\uff7f\034\uff7f\102\207\001\002\000" +
    "\042\003\166\004\155\005\161\010\103\011\127\012\070" +
    "\020\123\021\121\022\067\034\162\035\160\036\154\075" +
    "\165\104\151\123\157\124\164\001\002\000\042\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\075\165\104\151" +
    "\123\157\124\164\001\002\000\074\002\uffbe\003\uffbe\006" +
    "\uffbe\023\uffbe\024\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\067\uffbe\070\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\103\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe" +
    "\111\uffbe\112\uffbe\113\uffbe\114\uffbe\116\uffbe\117\uffbe\121" +
    "\uffbe\001\002\000\022\003\256\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\107\255\001\002\000\042\003" +
    "\166\004\155\005\161\010\103\011\127\012\070\020\123" +
    "\021\121\022\067\034\162\035\160\036\154\075\165\104" +
    "\151\123\157\124\164\001\002\000\042\003\166\004\155" +
    "\005\161\010\103\011\127\012\070\020\123\021\121\022" +
    "\067\034\162\035\160\036\154\075\165\104\151\123\157" +
    "\124\164\001\002\000\020\074\173\075\174\076\177\077" +
    "\175\100\172\101\171\105\260\001\002\000\074\002\uffcf" +
    "\003\uffcf\006\uffcf\023\uffcf\024\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\067\uffcf\070\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\103\uffcf\105\uffcf\106\uffcf\107" +
    "\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\116\uffcf" +
    "\117\uffcf\121\uffcf\001\002\000\022\003\262\074\173\075" +
    "\174\076\177\077\175\100\172\101\171\105\263\001\002" +
    "\000\074\002\uffce\003\uffce\006\uffce\023\uffce\024\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\067\uffce\070\uffce\074\uffce" +
    "\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\103\uffce\105" +
    "\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113\uffce" +
    "\114\uffce\116\uffce\117\uffce\121\uffce\001\002\000\074\002" +
    "\uffd0\003\uffd0\006\uffd0\023\uffd0\024\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\067\uffd0\070\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\103\uffd0\105\uffd0\106\uffd0" +
    "\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\114\uffd0\116" +
    "\uffd0\117\uffd0\121\uffd0\001\002\000\074\002\uffbd\003\uffbd" +
    "\006\uffbd\023\uffbd\024\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\067\uffbd\070\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\100\uffbd\101\uffbd\103\uffbd\105\uffbd\106\uffbd\107\uffbd\110" +
    "\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\116\uffbd\117\uffbd" +
    "\121\uffbd\001\002\000\020\002\uff1d\003\uff1d\006\uff1d\023" +
    "\uff1d\024\uff1d\116\uff1d\117\uff1d\001\002\000\020\002\uff1e" +
    "\003\uff1e\006\uff1e\023\uff1e\024\uff1e\116\uff1e\117\uff1e\001" +
    "\002\000\004\002\uffed\001\002\000\046\003\166\004\155" +
    "\005\161\010\103\011\127\012\070\020\123\021\121\022" +
    "\067\034\162\035\160\036\154\066\275\075\165\104\272" +
    "\115\273\123\157\124\164\001\002\000\046\003\166\004" +
    "\155\005\161\010\103\011\127\012\070\020\123\021\121" +
    "\022\067\034\162\035\160\036\154\066\275\075\165\104" +
    "\272\115\273\123\157\124\164\001\002\000\046\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\066\275\075\165" +
    "\104\272\115\273\123\157\124\164\001\002\000\046\003" +
    "\166\004\155\005\161\010\103\011\127\012\070\020\123" +
    "\021\121\022\067\034\162\035\160\036\154\066\275\075" +
    "\165\104\272\115\273\123\157\124\164\001\002\000\022" +
    "\003\uff4c\105\uff4c\106\uff4c\110\uff4c\111\uff4c\112\uff4c\113" +
    "\uff4c\114\uff4c\001\002\000\046\003\166\004\155\005\161" +
    "\010\103\011\127\012\070\020\123\021\121\022\067\034" +
    "\162\035\160\036\154\066\275\075\165\104\272\115\273" +
    "\123\157\124\164\001\002\000\052\003\uff45\062\322\063" +
    "\321\064\323\065\320\067\317\070\316\074\173\075\174" +
    "\076\177\077\175\100\172\101\171\105\uff45\106\uff45\110" +
    "\uff45\111\uff45\112\uff45\113\uff45\114\uff45\001\002\000\006" +
    "\003\314\117\315\001\002\000\016\105\304\110\301\111" +
    "\302\112\303\113\306\114\305\001\002\000\046\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\066\275\075\165" +
    "\104\272\115\273\123\157\124\164\001\002\000\046\003" +
    "\166\004\155\005\161\010\103\011\127\012\070\020\123" +
    "\021\121\022\067\034\162\035\160\036\154\066\275\075" +
    "\165\104\272\115\273\123\157\124\164\001\002\000\046" +
    "\003\166\004\155\005\161\010\103\011\127\012\070\020" +
    "\123\021\121\022\067\034\162\035\160\036\154\066\275" +
    "\075\165\104\272\115\273\123\157\124\164\001\002\000" +
    "\006\003\uff55\117\uff55\001\002\000\046\003\166\004\155" +
    "\005\161\010\103\011\127\012\070\020\123\021\121\022" +
    "\067\034\162\035\160\036\154\066\275\075\165\104\272" +
    "\115\273\123\157\124\164\001\002\000\046\003\166\004" +
    "\155\005\161\010\103\011\127\012\070\020\123\021\121" +
    "\022\067\034\162\035\160\036\154\066\275\075\165\104" +
    "\272\115\273\123\157\124\164\001\002\000\022\003\uff52" +
    "\105\uff52\106\uff52\110\uff52\111\uff52\112\uff52\113\uff52\114" +
    "\uff52\001\002\000\022\003\uff50\105\uff50\106\uff50\110\uff50" +
    "\111\uff50\112\uff50\113\uff50\114\uff50\001\002\000\022\003" +
    "\uff51\105\uff51\106\uff51\110\uff51\111\uff51\112\uff51\113\uff51" +
    "\114\uff51\001\002\000\022\003\uff54\105\uff54\106\uff54\110" +
    "\uff54\111\uff54\112\303\113\306\114\305\001\002\000\022" +
    "\003\uff53\105\uff53\106\uff53\110\uff53\111\uff53\112\303\113" +
    "\306\114\305\001\002\000\020\002\uff1f\003\uff1f\006\uff1f" +
    "\023\uff1f\024\uff1f\116\uff1f\117\uff1f\001\002\000\020\002" +
    "\uff21\003\uff21\006\uff21\023\uff21\024\uff21\116\uff21\117\uff21" +
    "\001\002\000\042\003\166\004\155\005\161\010\103\011" +
    "\127\012\070\020\123\021\121\022\067\034\162\035\160" +
    "\036\154\075\165\104\151\123\157\124\164\001\002\000" +
    "\042\003\166\004\155\005\161\010\103\011\127\012\070" +
    "\020\123\021\121\022\067\034\162\035\160\036\154\075" +
    "\165\104\151\123\157\124\164\001\002\000\042\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\075\165\104\151" +
    "\123\157\124\164\001\002\000\042\003\166\004\155\005" +
    "\161\010\103\011\127\012\070\020\123\021\121\022\067" +
    "\034\162\035\160\036\154\075\165\104\151\123\157\124" +
    "\164\001\002\000\042\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\123\157\124\164\001\002" +
    "\000\042\003\166\004\155\005\161\010\103\011\127\012" +
    "\070\020\123\021\121\022\067\034\162\035\160\036\154" +
    "\075\165\104\151\123\157\124\164\001\002\000\036\003" +
    "\uff48\074\173\075\174\076\177\077\175\100\172\101\171" +
    "\105\uff48\106\uff48\110\uff48\111\uff48\112\uff48\113\uff48\114" +
    "\uff48\001\002\000\036\003\uff4b\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\105\uff4b\106\uff4b\110\uff4b\111" +
    "\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002\000\036\003\uff4a" +
    "\074\173\075\174\076\177\077\175\100\172\101\171\105" +
    "\uff4a\106\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a" +
    "\001\002\000\036\003\uff46\074\173\075\174\076\177\077" +
    "\175\100\172\101\171\105\uff46\106\uff46\110\uff46\111\uff46" +
    "\112\uff46\113\uff46\114\uff46\001\002\000\036\003\uff49\074" +
    "\173\075\174\076\177\077\175\100\172\101\171\105\uff49" +
    "\106\uff49\110\uff49\111\uff49\112\uff49\113\uff49\114\uff49\001" +
    "\002\000\036\003\uff47\074\173\075\174\076\177\077\175" +
    "\100\172\101\171\105\uff47\106\uff47\110\uff47\111\uff47\112" +
    "\uff47\113\uff47\114\uff47\001\002\000\022\003\uff4e\105\uff4e" +
    "\106\uff4e\110\301\111\302\112\303\113\306\114\305\001" +
    "\002\000\022\003\uff4d\105\uff4d\106\uff4d\110\301\111\302" +
    "\112\303\113\306\114\305\001\002\000\046\062\322\063" +
    "\321\064\323\065\320\067\317\070\316\074\173\075\174" +
    "\076\177\077\175\100\172\101\171\105\235\110\uff45\111" +
    "\uff45\112\uff45\113\uff45\114\uff45\001\002\000\016\105\336" +
    "\110\301\111\302\112\303\113\306\114\305\001\002\000" +
    "\022\003\uff4f\105\uff4f\106\uff4f\110\uff4f\111\uff4f\112\uff4f" +
    "\113\uff4f\114\uff4f\001\002\000\004\117\340\001\002\000" +
    "\020\002\uff20\003\uff20\006\uff20\023\uff20\024\uff20\116\uff20" +
    "\117\uff20\001\002\000\042\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\075\165\104\151\123\157\124\164\001" +
    "\002\000\042\003\166\004\155\005\161\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\034\162\035\160\036" +
    "\154\075\165\104\151\123\157\124\164\001\002\000\074" +
    "\002\uffc2\003\uffc2\006\uffc2\023\uffc2\024\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\067\uffc2\070\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\100\uffc2\101\uffc2\103\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\116\uffc2\117\uffc2\121\uffc2\001\002\000\022\003\345\074" +
    "\173\075\174\076\177\077\175\100\172\101\171\105\346" +
    "\001\002\000\074\002\uffcc\003\uffcc\006\uffcc\023\uffcc\024" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\103" +
    "\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc" +
    "\113\uffcc\114\uffcc\116\uffcc\117\uffcc\121\uffcc\001\002\000" +
    "\074\002\uffcd\003\uffcd\006\uffcd\023\uffcd\024\uffcd\062\uffcd" +
    "\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\103\uffcd\105\uffcd" +
    "\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\114" +
    "\uffcd\116\uffcd\117\uffcd\121\uffcd\001\002\000\074\002\uffc1" +
    "\003\uffc1\006\uffc1\023\uffc1\024\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\067\uffc1\070\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\100\uffc1\101\uffc1\103\uffc1\105\uffc1\106\uffc1\107" +
    "\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\114\uffc1\116\uffc1" +
    "\117\uffc1\121\uffc1\001\002\000\004\002\uffef\001\002\000" +
    "\042\003\166\004\155\005\161\010\103\011\127\012\070" +
    "\020\123\021\121\022\067\034\162\035\160\036\154\075" +
    "\165\104\151\123\157\124\164\001\002\000\042\003\166" +
    "\004\155\005\161\010\103\011\127\012\070\020\123\021" +
    "\121\022\067\034\162\035\160\036\154\075\165\104\151" +
    "\123\157\124\164\001\002\000\074\002\uffc0\003\uffc0\006" +
    "\uffc0\023\uffc0\024\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\067\uffc0\070\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\103\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\113\uffc0\114\uffc0\116\uffc0\117\uffc0\121" +
    "\uffc0\001\002\000\022\003\355\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\105\356\001\002\000\074\002" +
    "\uffca\003\uffca\006\uffca\023\uffca\024\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\067\uffca\070\uffca\074\uffca\075\uffca\076" +
    "\uffca\077\uffca\100\uffca\101\uffca\103\uffca\105\uffca\106\uffca" +
    "\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca\116" +
    "\uffca\117\uffca\121\uffca\001\002\000\074\002\uffcb\003\uffcb" +
    "\006\uffcb\023\uffcb\024\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\067\uffcb\070\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\103\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\113\uffcb\114\uffcb\116\uffcb\117\uffcb" +
    "\121\uffcb\001\002\000\074\002\uffbf\003\uffbf\006\uffbf\023" +
    "\uffbf\024\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf" +
    "\070\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\103\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\114\uffbf\116\uffbf\117\uffbf\121\uffbf\001" +
    "\002\000\004\002\ufff0\001\002\000\022\002\uff56\003\uff56" +
    "\006\uff56\023\uff56\024\uff56\104\373\116\uff56\117\uff56\001" +
    "\002\000\006\003\364\104\365\001\002\000\020\002\uff57" +
    "\003\uff57\006\uff57\023\uff57\024\uff57\116\uff57\117\uff57\001" +
    "\002\000\046\003\166\004\155\005\161\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\034\162\035\160\036" +
    "\154\066\275\075\165\104\272\115\273\123\157\124\164" +
    "\001\002\000\046\003\166\004\155\005\161\010\103\011" +
    "\127\012\070\020\123\021\121\022\067\034\162\035\160" +
    "\036\154\066\275\075\165\104\272\115\273\123\157\124" +
    "\164\001\002\000\006\003\367\117\370\001\002\000\020" +
    "\002\uff58\003\uff58\006\uff58\023\uff58\024\uff58\116\uff58\117" +
    "\uff58\001\002\000\020\002\uff5b\003\uff5b\006\uff5b\023\uff5b" +
    "\024\uff5b\116\uff5b\117\uff5b\001\002\000\004\117\372\001" +
    "\002\000\020\002\uff59\003\uff59\006\uff59\023\uff59\024\uff59" +
    "\116\uff59\117\uff59\001\002\000\046\003\166\004\155\005" +
    "\161\010\103\011\127\012\070\020\123\021\121\022\067" +
    "\034\162\035\160\036\154\066\275\075\165\104\272\115" +
    "\273\123\157\124\164\001\002\000\004\117\375\001\002" +
    "\000\020\002\uff5a\003\uff5a\006\uff5a\023\uff5a\024\uff5a\116" +
    "\uff5a\117\uff5a\001\002\000\004\002\uffec\001\002\000\004" +
    "\002\uffee\001\002\000\042\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\075\165\104\151\123\157\124\164\001" +
    "\002\000\042\003\166\004\155\005\161\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\034\162\035\160\036" +
    "\154\075\165\104\151\123\157\124\164\001\002\000\022" +
    "\003\u0103\074\173\075\174\076\177\077\175\100\172\101" +
    "\171\105\u0104\001\002\000\004\117\u0141\001\002\000\006" +
    "\003\u0105\117\u0106\001\002\000\010\003\u0107\116\014\117" +
    "\u010a\001\002\000\010\003\u0107\116\014\117\u010a\001\002" +
    "\000\010\003\u0107\116\014\117\u010a\001\002\000\010\003" +
    "\u010c\041\u010d\043\u010b\001\002\000\020\002\uff35\003\uff35" +
    "\006\uff35\023\uff35\024\uff35\116\uff35\117\uff35\001\002\000" +
    "\020\002\uff2b\003\uff2b\006\uff2b\023\uff2b\024\uff2b\116\uff2b" +
    "\117\uff2b\001\002\000\044\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\075\165\104\151\117\u013c\123\157\124" +
    "\164\001\002\000\042\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\123\157\124\164\001\002" +
    "\000\042\003\166\004\155\005\161\010\103\011\127\012" +
    "\070\020\123\021\121\022\067\034\162\035\160\036\154" +
    "\075\165\104\151\123\157\124\164\001\002\000\022\003" +
    "\u010f\074\173\075\174\076\177\077\175\100\172\101\171" +
    "\117\u0110\001\002\000\010\003\u0112\116\014\117\u0114\001" +
    "\002\000\010\003\u0112\116\014\117\u0114\001\002\000\010" +
    "\003\u0107\116\014\117\u010a\001\002\000\010\003\u0112\116" +
    "\014\117\u0114\001\002\000\052\003\u0121\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\024\u0118\025\133\034" +
    "\071\037\117\040\113\042\u0116\044\076\045\124\046\126" +
    "\047\u0117\060\073\117\u011a\122\u0120\001\002\000\010\003" +
    "\u0112\116\014\117\u0114\001\002\000\010\003\uff39\116\uff39" +
    "\117\uff39\001\002\000\010\003\uff38\116\uff38\117\uff38\001" +
    "\002\000\042\003\166\004\155\005\161\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\034\162\035\160\036" +
    "\154\075\165\104\151\123\157\124\164\001\002\000\006" +
    "\003\u0131\025\u0130\001\002\000\010\003\u0112\116\014\117" +
    "\u0114\001\002\000\010\003\u0112\116\014\117\u0114\001\002" +
    "\000\010\003\u0112\116\014\117\u0114\001\002\000\010\003" +
    "\u0112\116\014\117\u0114\001\002\000\010\003\u0112\116\014" +
    "\117\u0114\001\002\000\010\003\u0112\116\014\117\u0114\001" +
    "\002\000\010\003\u0112\116\014\117\u0114\001\002\000\042" +
    "\003\166\004\155\005\161\010\103\011\127\012\070\020" +
    "\123\021\121\022\067\034\162\035\160\036\154\075\165" +
    "\104\151\123\157\124\164\001\002\000\010\003\u0112\116" +
    "\014\117\u0114\001\002\000\010\003\u0112\116\014\117\u0114" +
    "\001\002\000\010\003\u0112\116\014\117\u0114\001\002\000" +
    "\010\003\uff3d\116\uff3d\117\uff3d\001\002\000\010\003\uff41" +
    "\116\uff41\117\uff41\001\002\000\010\003\uff36\116\uff36\117" +
    "\uff36\001\002\000\024\003\u0112\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\116\014\117\u0114\001\002\000" +
    "\010\003\uff3c\116\uff3c\117\uff3c\001\002\000\010\003\uff43" +
    "\116\uff43\117\uff43\001\002\000\010\003\uff40\116\uff40\117" +
    "\uff40\001\002\000\010\003\uff3e\116\uff3e\117\uff3e\001\002" +
    "\000\010\003\uff42\116\uff42\117\uff42\001\002\000\010\003" +
    "\uff3f\116\uff3f\117\uff3f\001\002\000\010\003\uff3a\116\uff3a" +
    "\117\uff3a\001\002\000\010\003\uff44\116\uff44\117\uff44\001" +
    "\002\000\014\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\001\002\000\014\026\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\001\002\000\024\003\u0112\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\116\014\117\u0114\001\002\000" +
    "\010\003\uff3b\116\uff3b\117\uff3b\001\002\000\010\003\uff37" +
    "\116\uff37\117\uff37\001\002\000\020\002\uff31\003\uff31\006" +
    "\uff31\023\uff31\024\uff31\116\uff31\117\uff31\001\002\000\010" +
    "\003\u0107\116\014\117\u010a\001\002\000\020\002\uff2f\003" +
    "\uff2f\006\uff2f\023\uff2f\024\uff2f\116\uff2f\117\uff2f\001\002" +
    "\000\020\074\173\075\174\076\177\077\175\100\172\101" +
    "\171\117\u0139\001\002\000\010\003\u0112\116\014\117\u0114" +
    "\001\002\000\010\003\u0107\116\014\117\u010a\001\002\000" +
    "\020\002\uff30\003\uff30\006\uff30\023\uff30\024\uff30\116\uff30" +
    "\117\uff30\001\002\000\020\002\uff2e\003\uff2e\006\uff2e\023" +
    "\uff2e\024\uff2e\116\uff2e\117\uff2e\001\002\000\020\003\u013e" +
    "\074\173\075\174\076\177\077\175\100\172\101\171\001" +
    "\002\000\020\002\uff2d\003\uff2d\006\uff2d\023\uff2d\024\uff2d" +
    "\116\uff2d\117\uff2d\001\002\000\020\002\uff2c\003\uff2c\006" +
    "\uff2c\023\uff2c\024\uff2c\116\uff2c\117\uff2c\001\002\000\020" +
    "\002\uff32\003\uff32\006\uff32\023\uff32\024\uff32\116\uff32\117" +
    "\uff32\001\002\000\010\003\u0107\116\014\117\u010a\001\002" +
    "\000\020\002\uff33\003\uff33\006\uff33\023\uff33\024\uff33\116" +
    "\uff33\117\uff33\001\002\000\020\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\105\u0144\001\002\000\004\117" +
    "\u0145\001\002\000\010\003\u0107\116\014\117\u010a\001\002" +
    "\000\020\002\uff34\003\uff34\006\uff34\023\uff34\024\uff34\116" +
    "\uff34\117\uff34\001\002\000\004\002\ufff3\001\002\000\032" +
    "\002\uffe6\006\016\023\uffff\024\015\074\173\075\174\076" +
    "\177\077\175\100\172\101\171\116\014\117\013\001\002" +
    "\000\004\002\uffea\001\002\000\006\003\uffb1\034\uffb1\001" +
    "\002\000\026\003\u0152\050\u0153\051\u014f\052\u0156\053\u0151" +
    "\054\u014d\055\u0155\056\u014e\057\u0154\060\u0158\001\002\000" +
    "\026\003\u0152\050\u0153\051\u014f\052\u0156\053\u0151\054\u014d" +
    "\055\u0155\056\u014e\057\u0154\060\u0158\001\002\000\006\003" +
    "\uffe3\107\uffe3\001\002\000\006\003\uffe1\107\uffe1\001\002" +
    "\000\006\003\uffdd\107\uffdd\001\002\000\074\002\uffc4\003" +
    "\uffc4\006\uffc4\023\uffc4\024\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\067\uffc4\070\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\103\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\116\uffc4\117" +
    "\uffc4\121\uffc4\001\002\000\006\003\uffe4\107\uffe4\001\002" +
    "\000\006\003\uffdc\107\uffdc\001\002\000\006\003\uffde\107" +
    "\uffde\001\002\000\006\003\uffe0\107\uffe0\001\002\000\006" +
    "\003\uffe2\107\uffe2\001\002\000\006\003\uffe5\107\uffe5\001" +
    "\002\000\006\003\u015a\107\u0159\001\002\000\006\003\uffdf" +
    "\107\uffdf\001\002\000\042\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\075\165\104\151\123\157\124\164\001" +
    "\002\000\042\003\166\004\155\005\161\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\034\162\035\160\036" +
    "\154\075\165\104\151\123\157\124\164\001\002\000\020" +
    "\074\173\075\174\076\177\077\175\100\172\101\171\107" +
    "\u015c\001\002\000\042\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\123\157\124\164\001\002" +
    "\000\020\074\173\075\174\076\177\077\175\100\172\101" +
    "\171\107\u015e\001\002\000\042\003\166\004\155\005\161" +
    "\010\103\011\127\012\070\020\123\021\121\022\067\034" +
    "\162\035\160\036\154\075\165\104\151\123\157\124\164" +
    "\001\002\000\020\074\173\075\174\076\177\077\175\100" +
    "\172\101\171\105\u0160\001\002\000\074\002\uffd4\003\uffd4" +
    "\006\uffd4\023\uffd4\024\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\067\uffd4\070\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\103\uffd4\105\uffd4\106\uffd4\107\uffd4\110" +
    "\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4\116\uffd4\117\uffd4" +
    "\121\uffd4\001\002\000\022\003\u0163\074\173\075\174\076" +
    "\177\077\175\100\172\101\171\107\u0162\001\002\000\042" +
    "\003\166\004\155\005\161\010\103\011\127\012\070\020" +
    "\123\021\121\022\067\034\162\035\160\036\154\075\165" +
    "\104\151\123\157\124\164\001\002\000\042\003\166\004" +
    "\155\005\161\010\103\011\127\012\070\020\123\021\121" +
    "\022\067\034\162\035\160\036\154\075\165\104\151\123" +
    "\157\124\164\001\002\000\020\074\173\075\174\076\177" +
    "\077\175\100\172\101\171\107\u0165\001\002\000\042\003" +
    "\166\004\155\005\161\010\103\011\127\012\070\020\123" +
    "\021\121\022\067\034\162\035\160\036\154\075\165\104" +
    "\151\123\157\124\164\001\002\000\020\074\173\075\174" +
    "\076\177\077\175\100\172\101\171\105\u0167\001\002\000" +
    "\074\002\uffd3\003\uffd3\006\uffd3\023\uffd3\024\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\067\uffd3\070\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\103\uffd3\105\uffd3" +
    "\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114" +
    "\uffd3\116\uffd3\117\uffd3\121\uffd3\001\002\000\022\003\u016a" +
    "\074\173\075\174\076\177\077\175\100\172\101\171\107" +
    "\u0169\001\002\000\042\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\075\165\104\151\123\157\124\164\001\002" +
    "\000\042\003\166\004\155\005\161\010\103\011\127\012" +
    "\070\020\123\021\121\022\067\034\162\035\160\036\154" +
    "\075\165\104\151\123\157\124\164\001\002\000\020\074" +
    "\173\075\174\076\177\077\175\100\172\101\171\105\u016c" +
    "\001\002\000\074\002\uffd2\003\uffd2\006\uffd2\023\uffd2\024" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\070\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\103" +
    "\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\113\uffd2\114\uffd2\116\uffd2\117\uffd2\121\uffd2\001\002\000" +
    "\022\003\u016e\074\173\075\174\076\177\077\175\100\172" +
    "\101\171\105\u016f\001\002\000\074\002\uffd1\003\uffd1\006" +
    "\uffd1\023\uffd1\024\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\067\uffd1\070\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100" +
    "\uffd1\101\uffd1\103\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1" +
    "\111\uffd1\112\uffd1\113\uffd1\114\uffd1\116\uffd1\117\uffd1\121" +
    "\uffd1\001\002\000\074\002\uffd5\003\uffd5\006\uffd5\023\uffd5" +
    "\024\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\067\uffd5\070" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\103\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112" +
    "\uffd5\113\uffd5\114\uffd5\116\uffd5\117\uffd5\121\uffd5\001\002" +
    "\000\074\002\uffc3\003\uffc3\006\uffc3\023\uffc3\024\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\103\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3" +
    "\114\uffc3\116\uffc3\117\uffc3\121\uffc3\001\002\000\006\003" +
    "\uffb8\034\uffb8\001\002\000\020\002\uff95\003\uff95\006\uff95" +
    "\023\uff95\024\uff95\116\uff95\117\uff95\001\002\000\010\024" +
    "\u0118\025\133\034\u0178\001\002\000\010\024\u0118\025\133" +
    "\034\u0178\001\002\000\006\003\u0185\106\u0186\001\002\000" +
    "\006\003\u0183\117\u0184\001\002\000\004\034\u0181\001\002" +
    "\000\014\003\141\061\137\071\147\072\146\073\145\001" +
    "\002\000\044\003\166\004\155\005\161\010\103\011\127" +
    "\012\070\020\123\021\121\022\067\034\162\035\160\036" +
    "\154\075\165\104\151\120\153\123\157\124\164\001\002" +
    "\000\004\106\u017c\001\002\000\006\003\uff9a\106\uff9a\001" +
    "\002\000\006\003\uff97\106\uff97\001\002\000\004\106\u0180" +
    "\001\002\000\020\074\173\075\174\076\177\077\175\100" +
    "\172\101\171\106\u017f\001\002\000\006\003\uff99\106\uff99" +
    "\001\002\000\006\003\uff98\106\uff98\001\002\000\014\003" +
    "\141\061\137\071\147\072\146\073\145\001\002\000\006" +
    "\003\uff9b\106\uff9b\001\002\000\020\002\uff28\003\uff28\006" +
    "\uff28\023\uff28\024\uff28\116\uff28\117\uff28\001\002\000\020" +
    "\002\uff2a\003\uff2a\006\uff2a\023\uff2a\024\uff2a\116\uff2a\117" +
    "\uff2a\001\002\000\046\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\066\275\075\165\104\272\115\273\123\157" +
    "\124\164\001\002\000\046\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\066\275\075\165\104\272\115\273\123" +
    "\157\124\164\001\002\000\006\003\uff27\117\uff27\001\002" +
    "\000\020\003\u0189\106\u018a\110\301\111\302\112\303\113" +
    "\306\114\305\001\002\000\004\034\u018c\001\002\000\004" +
    "\034\u018c\001\002\000\006\003\u0191\105\u0192\001\002\000" +
    "\010\003\u018e\072\146\073\145\001\002\000\006\003\uff25" +
    "\117\uff25\001\002\000\004\117\uff9c\001\002\000\004\117" +
    "\u0190\001\002\000\006\003\uff9f\105\uff9f\001\002\000\006" +
    "\003\uff22\117\uff22\001\002\000\006\003\uff23\117\uff23\001" +
    "\002\000\006\003\uff24\117\uff24\001\002\000\006\003\uff26" +
    "\117\uff26\001\002\000\004\117\u0196\001\002\000\020\002" +
    "\uff29\003\uff29\006\uff29\023\uff29\024\uff29\116\uff29\117\uff29" +
    "\001\002\000\032\002\uffe6\006\016\023\uffff\024\015\074" +
    "\173\075\174\076\177\077\175\100\172\101\171\116\014" +
    "\117\013\001\002\000\004\002\uffe9\001\002\000\004\002" +
    "\ufff1\001\002\000\046\003\166\004\155\005\161\010\103" +
    "\011\127\012\070\020\123\021\121\022\067\034\162\035" +
    "\160\036\154\066\275\075\165\104\272\115\273\123\157" +
    "\124\164\001\002\000\046\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\066\275\075\165\104\272\115\273\123" +
    "\157\124\164\001\002\000\006\003\u019d\117\u019e\001\002" +
    "\000\020\002\uff5c\003\uff5c\006\uff5c\023\uff5c\024\uff5c\116" +
    "\uff5c\117\uff5c\001\002\000\020\002\uff5e\003\uff5e\006\uff5e" +
    "\023\uff5e\024\uff5e\116\uff5e\117\uff5e\001\002\000\004\117" +
    "\u01a0\001\002\000\020\002\uff5d\003\uff5d\006\uff5d\023\uff5d" +
    "\024\uff5d\116\uff5d\117\uff5d\001\002\000\016\026\072\027" +
    "\112\030\102\031\077\032\107\105\u01a2\001\002\000\006" +
    "\003\uffaf\117\uffaf\001\002\000\006\003\u01af\034\u01b0\001" +
    "\002\000\010\003\u01a8\105\u01a9\107\u01a7\001\002\000\004" +
    "\117\u01a6\001\002\000\020\002\uffa9\003\uffa9\006\uffa9\023" +
    "\uffa9\024\uffa9\116\uffa9\117\uffa9\001\002\000\014\026\072" +
    "\027\112\030\102\031\077\032\107\001\002\000\014\026" +
    "\072\027\112\030\102\031\077\032\107\001\002\000\006" +
    "\003\uffac\117\uffac\001\002\000\006\003\uffb0\117\uffb0\001" +
    "\002\000\010\003\u01a8\105\u01a9\107\u01a7\001\002\000\006" +
    "\003\uffad\117\uffad\001\002\000\010\003\u01a8\105\u01a9\107" +
    "\u01a7\001\002\000\006\003\uffae\117\uffae\001\002\000\010" +
    "\003\uffaa\105\uffaa\107\uffaa\001\002\000\010\003\uffab\105" +
    "\uffab\107\uffab\001\002\000\042\003\166\004\155\005\161" +
    "\010\103\011\127\012\070\020\123\021\121\022\067\034" +
    "\162\035\160\036\154\075\165\104\151\123\157\124\164" +
    "\001\002\000\042\003\166\004\155\005\161\010\103\011" +
    "\127\012\070\020\123\021\121\022\067\034\162\035\160" +
    "\036\154\075\165\104\151\123\157\124\164\001\002\000" +
    "\074\002\uffba\003\uffba\006\uffba\023\uffba\024\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\067\uffba\070\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\103\uffba\105\uffba" +
    "\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114" +
    "\uffba\116\uffba\117\uffba\121\uffba\001\002\000\022\003\u01b6" +
    "\074\173\075\174\076\177\077\175\100\172\101\171\107" +
    "\u01b5\001\002\000\016\003\u01ba\013\u01b8\014\u01bc\015\u01b7" +
    "\016\u01bd\017\u01bb\001\002\000\016\003\u01ba\013\u01b8\014" +
    "\u01bc\015\u01b7\016\u01bd\017\u01bb\001\002\000\006\003\uffd9" +
    "\105\uffd9\001\002\000\006\003\uffdb\105\uffdb\001\002\000" +
    "\004\105\u01be\001\002\000\006\003\uffd6\105\uffd6\001\002" +
    "\000\006\003\uffd7\105\uffd7\001\002\000\006\003\uffda\105" +
    "\uffda\001\002\000\006\003\uffd8\105\uffd8\001\002\000\074" +
    "\002\uffc6\003\uffc6\006\uffc6\023\uffc6\024\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\101\uffc6\103\uffc6\105\uffc6\106" +
    "\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6" +
    "\116\uffc6\117\uffc6\121\uffc6\001\002\000\006\003\u01c0\105" +
    "\u01c1\001\002\000\074\002\uffc5\003\uffc5\006\uffc5\023\uffc5" +
    "\024\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\067\uffc5\070" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\103\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\113\uffc5\114\uffc5\116\uffc5\117\uffc5\121\uffc5\001\002" +
    "\000\074\002\uffc7\003\uffc7\006\uffc7\023\uffc7\024\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7\070\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\103\uffc7\105" +
    "\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7" +
    "\114\uffc7\116\uffc7\117\uffc7\121\uffc7\001\002\000\074\002" +
    "\uffb9\003\uffb9\006\uffb9\023\uffb9\024\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\067\uffb9\070\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\103\uffb9\105\uffb9\106\uffb9" +
    "\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\116" +
    "\uffb9\117\uffb9\121\uffb9\001\002\000\042\003\166\004\155" +
    "\005\161\010\103\011\127\012\070\020\123\021\121\022" +
    "\067\034\162\035\160\036\154\075\165\104\151\123\157" +
    "\124\164\001\002\000\042\003\166\004\155\005\161\010" +
    "\103\011\127\012\070\020\123\021\121\022\067\034\162" +
    "\035\160\036\154\075\165\104\151\123\157\124\164\001" +
    "\002\000\022\003\u01c7\074\173\075\174\076\177\077\175" +
    "\100\172\101\171\105\u01c8\001\002\000\074\002\uffbc\003" +
    "\uffbc\006\uffbc\023\uffbc\024\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\067\uffbc\070\uffbc\074\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\100\uffbc\101\uffbc\103\uffbc\105\uffbc\106\uffbc\107\uffbc" +
    "\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\116\uffbc\117" +
    "\uffbc\121\uffbc\001\002\000\074\002\uffc8\003\uffc8\006\uffc8" +
    "\023\uffc8\024\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\103\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\112\uffc8\113\uffc8\114\uffc8\116\uffc8\117\uffc8\121\uffc8" +
    "\001\002\000\074\002\uffc9\003\uffc9\006\uffc9\023\uffc9\024" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\067\uffc9\070\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\103" +
    "\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9" +
    "\113\uffc9\114\uffc9\116\uffc9\117\uffc9\121\uffc9\001\002\000" +
    "\074\002\uffbb\003\uffbb\006\uffbb\023\uffbb\024\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\067\uffbb\070\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\103\uffbb\105\uffbb" +
    "\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114" +
    "\uffbb\116\uffbb\117\uffbb\121\uffbb\001\002\000\004\002\uffeb" +
    "\001\002\000\004\002\ufff2\001\002\000\004\104\u01d5\001" +
    "\002\000\006\003\u01ce\104\u01cf\001\002\000\016\026\072" +
    "\027\112\030\102\031\077\032\107\105\u01a2\001\002\000" +
    "\016\026\072\027\112\030\102\031\077\032\107\105\u01a2" +
    "\001\002\000\006\003\u01d1\117\u01d2\001\002\000\016\002" +
    "\uffb2\006\uffb2\023\uffb2\024\uffb2\116\uffb2\117\uffb2\001\002" +
    "\000\016\002\uffb5\006\uffb5\023\uffb5\024\uffb5\116\uffb5\117" +
    "\uffb5\001\002\000\004\117\u01d4\001\002\000\016\002\uffb3" +
    "\006\uffb3\023\uffb3\024\uffb3\116\uffb3\117\uffb3\001\002\000" +
    "\016\026\072\027\112\030\102\031\077\032\107\105\u01a2" +
    "\001\002\000\004\117\u01d7\001\002\000\016\002\uffb4\006" +
    "\uffb4\023\uffb4\024\uffb4\116\uffb4\117\uffb4\001\002\000\004" +
    "\002\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d6\000\016\007\006\041\004\050\010\051\005\066" +
    "\007\067\003\001\001\000\002\001\001\000\046\031\133" +
    "\032\131\033\063\034\077\040\127\043\104\046\064\047" +
    "\110\052\073\053\117\054\121\055\113\056\124\057\114" +
    "\060\065\075\115\076\105\077\130\001\001\000\014\007" +
    "\006\041\004\050\010\051\005\067\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\006\041\004\050" +
    "\010\051\005\067\045\001\001\000\016\007\006\041\004" +
    "\050\010\051\005\066\044\067\003\001\001\000\014\007" +
    "\006\041\004\050\010\051\005\067\043\001\001\000\004" +
    "\042\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\037\001\001\000\004\024\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\032\001\001\000\002\001\001\000\004\025\036\001\001" +
    "\000\004\025\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\006\041\004\050\010\051\005\067\u01d7" +
    "\001\001\000\002\001\001\000\014\007\006\041\004\050" +
    "\010\051\005\067\u01ca\001\001\000\014\007\006\041\004" +
    "\050\010\051\005\067\u01c9\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\006\041\004\050\010\051" +
    "\005\067\u0198\001\001\000\006\052\151\072\u0196\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u0171\044" +
    "\143\045\142\001\001\000\006\032\u0170\043\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0149\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\151\072\u0147\001\001\000\014\007\006\041" +
    "\004\050\010\051\005\067\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\006\041\004\050\010\051" +
    "\005\067\376\001\001\000\014\007\006\041\004\050\010" +
    "\051\005\067\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\006\041\004\050\010\051\005\067\357" +
    "\001\001\000\002\001\001\000\014\007\006\041\004\050" +
    "\010\051\005\067\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\006\041\004\050\010\051\005\067" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\135\001\001\000\004\035\237" +
    "\001\001\000\012\017\147\020\137\044\143\045\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\155\052" +
    "\151\072\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\151\072" +
    "\233\001\001\000\002\001\001\000\012\004\215\005\213" +
    "\052\151\072\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\151\072" +
    "\204\001\001\000\006\052\151\072\203\001\001\000\006" +
    "\052\151\072\202\001\001\000\006\052\151\072\201\001" +
    "\001\000\006\052\151\072\200\001\001\000\002\001\001" +
    "\000\006\052\151\072\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\151\072\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\230\052\151\072\214\001" +
    "\001\000\002\001\001\000\004\006\224\001\001\000\004" +
    "\002\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\221\005\213\052\151\072\214\001\001\000\004" +
    "\002\222\001\001\000\002\001\001\000\006\052\151\072" +
    "\225\001\001\000\002\001\001\000\004\006\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\232\005\213\052\151\072\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\243" +
    "\001\001\000\004\035\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\245\001\001\000\002\001\001" +
    "\000\004\027\247\001\001\000\002\001\001\000\010\030" +
    "\263\052\151\072\253\001\001\000\010\030\252\052\151" +
    "\072\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\151\072\260\001\001\000\006\052\151\072\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\336\015\277\016\273\052\151\072\275\001\001" +
    "\000\014\014\276\015\277\016\273\052\151\072\275\001" +
    "\001\000\012\015\334\016\273\052\151\072\333\001\001" +
    "\000\012\015\332\016\273\052\151\072\275\001\001\000" +
    "\002\001\001\000\012\015\331\016\273\052\151\072\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\312\016\273\052\151\072\275\001\001" +
    "\000\012\015\311\016\273\052\151\072\275\001\001\000" +
    "\012\015\310\016\273\052\151\072\275\001\001\000\002" +
    "\001\001\000\012\015\307\016\273\052\151\072\275\001" +
    "\001\000\012\015\306\016\273\052\151\072\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\151\072\330\001\001\000\006\052" +
    "\151\072\327\001\001\000\006\052\151\072\326\001\001" +
    "\000\006\052\151\072\325\001\001\000\006\052\151\072" +
    "\324\001\001\000\006\052\151\072\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\052\151\062\346\072\343\001\001\000\010\052\151\062" +
    "\342\072\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\052\151\063\356\072\353\001\001" +
    "\000\010\052\151\063\352\072\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\370\015\277" +
    "\016\273\052\151\072\275\001\001\000\014\014\365\015" +
    "\277\016\273\052\151\072\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\373\015\277\016\273\052\151" +
    "\072\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\151\072\u0142" +
    "\001\001\000\006\052\151\072\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u013f" +
    "\041\u0107\001\001\000\006\013\u0108\041\u0107\001\001\000" +
    "\006\013\u013e\041\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\151\072\u013c\001" +
    "\001\000\006\052\151\072\u0137\001\001\000\006\052\151" +
    "\072\u010d\001\001\000\002\001\001\000\006\041\u0112\070" +
    "\u0135\001\001\000\006\041\u0112\070\u0110\001\001\000\006" +
    "\013\u0134\041\u0107\001\001\000\006\041\u0112\070\u0133\001" +
    "\001\000\036\031\133\034\077\040\127\047\u011e\052\u0118" +
    "\053\u011b\054\u0121\055\u011d\056\u011a\057\u011c\060\u0122\075" +
    "\115\076\105\077\130\001\001\000\006\041\u0112\070\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\151\072\u0131\001\001\000\002\001\001\000\006\041\u0112" +
    "\070\u012e\001\001\000\006\041\u0112\070\u012d\001\001\000" +
    "\006\041\u0112\070\u012c\001\001\000\006\041\u0112\070\u012b" +
    "\001\001\000\006\041\u0112\070\u012a\001\001\000\006\041" +
    "\u0112\070\u0129\001\001\000\006\041\u0112\070\u0128\001\001" +
    "\000\006\052\151\072\u0126\001\001\000\006\041\u0112\070" +
    "\u0125\001\001\000\006\041\u0112\070\u0124\001\001\000\006" +
    "\041\u0112\070\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\u0112\070\u0127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u0112\070\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\u0136\041" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\u0112\070\u0139\001\001\000\006\013\u013a\041\u0107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u0141\041\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\u0145\041\u0107\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\006" +
    "\041\004\050\010\051\005\067\u0148\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\u016f\071\u0156\001\001" +
    "\000\006\061\u014f\071\u0156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\151\072\u0160\001\001\000" +
    "\006\052\151\072\u015a\001\001\000\002\001\001\000\006" +
    "\052\151\072\u015c\001\001\000\002\001\001\000\006\052" +
    "\151\072\u015e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\151\072\u0167\001\001\000" +
    "\006\052\151\072\u0163\001\001\000\002\001\001\000\006" +
    "\052\151\072\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\151\072\u016c\001\001" +
    "\000\006\052\151\072\u016a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\u0194\031\u0176\037\u0174\040\127\001\001" +
    "\000\012\010\u0175\031\u0176\037\u0174\040\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\u017a\044\u0178\045\u0179\001\001\000\010\003\u017c\052" +
    "\151\072\u017d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\u0181\044\u0178" +
    "\045\u0179\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\u0193\015\u0187\016\273\052\151" +
    "\072\275\001\001\000\014\011\u0186\015\u0187\016\273\052" +
    "\151\072\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0192\036\u018a\001\001\000\006\012\u018c\036" +
    "\u018a\001\001\000\002\001\001\000\004\045\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\006\041\004\050\010\051\005\067\u0197" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\u019e\015\277\016\273\052\151\072\275\001\001\000\014" +
    "\014\u019b\015\277\016\273\052\151\072\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u01a4\043\u01a2\074" +
    "\u01a3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\u01a2\074\u01ac\001\001\000\006\043\u01a2\074\u01aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01ab\001\001\000\002\001\001\000\004\023\u01ad\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\151\065\u01c1\072\u01b3\001\001\000\010\052\151" +
    "\065\u01b2\072\u01b3\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\u01be\001\001\000\004\073\u01b8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\151" +
    "\064\u01c8\072\u01c4\001\001\000\010\052\151\064\u01c5\072" +
    "\u01c4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\u01d2\043\u01a2\074\u01a3\001\001\000\010\022" +
    "\u01cf\043\u01a2\074\u01a3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\u01d5\043\u01a2\074\u01a3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhytonSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhytonSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhytonSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        int errors=0;
        String tokenError="";
        int lineError, columnError =0;
        String expectedTokens="";
        ArrayList<SyntaxError> list = new ArrayList();

        public ArrayList<SyntaxError> getList(){
                return list;
        }

        public void report_error(String message, Object info) { 
                if (info instanceof String){
                        Symbol s = cur_token;
                        //System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);;
                        error.setExpectedTokens(expectedTokens);
                        list.add(error);
                }
        }

        public void report_error_final(String message, Object info){
                if (info instanceof String){
                        Symbol s = cur_token;
                        errors++;       
                        //System.err.println("  "+ errors + "==> " + info + ": "+ message);
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);
                        error.setExpectedTokens(expectedTokens);
                        list.add(error);
                }
                
        }

    @Override
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
            int column = symbol.right;
            String token = (String) cur_token.value;
            //We get the production
                tokenError = token;
                lineError = line;
                columnError = column;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
                tokenError = (String) cur_token.value;
                lineError = symbol.left;
                columnError = symbol.right;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
                report_error_final("Estado Ilegal de Expresion", "Sintaxis incorrecta");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PhytonSyntax$actions {
  private final PhytonSyntax parser;

  /** Constructor */
  CUP$PhytonSyntax$actions(PhytonSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PhytonSyntax$do_action_part00000000(
    int                        CUP$PhytonSyntax$act_num,
    java_cup.runtime.lr_parser CUP$PhytonSyntax$parser,
    java.util.Stack            CUP$PhytonSyntax$stack,
    int                        CUP$PhytonSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhytonSyntax$result;

      /* select the action based on the action number */
      switch (CUP$PhytonSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = start_val;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PhytonSyntax$parser.done_parsing();
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // kar ::= KEEP 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kar",5, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // kar ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kar",5, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS SPACE 
            {
              Principal RESULT =null;
		
                RESULT = new Principal(cur_token.left, cur_token.right);
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= kar PRINCIPAL error CLOSE_PARENTHESIS SPACE 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS error SPACE 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error 
            {
              Principal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta");
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("principal",38, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tab ::= TAB tab_re 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT=1+e; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab",31, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tab_re ::= TAB tab_re 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 RESULT=1+e; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab_re",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tab_re ::= 
            {
              Integer RESULT =null;
		 RESULT=0; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("tab_re",32, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("main_body",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_body ::= error main_body 
            {
              ArrayList<Instruction> RESULT =null;
		 parser.report_error("Se encontro un error sintactico, se esperaba una instruccion o funcion","Sintaxis inesperada"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("main_body",52, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= principal instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int prinleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int prinright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Principal prin = (Principal)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(prin!=null){
                                lista.add(prin);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= pista instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Pista pis = (Pista)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(pis!=null){
                                lista.add(pis);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= tab throw_function instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= tab function instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(func!=null){
                                lista.add(func);
                                func.setIndentation(numTab);
                        }
                        RESULT = lista;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= tab func_especiales instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= tab v instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= tab for instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= tab while instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= tab do_while instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= tab if instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= tab switch instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= tab RETORNA value instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= tab CONTINUE value instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= tab SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = ins;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= SPACE instruction 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = ins;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> list = new ArrayList(); RESULT=list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction",53, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // notas ::= DO 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // notas ::= RE 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // notas ::= MI 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // notas ::= FA 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // notas ::= SOL 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // notas ::= LA 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // notas ::= SI 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // notas ::= DOR 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // notas ::= RER 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // notas ::= error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		parser.report_error("Valor incorrecto en, se esperaba una nota musical","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("notas",55, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ordenar_options ::= ASCENDENTE 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "ascendente");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ordenar_options ::= DESCENDENTE 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "descendente");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ordenar_options ::= PARES 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "pares");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ordenar_options ::= IMPARES 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "impares");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ordenar_options ::= PRIMOS 
            {
              Operation RESULT =null;
		
                        Value value = new Value("string", "primos");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ordenar_options ::= error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Valor incorrecto en, se esperaba un metodo de ordenamiento","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_options",57, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reproducir_syntax ::= notas COMA value COMA value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation e3 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e4 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Reproducir reproducir = new Reproducir(cur_token.left, cur_token.right);
                        reproducir.setNota(e1);
                        reproducir.setOctava(e2);
                        reproducir.setMilisegundos(e3);
                        reproducir.setCanal(e4);
                        RESULT = reproducir;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reproducir_syntax ::= notas error value COMA value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-6)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reproducir_syntax ::= notas COMA value error value COMA value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reproducir_syntax ::= notas COMA value COMA value error value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reproducir_syntax ::= notas COMA value COMA value COMA value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("reproducir_syntax",47, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-7)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // esperar_syntax ::= value COMA value CLOSE_PARENTHESIS 
            {
              Esperar RESULT =null;
		int milisegundosleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int milisegundosright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation milisegundos = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation canal = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Esperar esperar = new Esperar(cur_token.left, cur_token.right);
                        Operation miliSegundos=null;
                        Operation canalOp=null;
                        if(milisegundos!=null && canal!=null){
                                miliSegundos = milisegundos;
                                canalOp = canal;
                        }
                        esperar.setMilisegundos(miliSegundos);
                        esperar.setCanal(canalOp);
                        RESULT =esperar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // esperar_syntax ::= value error value CLOSE_PARENTHESIS 
            {
              Esperar RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // esperar_syntax ::= value COMA value error 
            {
              Esperar RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("esperar_syntax",22, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sumarizar_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Sumarizar sumarizar = new Sumarizar(cur_token.left, cur_token.right);
                        sumarizar.setArreglo(e1);
                        RESULT = sumarizar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sumarizar_syntax ::= value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba en \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("sumarizar_syntax",48, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // longitud_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Longitud longitud = new Longitud(cur_token.left, cur_token.right);
                        longitud.setArray(e1);
                        RESULT = longitud;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // longitud_syntax ::= value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("longitud_syntax",49, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mensaje_syntax ::= value CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Mensaje mensaje = new Mensaje(cur_token.left, cur_token.right);
                        mensaje.setMensaje(e1);
                        RESULT = mensaje;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mensaje_syntax ::= value error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mensaje_syntax",50, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ordenar_syntax ::= value COMA ordenar_options CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation sim = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int ordleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation ord = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Ordenar ordenar = new Ordenar(cur_token.left, cur_token.right);
                        Operation operation = sim;
                        ordenar.setArray(sim);
                        ordenar.setForma(ord);
                        RESULT = ordenar;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ordenar_syntax ::= value error ordenar_options CLOSE_PARENTHESIS 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ordenar_syntax ::= value COMA ordenar_options error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("ordenar_syntax",51, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // func_especiales ::= REPRODUCIR OPEN_PARENTHESIS reproducir_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // func_especiales ::= REPRODUCIR error reproducir_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // func_especiales ::= SUMARIZAR OPEN_PARENTHESIS sumarizar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // func_especiales ::= SUMARIZAR error sumarizar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // func_especiales ::= LONGITUD OPEN_PARENTHESIS longitud_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // func_especiales ::= LONGITUD error longitud_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\"  ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // func_especiales ::= ESPERAR OPEN_PARENTHESIS esperar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Esperar e1 = (Esperar)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func_especiales ::= ESPERAR error esperar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_especiales ::= MENSAJE OPEN_PARENTHESIS mensaje_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_especiales ::= MENSAJE error mensaje_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_especiales ::= ORDENAR OPEN_PARENTHESIS ordenar_syntax 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = e1;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_especiales ::= ORDENAR error ordenar_syntax 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("func_especiales",40, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // kf ::= KEEP type_function 
            {
              VariableIndicator RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		VariableIndicator tf = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(tf!=null){
                VariableIndicator indicator = tf;
                indicator.setGlobal(true);
                RESULT=indicator;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // kf ::= type_function 
            {
              VariableIndicator RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		VariableIndicator tf = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = tf;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // kf ::= error 
            {
              VariableIndicator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba mencionar el tipo de la funcion","Problema de declaracion"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("kf",25, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function ::= kf SIMBOLO OPEN_PARENTHESIS multiple_v SPACE 
            {
              Function RESULT =null;
		int variableIndicatorleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int variableIndicatorright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		VariableIndicator variableIndicator = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Operation> mv = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(variableIndicator!=null && mv!=null){
                        VariableIndicator indicator = variableIndicator;
                        ArrayList<Operation> list = mv;
                        Value value = new Value("function",sim.toString());
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        Function function = new Function(cur_token.left, cur_token.right);
                        function.setName(value);
                        function.setParameters(list);
                        function.setParamsIndicator(indicator);
                        RESULT = function;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function ::= kf error OPEN_PARENTHESIS multiple_v SPACE 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function ::= kf SIMBOLO error multiple_v SPACE 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function ::= kf SIMBOLO OPEN_PARENTHESIS multiple_v error 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_function ::= data_type array 
            {
              VariableIndicator RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> arr = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String type = "";
                ArrayList<Operation> dimension = new ArrayList();
                if(arr!=null){
                        dimension = arr;
                }
                if(data!=null){
                        type=data;
                }
                VariableIndicator indicator = new VariableIndicator(false, type, dimension);
                RESULT = indicator;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type_function",24, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // multiple_v ::= function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation fv = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mvreleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mvreright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> mvre = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(mvre!=null){
                        ArrayList<Operation> list = mvre;
                        list.add(fv);
                        ArrayList<Operation> aux = new ArrayList();
                        for(int index=list.size()-1; index>=0; index--){
                                aux.add(list.get(index));
                        }
                        RESULT = aux;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v",16, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // multiple_v ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                ArrayList<Operation> list = new ArrayList();
                RESULT = list;
            
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v",16, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // multiple_v_re ::= COMA function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation fv = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int mvreleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int mvreright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> mvre = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(mvre!=null){
                                ArrayList<Operation> list = mvre;
                                list.add(fv);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multiple_v_re ::= error function_variables multiple_v_re 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma o \")\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multiple_v_re ::= CLOSE_PARENTHESIS 
            {
              ArrayList<Operation> RESULT =null;
		
                        ArrayList<Operation> list = new ArrayList();
                        RESULT = list;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("multiple_v_re",17, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_variables ::= data_type SIMBOLO 
            {
              Operation RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                                Value value = new Value(data, sim.toString());
                                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                                RESULT = operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",58, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_variables ::= data_type error 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("function_variables",58, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // throw_function ::= SIMBOLO OPEN_PARENTHESIS multiple_v SPACE 
            {
              Function RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Operation> v = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Function function = new Function(true ,cur_token.left, cur_token.right);
                        Value value = new Value("variable",sim.toString());
                        function.setName(value);
                        function.setParameters(v);
                        RESULT = function;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("throw_function",37, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // pista ::= PISTA SIMBOLO d 
            {
              Pista RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int extendedleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int extendedright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> extended = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        ArrayList<Operation> list;
        if(extended!=null){
                list = extended;
        }else{
                list = new ArrayList();
        }
        Pista function = new Pista(cur_token.left, cur_token.right);
        function.setName(sim.toString());
        function.setExtendeds(list);
        RESULT = function;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pista ::= PISTA error d 
            {
              Pista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Error, se esperaba un nombre de la funcion","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // pista ::= PISTA SIMBOLO error 
            {
              Pista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("No se encontro un salto de linea o extension de pistas","Problema en Pista"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("pista",39, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // d ::= EXTIENDE SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> d = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista",sim.toString());
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                ArrayList<Operation> auxiliar = new ArrayList();
                for(int index=lista.size()-1; index>=0; index--){
                        auxiliar.add(lista.get(index));
                }
                RESULT = auxiliar;
        }        
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d",18, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // d ::= SPACE 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d",18, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // d_ ::= COMA SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> d = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista", sim.toString());
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                RESULT = lista;
        }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // d_ ::= error SIMBOLO d_ 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // d_ ::= COMA error d_ 
            {
              ArrayList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro la pista","Nombre no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // d_ ::= SPACE 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> list = new ArrayList(); RESULT = list;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("d_",19, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // increm_variables ::= SIMBOLO increm SPACE 
            {
              Variable RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        Variable variable = new Variable(cur_token.left, cur_token.right);
                        variable.setName(sim.toString());
                        Assignment assignment = new Assignment(cur_token.left, cur_token.right);
                        assignment.setMetodo(in);
                        variable.setValue(assignment);
                        RESULT = variable;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm_variables",28, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // increm ::= INCREASE 
            {
              String RESULT =null;
		RESULT = "++";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // increm ::= DECREASE 
            {
              String RESULT =null;
		RESULT = "--";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // increm ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba ++ o -- ","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("increm",35, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // v_for ::= type SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		VariableIndicator typ = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignforleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignforright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assignfor = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Assignment assignment = assignfor;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                variable.setParameters(typ);
                RESULT = variable;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",29, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // v_for ::= SIMBOLO assign_for 
            {
              Variable RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Assignment assignment = assign;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                RESULT = variable;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v_for",29, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assign_for ::= equal value COLON 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
        if(e1!=null && op!=null){
                        String mode = e1.toString();
                        Operation operation = op;
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(operation);
                        RESULT=asignacion;
        }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_for",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assign_for ::= equal array_assign COLON 
            {
              Assignment RESULT =null;
		
        /*Pendiente*/
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_for",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assign_for ::= increm COLON 
            {
              Assignment RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
        if(inc!=null){
                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                asignacion.setMetodo(inc);
                RESULT = asignacion;
        }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_for",15, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // v ::= type variables assign_special 
            {
              Instruction RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		VariableIndicator typ = (VariableIndicator)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // v ::= variables assign 
            {
              Instruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Variable> var = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        if(var!=null){
                Assignment assignment = assign;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment);
                RESULT = chunk;
        }    
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("v",41, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // data_type ::= ENTERO 
            {
              String RESULT =null;
		RESULT="entero";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // data_type ::= DOBLE 
            {
              String RESULT =null;
		RESULT="doble";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // data_type ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT="boolean";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // data_type ::= CADENA 
            {
              String RESULT =null;
		RESULT="cadena";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // data_type ::= CARACTER 
            {
              String RESULT =null;
		RESULT="caracter";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // variables ::= SIMBOLO variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Variable> array = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(array!=null){
                        lista=array;
                        lista.add(variable);
                        ArrayList<Variable> auxiliar = new ArrayList();
                        for(int index=lista.size()-1; index>=0; index--){
                                auxiliar.add(lista.get(index));
                        }
                }
                
                RESULT = lista;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables",26, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variables_re ::= COMA SIMBOLO variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Variable> array = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(array!=null){
                        lista = array;
                        lista.add(variable);
                }
                RESULT=lista;
                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variables_re ::= COMA error variables_re 
            {
              ArrayList<Variable> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba nombre de una variable ","Simbolo no encontrado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variables_re ::= 
            {
              ArrayList<Variable> RESULT =null;
		 ArrayList<Variable> variables = new ArrayList(); RESULT =variables; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("variables_re",27, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // k ::= KEEP VAR 
            {
              Boolean RESULT =null;
		RESULT=true;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // k ::= VAR 
            {
              Boolean RESULT =null;
		RESULT=false;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // k ::= KEEP error 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        parser.report_error("Se esperaba \"var\" ","Sintaxis incorrecta");
        RESULT=false;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("k",30, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // type ::= k data_type array 
            {
              VariableIndicator RESULT =null;
		int kValueleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int kValueright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Boolean kValue = (Boolean)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> arr = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                String data=type;
                boolean keep = kValue;
                ArrayList<Operation> list = arr;
                if(data==null){
                        data="";
                }
                if(list==null){
                        ArrayList<Operation> value = new ArrayList();
                        list = value;
                }
                VariableIndicator indicator = new VariableIndicator(keep, data, list);
                RESULT = indicator;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // assign_special ::= assign 
            {
              Assignment RESULT =null;
		int assileft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int assiright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Assignment assi = (Assignment)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT = assi;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_special",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // assign_special ::= SPACE 
            {
              Assignment RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_special",14, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // assign ::= equal value SPACE 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		  
                if(e1!=null && op!=null){
                        String mode = e1.toString();
                        Operation operation = op;
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(operation);
                        RESULT=asignacion;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assign ::= equal array_assign SPACE 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assign ::= increm SPACE 
            {
              Assignment RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
        if(inc!=null){
                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                asignacion.setMetodo(inc);
                RESULT = asignacion;
        }
    
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // equal ::= EQUAL 
            {
              String RESULT =null;
		RESULT = "=";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // equal ::= EQUAL_MORE 
            {
              String RESULT =null;
		RESULT = "+=";
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // equal ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba = o += ","Igualacion esperada"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("equal",34, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // array ::= ARREGLO dimension 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
                if(dim!=null)
                {
                        RESULT=dim;
                }else{
                        ArrayList<Operation> list = new ArrayList(); 
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // array ::= 
            {
              ArrayList<Operation> RESULT =null;
		 ArrayList<Operation> list = new ArrayList(); RESULT=list; 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array",20, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dimension ::= dimension OPEN_BRACKET value CLOSE_BRACKET 
            {
              ArrayList<Operation> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation v = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        list.add(v);
                        RESULT = list;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension",21, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dimension ::= 
            {
              ArrayList<Operation> RESULT =null;
		ArrayList<Operation> lista = new ArrayList(); 
                RESULT = lista;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("dimension",21, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // array_assign ::= OPEN_CURLY assign_arr new_assign 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("array_assign",1, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // new_assign ::= COMA OPEN_CURLY assign_arr new_assign 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("new_assign",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // new_assign ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("new_assign",0, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // assign_arr ::= OPEN_CURLY mult_values CLOSE_CURLY assign_arr 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr",2, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // assign_arr ::= mult_values CLOSE_CURLY 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("assign_arr",2, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // mult_values ::= value mult_values_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values",3, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // mult_values_re ::= COMA value mult_values_re 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values_re",4, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // mult_values_re ::= 
            {
              Object RESULT =null;

              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("mult_values_re",4, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // value ::= NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("entero",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // value ::= MINUS NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("entero","-"+num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // value ::= DECIMAL 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("doble",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // value ::= MINUS DECIMAL 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("doble","-"+num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // value ::= STRING 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("cadena",num.toString());
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // value ::= CHAR 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 Value value = new Value("caracter",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // value ::= value ADD value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;
                        }
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // value ::= value MINUS value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // value ::= value MULTIPLY value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // value ::= value DIV value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // value ::= value POW value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // value ::= value MODULE value 
            {
              Operation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // value ::= OPEN_PARENTHESIS value CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		RESULT = e2;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // value ::= SIMBOLO dimension 
            {
              Operation RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object sim = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Operation> dim = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 
        Value value = new Value(sim.toString(), dim);
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation; 
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // value ::= TRUE 
            {
              Operation RESULT =null;
		Value value = new Value("boolean","true"); 
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // value ::= func_especiales 
            {
              Operation RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Instruction func = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
        Value value = new Value("specialFunction",func );
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // value ::= FALSE 
            {
              Operation RESULT =null;
		Value value = new Value("boolean","false");
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
         RESULT = operation;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // value ::= error 
            {
              Operation RESULT =null;
		 parser.report_error("Se esperaba algun valor","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("value",56, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // if ::= block_if 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		If e1 = (If)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // if ::= block_elseif 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ElseIf e1 = (ElseIf)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // if ::= block_else 
            {
              Instruction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Else e1 = (Else)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		RESULT=e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("if",45, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // block_if ::= SI OPEN_PARENTHESIS condition SPACE 
            {
              If RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(con!=null){
                        If block = new If(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // block_if ::= SI error condition SPACE 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" en ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // block_if ::= SI OPEN_PARENTHESIS condition error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_if",59, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // block_elseif ::= ELSE SI OPEN_PARENTHESIS condition SPACE 
            {
              ElseIf RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(con!=null){
                        ElseIf block = new ElseIf(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // block_elseif ::= ELSE error OPEN_PARENTHESIS condition SPACE 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		 parser.report_error("No se agrego \"Si\" en la declaracion","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // block_elseif ::= ELSE SI error condition SPACE 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // block_elseif ::= ELSE SI OPEN_PARENTHESIS condition error 
            {
              ElseIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_elseif",60, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // block_else ::= ELSE SPACE 
            {
              Else RESULT =null;
		
                Else block = new Else(cur_token.left, cur_token.right);
                RESULT = block;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_else",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // block_else ::= ELSE error 
            {
              Else RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("block_else",61, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condition ::= condition_re CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        if(con!=null){
                                RESULT = con;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condition_re ::= condition_re AND condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condition_re ::= condition_re NAND condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condition_re ::= condition_re OR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condition_re ::= condition_re NOR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condition_re ::= condition_re XOR condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condition_re ::= OPEN_PARENTHESIS condition_re CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 RESULT = e1;
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condition_re ::= NULL_ condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!!");
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condition_re ::= NOT condition_re 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!");
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condition_re ::= comparation 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Comparation e1 = (Comparation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Comparation comparation = e1;
                                Condition condition = new Condition(comparation, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("condition_re",11, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // comparation ::= value EQUALIZATION value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // comparation ::= value DIFFERENTIATION value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // comparation ::= value GREATER value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // comparation ::= value GREATER_THAN value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // comparation ::= value LESSER value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // comparation ::= value LESSER_THAN value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e2 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // comparation ::= value 
            {
              Comparation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Operation e1 = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                Comparation comparation = new Comparation(e1, cur_token.left, cur_token.right);
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("comparation",12, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // instruction_switch ::= tab func_especiales instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                        
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // instruction_switch ::= tab throw_function instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int numTableft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int numTabright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer numTab = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // instruction_switch ::= tab v instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // instruction_switch ::= tab for instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // instruction_switch ::= tab while instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // instruction_switch ::= tab do_while instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // instruction_switch ::= tab if instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // instruction_switch ::= tab switch instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Instruction e1 = (Instruction)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        
                        if(ins!=null){

                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // instruction_switch ::= tab RETORNA value instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Return retorna = new Return(t, cur_token.left, cur_token.right, val);
                        if(ins!=null){  
                                ins.add(retorna);
                                RESULT = ins;
                        }else{
                                ArrayList<Instruction> list = new ArrayList();
                                list.add(retorna);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // instruction_switch ::= tab CONTINUE value instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        Continue newContinue = new Continue(t, cur_token.left, cur_token.right);
                        if(ins!=null){
                                ins.add(newContinue);
                                RESULT = ins;
                        }else{
                                ArrayList<Instruction> list = new ArrayList();
                                list.add(newContinue);
                                RESULT = list;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // instruction_switch ::= tab SPACE instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = ins;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // instruction_switch ::= SPACE instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        RESULT = ins;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // instruction_switch ::= tab EXIT 
            {
              ArrayList<Instruction> RESULT =null;
		
                        ArrayList<Instruction> instructions = new ArrayList();
                        RESULT = instructions;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // instruction_switch ::= error instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro una instruccion","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // instruction_switch ::= tab error instruction_switch 
            {
              ArrayList<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("No se encontro una instruccion","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("instruction_switch",54, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // switch ::= SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS SPACE cases 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Case> cas = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        ArrayList<Case> cases = new ArrayList();
                        if(cas !=null){
                                cases = cas;
                        }
                        Switch newSwitch = new Switch(cur_token.left, cur_token.right);
                        newSwitch.setVariable(val);
                        newSwitch.setCases(cases);
                        RESULT = newSwitch;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // switch ::= SWITCH error value CLOSE_PARENTHESIS SPACE cases 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // switch ::= SWITCH OPEN_PARENTHESIS value error SPACE cases 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // switch ::= SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS error cases 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("switch",46, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // cases ::= tab CASE value SPACE instruction_switch cases 
            {
              ArrayList<Case> RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		ArrayList<Case> cas = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                if(cas!=null){
                        ArrayList<Case> cases = cas;
                        Case newCase = new Case(ind, cur_token.left, cur_token.right);
                        newCase.setInstructions(ins);
                        newCase.setValue(val);
                        cases.add(newCase);
                        RESULT = cases;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // cases ::= tab error value SPACE instruction_switch cases 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-4)).value;
		 parser.report_error("Se esperaba la palabra \"case\" o \"default\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // cases ::= tab CASE value error instruction_switch cases 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // cases ::= tab DEFAULT SPACE 
            {
              ArrayList<Case> RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		
                ArrayList<Case> cases = new ArrayList();
                Default lastCase = new Default(ind, cur_token.left, cur_token.right);
                cases.add(lastCase);
                RESULT = cases;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // cases ::= tab DEFAULT value error 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // cases ::= error cases 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Error sintactico ","Valor inesperado"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // cases ::= SPACE 
            {
              ArrayList<Case> RESULT =null;
		
                ArrayList<Case> cases = new ArrayList();
                RESULT = cases;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // for ::= FOR OPEN_PARENTHESIS for_instructions SPACE 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(f!=null){
                        RESULT = f;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // for ::= FOR error for_instructions SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // for ::= FOR OPEN_PARENTHESIS for_instructions error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for",42, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // for_instructions ::= v_for COLON for_condition 
            {
              For RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(f!=null){
                                For newFor = f;
                                newFor.setVariable(v);
                                RESULT = newFor;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_instructions",6, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // for_instructions ::= v_for error for_condition 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \";\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_instructions",6, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // for_condition ::= condition_re COLON for_increm 
            {
              For RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		
                        if(f!=null){
                                For newFor = f;
                                newFor.setCondition(con);
                                RESULT = newFor;
                        }
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_condition",7, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // for_condition ::= condition_re error for_increm 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		 parser.report_error("Se esperaba \";\" ","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_condition",7, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // for_increm ::= increm_variables CLOSE_PARENTHESIS 
            {
              For RESULT =null;
		int incvleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int incvright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Variable incv = (Variable)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                        For newFor = new For(cur_token.left, cur_token.right);
                        newFor.setPaso(incv);
                        RESULT = newFor;
                
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_increm",8, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // for_increm ::= increm_variables error 
            {
              For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("for_increm",8, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // while ::= WHILE OPEN_PARENTHESIS condition SPACE 
            {
              Instruction RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)).value;
		
                if(con!=null){
                        While newWhile = new While(cur_token.left, cur_token.right);
                        newWhile.setCondition(con);
                        RESULT = newWhile;
                }
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // while ::= WHILE error condition SPACE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-2)).value;
		 parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // while ::= WHILE OPEN_PARENTHESIS condition error 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhytonSyntax$stack.peek()).value;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("while",43, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // do_while ::= HACER SPACE 
            {
              Instruction RESULT =null;
		
                DoWhile doWhile = new DoWhile(cur_token.left, cur_token.right);
                RESULT = doWhile;
        
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("do_while",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // do_while ::= HACER error 
            {
              Instruction RESULT =null;
		 parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); 
              CUP$PhytonSyntax$result = parser.getSymbolFactory().newSymbol("do_while",44, ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.elementAt(CUP$PhytonSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$PhytonSyntax$stack.peek()), RESULT);
            }
          return CUP$PhytonSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PhytonSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PhytonSyntax$do_action(
    int                        CUP$PhytonSyntax$act_num,
    java_cup.runtime.lr_parser CUP$PhytonSyntax$parser,
    java.util.Stack            CUP$PhytonSyntax$stack,
    int                        CUP$PhytonSyntax$top)
    throws java.lang.Exception
    {
              return CUP$PhytonSyntax$do_action_part00000000(
                               CUP$PhytonSyntax$act_num,
                               CUP$PhytonSyntax$parser,
                               CUP$PhytonSyntax$stack,
                               CUP$PhytonSyntax$top);
    }
}

}
