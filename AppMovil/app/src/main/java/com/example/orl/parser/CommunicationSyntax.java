
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.orl.parser;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import com.example.orl.errors.*;
import com.example.orl.pistas.Central;
import com.example.orl.pistas.ListaReproduccion;
import com.example.orl.pistas.PistaReproduccion;
import com.example.orl.pistas.Reproduccion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CommunicationSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CommunicationSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CommunicationSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CommunicationSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CommunicationSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\075\004\000\002\074\006\000\002\074\003\000\002" +
    "\004\005\000\002\005\006\000\002\055\010\000\002\006" +
    "\006\000\002\072\004\000\002\101\004\000\002\101\003" +
    "\000\002\060\010\000\002\044\006\000\002\100\004\000" +
    "\002\077\004\000\002\077\003\000\002\076\013\000\002" +
    "\102\003\000\002\102\003\000\002\064\004\000\002\062" +
    "\005\000\002\073\006\000\002\073\003\000\002\071\004" +
    "\000\002\071\004\000\002\071\003\000\002\063\004\000" +
    "\002\063\004\000\002\063\004\000\002\063\003\000\002" +
    "\010\006\000\002\066\004\000\002\065\004\000\002\065" +
    "\003\000\002\007\005\000\002\011\006\000\002\061\007" +
    "\000\002\054\005\000\002\056\005\000\002\070\005\000" +
    "\002\057\005\000\002\067\005\000\002\050\003\000\002" +
    "\047\004\000\002\046\004\000\002\051\005\000\002\051" +
    "\005\000\002\051\003\000\002\052\003\000\002\052\003" +
    "\000\002\045\004\000\002\045\003\000\002\045\003\000" +
    "\002\053\005\000\002\053\005\000\002\043\004\000\002" +
    "\012\004\000\002\013\004\000\002\013\003\000\002\014" +
    "\005\000\002\015\006\000\002\016\005\000\002\017\006" +
    "\000\002\020\005\000\002\021\005\000\002\022\006\000" +
    "\002\023\005\000\002\024\005\000\002\025\006\000\002" +
    "\026\005\000\002\027\005\000\002\030\006\000\002\031" +
    "\005\000\002\032\005\000\002\033\006\000\002\034\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\040\006\000\002\040\006\000\002\040\006\000\002" +
    "\040\006\000\002\040\006\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\036\006\000\002\036\006" +
    "\000\002\036\006\000\002\036\006\000\002\036\006\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\042\006\000\002\042\006\000\002\042\006\000\002\042" +
    "\006\000\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\006\003\017\025\016\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffc\001\002\000\004\002\ufffb" +
    "\001\002\000\006\003\176\025\201\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\000\001\002\000\004\025\167" +
    "\001\002\000\004\025\127\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\124\001\002\000\016\003\070\007\071" +
    "\012\067\013\072\014\073\034\074\001\002\000\004\002" +
    "\ufffe\001\002\000\004\025\047\001\002\000\004\025\026" +
    "\001\002\000\004\002\uffcf\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\uffd8\001\002\000\004\002\uffda\001\002" +
    "\000\006\013\031\027\032\001\002\000\004\025\026\001" +
    "\002\000\004\002\uffd9\001\002\000\004\011\036\001\002" +
    "\000\004\012\033\001\002\000\004\026\034\001\002\000" +
    "\004\002\uffd6\001\002\000\004\014\042\001\002\000\004" +
    "\030\037\001\002\000\004\004\040\001\002\000\016\011" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\026\uffd4\033\uffd4\001\002" +
    "\000\004\026\045\001\002\000\004\030\043\001\002\000" +
    "\004\006\044\001\002\000\004\026\uffd3\001\002\000\004" +
    "\025\uffd5\001\002\000\004\002\uffe3\001\002\000\006\027" +
    "\051\034\052\001\002\000\004\002\uffe6\001\002\000\004" +
    "\013\065\001\002\000\010\011\036\016\053\026\056\001" +
    "\002\000\004\030\063\001\002\000\010\011\036\016\053" +
    "\026\056\001\002\000\010\011\036\016\053\026\056\001" +
    "\002\000\004\025\uffe0\001\002\000\004\025\047\001\002" +
    "\000\004\002\uffe4\001\002\000\004\025\uffe2\001\002\000" +
    "\004\025\uffe1\001\002\000\004\006\064\001\002\000\010" +
    "\011\uffd1\016\uffd1\026\uffd1\001\002\000\004\026\066\001" +
    "\002\000\004\002\uffdb\001\002\000\004\026\123\001\002" +
    "\000\004\026\122\001\002\000\006\003\120\026\121\001" +
    "\002\000\012\011\036\015\102\026\106\033\103\001\002" +
    "\000\004\026\101\001\002\000\004\011\075\001\002\000" +
    "\004\030\076\001\002\000\004\004\077\001\002\000\004" +
    "\026\100\001\002\000\004\025\ufff3\001\002\000\004\025" +
    "\ufff5\001\002\000\004\030\116\001\002\000\004\030\114" +
    "\001\002\000\012\011\036\015\102\026\106\033\103\001" +
    "\002\000\012\011\036\015\102\026\106\033\103\001\002" +
    "\000\004\025\uffdc\001\002\000\004\025\uffe5\001\002\000" +
    "\012\011\036\015\102\026\106\033\103\001\002\000\004" +
    "\025\uffde\001\002\000\004\025\uffdf\001\002\000\004\025" +
    "\uffdd\001\002\000\004\004\115\001\002\000\012\011\uffd0" +
    "\015\uffd0\026\uffd0\033\uffd0\001\002\000\004\004\117\001" +
    "\002\000\012\011\uffd2\015\uffd2\026\uffd2\033\uffd2\001\002" +
    "\000\006\003\uffab\025\uffab\001\002\000\006\003\uffad\025" +
    "\uffad\001\002\000\006\003\uffac\025\uffac\001\002\000\004" +
    "\025\uffd7\001\002\000\004\002\001\001\002\000\004\025" +
    "\127\001\002\000\004\002\uffef\001\002\000\006\017\154" +
    "\027\155\001\002\000\004\025\133\001\002\000\004\002" +
    "\ufff1\001\002\000\004\025\uffec\001\002\000\006\021\137" +
    "\027\140\001\002\000\004\025\133\001\002\000\004\025" +
    "\uffea\001\002\000\004\025\uffeb\001\002\000\004\016\143" +
    "\001\002\000\004\017\141\001\002\000\004\026\142\001" +
    "\002\000\004\025\uffed\001\002\000\004\030\144\001\002" +
    "\000\004\006\145\001\002\000\004\022\146\001\002\000" +
    "\004\030\147\001\002\000\006\005\152\006\151\001\002" +
    "\000\004\026\153\001\002\000\004\026\uffe7\001\002\000" +
    "\004\026\uffe8\001\002\000\004\025\uffe9\001\002\000\004" +
    "\020\160\001\002\000\004\034\156\001\002\000\004\026" +
    "\157\001\002\000\004\002\ufff2\001\002\000\004\030\161" +
    "\001\002\000\004\006\162\001\002\000\004\026\163\001" +
    "\002\000\004\025\uffee\001\002\000\004\002\ufff0\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\ufff6\001\002\000" +
    "\006\027\170\034\171\001\002\000\004\014\174\001\002" +
    "\000\010\011\036\016\053\026\056\001\002\000\004\025" +
    "\167\001\002\000\004\002\ufff7\001\002\000\004\026\175" +
    "\001\002\000\004\002\ufff4\001\002\000\006\003\uffca\025" +
    "\uffca\001\002\000\006\003\312\025\316\001\002\000\006" +
    "\003\241\025\243\001\002\000\006\003\233\010\234\001" +
    "\002\000\004\002\uffce\001\002\000\012\003\205\013\210" +
    "\031\207\034\211\001\002\000\004\002\uffc2\001\002\000" +
    "\006\003\212\025\213\001\002\000\006\003\212\025\213" +
    "\001\002\000\006\003\212\025\213\001\002\000\006\003" +
    "\uffc9\025\uffc9\001\002\000\006\003\uffc8\025\uffc8\001\002" +
    "\000\004\027\226\001\002\000\006\003\215\027\216\001" +
    "\002\000\006\003\uffae\025\uffae\001\002\000\004\010\224" +
    "\001\002\000\006\003\217\010\220\001\002\000\004\026" +
    "\223\001\002\000\006\003\221\026\222\001\002\000\006" +
    "\003\uff9e\025\uff9e\001\002\000\006\003\uffa2\025\uffa2\001" +
    "\002\000\006\003\uff9f\025\uff9f\001\002\000\004\026\225" +
    "\001\002\000\006\003\uffa0\025\uffa0\001\002\000\004\010" +
    "\227\001\002\000\004\026\230\001\002\000\006\003\uffa1" +
    "\025\uffa1\001\002\000\006\003\uffcc\025\uffcc\001\002\000" +
    "\006\003\uffcb\025\uffcb\001\002\000\004\026\237\001\002" +
    "\000\006\003\235\026\236\001\002\000\012\003\uffa3\013" +
    "\uffa3\031\uffa3\034\uffa3\001\002\000\012\003\uffa5\013\uffa5" +
    "\031\uffa5\034\uffa5\001\002\000\012\003\uffa4\013\uffa4\031" +
    "\uffa4\034\uffa4\001\002\000\006\003\270\004\267\001\002" +
    "\000\006\002\uffc5\027\264\001\002\000\004\002\uffc6\001" +
    "\002\000\010\003\247\011\251\027\250\001\002\000\004" +
    "\002\uffcd\001\002\000\006\003\241\025\243\001\002\000" +
    "\004\002\uffc7\001\002\000\006\007\262\026\261\001\002" +
    "\000\006\003\254\007\255\001\002\000\006\003\252\026" +
    "\253\001\002\000\006\003\uff9b\004\uff9b\001\002\000\006" +
    "\003\uff9d\004\uff9d\001\002\000\004\026\260\001\002\000" +
    "\006\003\256\026\257\001\002\000\004\002\uffa6\001\002" +
    "\000\004\002\uffaa\001\002\000\004\002\uffa7\001\002\000" +
    "\006\003\uff9c\004\uff9c\001\002\000\004\026\263\001\002" +
    "\000\004\002\uffa8\001\002\000\004\007\265\001\002\000" +
    "\004\026\266\001\002\000\004\002\uffa9\001\002\000\006" +
    "\003\271\025\272\001\002\000\006\003\271\025\272\001" +
    "\002\000\004\027\305\001\002\000\006\003\274\027\275" +
    "\001\002\000\006\003\uffc3\025\uffc3\001\002\000\004\011" +
    "\303\001\002\000\006\003\276\011\277\001\002\000\004" +
    "\026\302\001\002\000\006\003\300\026\301\001\002\000" +
    "\006\003\uff96\025\uff96\001\002\000\006\003\uff9a\025\uff9a" +
    "\001\002\000\006\003\uff97\025\uff97\001\002\000\004\026" +
    "\304\001\002\000\006\003\uff98\025\uff98\001\002\000\004" +
    "\011\306\001\002\000\004\026\307\001\002\000\006\003" +
    "\uff99\025\uff99\001\002\000\006\003\uffc4\025\uffc4\001\002" +
    "\000\006\003\312\025\316\001\002\000\004\027\264\001" +
    "\002\000\004\002\uffbf\001\002\000\004\025\324\001\002" +
    "\000\004\002\uffc1\001\002\000\010\003\317\023\320\027" +
    "\250\001\002\000\004\007\262\001\002\000\004\026\321" +
    "\001\002\000\004\025\uffbc\001\002\000\004\006\376\001" +
    "\002\000\004\025\336\001\002\000\004\017\333\001\002" +
    "\000\004\025\327\001\002\000\006\003\uffbe\025\uffbe\001" +
    "\002\000\004\027\330\001\002\000\004\023\331\001\002" +
    "\000\004\026\332\001\002\000\006\003\uffbb\025\uffbb\001" +
    "\002\000\004\026\334\001\002\000\004\006\uffb0\001\002" +
    "\000\004\032\370\001\002\000\004\021\366\001\002\000" +
    "\004\025\342\001\002\000\004\006\360\001\002\000\004" +
    "\025\347\001\002\000\004\024\343\001\002\000\004\026" +
    "\344\001\002\000\004\006\uffb6\001\002\000\004\025\uffbd" +
    "\001\002\000\004\006\352\001\002\000\004\016\350\001" +
    "\002\000\004\026\351\001\002\000\004\006\uffb9\001\002" +
    "\000\004\025\354\001\002\000\004\025\uffba\001\002\000" +
    "\004\027\355\001\002\000\004\016\356\001\002\000\004" +
    "\026\357\001\002\000\004\025\uffb8\001\002\000\004\025" +
    "\362\001\002\000\004\025\uffb7\001\002\000\004\027\363" +
    "\001\002\000\004\024\364\001\002\000\004\026\365\001" +
    "\002\000\004\025\uffb5\001\002\000\004\026\367\001\002" +
    "\000\004\032\uffb3\001\002\000\004\025\372\001\002\000" +
    "\004\025\uffb4\001\002\000\004\027\373\001\002\000\004" +
    "\021\374\001\002\000\004\026\375\001\002\000\004\025" +
    "\uffb2\001\002\000\004\025\377\001\002\000\004\027\u0101" +
    "\001\002\000\004\025\uffb1\001\002\000\004\017\u0102\001" +
    "\002\000\004\026\u0103\001\002\000\004\025\uffaf\001\002" +
    "\000\004\002\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\036\002\014\003\013\004\011\007\020\037" +
    "\006\043\022\047\021\050\010\055\012\062\017\064\004" +
    "\066\003\072\007\075\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\203\034\176" +
    "\035\202\046\201\051\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\165\074\164\001\001\000\012" +
    "\006\125\060\127\100\124\101\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\045\073\047\001\001\000\010\011\023\061" +
    "\026\065\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\023\061\026\065\027\001\001\000\002\001\001" +
    "\000\004\054\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\054\054\057\053" +
    "\071\056\001\001\000\002\001\001\000\010\054\054\057" +
    "\053\071\061\001\001\000\010\054\054\057\053\071\060" +
    "\001\001\000\002\001\001\000\006\010\045\073\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\054\104\063\106\067\103\070\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\054\104\063\112\067\103\070\107\001\001\000\012\054" +
    "\104\063\111\067\103\070\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\104\063\110\067\103\070" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\125\060\127\100\124\101\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\134\076\133\077" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\134\076\133\077\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\054" +
    "\057\053\071\171\001\001\000\006\005\165\074\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\314\014\310\016\313\040" +
    "\312\001\001\000\012\040\241\041\237\045\243\053\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\205\001\001\000\002\001\001\000\004\036\231\001\001" +
    "\000\004\036\230\001\001\000\004\036\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\241\041\237\045\245\053\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\307\001\001\000\004\042\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\u0103\014\310\016\313\040\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\324\031\322\032\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\336\027\334\001\001\000\002\001\001\000" +
    "\004\017\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\340\024\337\001\001\000\002\001" +
    "\001\000\006\020\344\021\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\360\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CommunicationSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CommunicationSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CommunicationSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        int errors=0;
        String tokenError="";
        int lineError, columnError =0;
        String expectedTokens="";
        ArrayList<SyntaxError> list = new ArrayList();
        Solicitud solicitud = new Solicitud();

        public void startListaListas(ArrayList<ListaReproduccion> listaBuilder){
                Central.addListas(listaBuilder);
        }

        public void startListaEstructura(ListaReproduccion lista){
                Central.addListaReproduccion(lista);
        }

        public void startListaPistas(ArrayList<PistaReproduccion> pistas){
                Central.addListaPistas(pistas);
        }

        public void startPistaReproduccion(PistaReproduccion pista){
                Central.addPistaReproduccion(pista);
        }

        public Solicitud getSolicitud(){
                return solicitud;
        }

        public void setSolicitud(Solicitud solicitud){
                this.solicitud = solicitud;
        }

        public ArrayList<SyntaxError> getList(){
                return list;
        }

        public void report_error(String message, Object info) { 
                if (info instanceof String){
                        Symbol s = cur_token;
                        //System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);;
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
        }

        public void report_error_final(String message, Object info){
                if (info instanceof String){
                        Symbol s = cur_token;
                        errors++;       
                        //System.err.println("  "+ errors + "==> " + info + ": "+ message);
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
                
        }

    @Override
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
            int column = symbol.right;
            String token = (String) cur_token.value;
            //We get the production
                tokenError = token;
                lineError = line;
                columnError = column;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ",";
                }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
                tokenError = (String) cur_token.value;
                lineError = symbol.left;
                columnError = symbol.right;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
                report_error_final("Estado Ilegal de Expresion", "Sintaxis incorrecta");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CommunicationSyntax$actions {
  private final CommunicationSyntax parser;

  /** Constructor */
  CUP$CommunicationSyntax$actions(CommunicationSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CommunicationSyntax$do_action_part00000000(
    int                        CUP$CommunicationSyntax$act_num,
    java_cup.runtime.lr_parser CUP$CommunicationSyntax$parser,
    java.util.Stack            CUP$CommunicationSyntax$stack,
    int                        CUP$CommunicationSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CommunicationSyntax$result;

      /* select the action based on the action number */
      switch (CUP$CommunicationSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		RESULT = start_val;
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CommunicationSyntax$parser.done_parsing();
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main_body ::= solicitudes 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Solicitud s = (Solicitud)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                setSolicitud(s);
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_body ::= body 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_body ::= error 
            {
              Object RESULT =null;
		parser.report_error("Solicitud mal realizada","Inicio ilegal de la expresion");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= lista_listas 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> li = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                startListaListas(li);
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= lista_estructura 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ListaReproduccion li = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                startListaEstructura(li);
            
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= lista_pistas 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<PistaReproduccion> li = (ArrayList<PistaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                startListaPistas(li);
            
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= pista_estructura 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		PistaReproduccion li = (PistaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                startPistaReproduccion(li);
            
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= crear_solicitud 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_pistas ::= etiqueta_pista pista_lista_ 
            {
              ArrayList<PistaReproduccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<PistaReproduccion> e = (ArrayList<PistaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        RESULT = e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("lista_pistas",59, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pista_lista_ ::= LESS PISTA params_pista_lista pista_lista_ 
            {
              ArrayList<PistaReproduccion> RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		PistaReproduccion pr = (PistaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<PistaReproduccion> e = (ArrayList<PistaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        e.add(pr);
                        RESULT=e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("pista_lista_",58, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pista_lista_ ::= etiqueta_pista_cl 
            {
              ArrayList<PistaReproduccion> RESULT =null;
		
                        RESULT = new ArrayList<PistaReproduccion>();
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("pista_lista_",58, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiqueta_pista ::= LESS PISTAS GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_pista",2, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta_pista_cl ::= LESS DIV PISTAS GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_pista_cl",3, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // open_lista ::= LESS PISTA NOMBRE EQUAL STRING GREATER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		
                        String text = e.toString();
                        text = text.substring(1, text.length() - 1);
                        RESULT = text;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("open_lista",43, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // close_pista ::= LESS DIV PISTA GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("close_pista",4, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pista_estructura ::= open_lista canales 
            {
              PistaReproduccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<Reproduccion> e = (ArrayList<Reproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        PistaReproduccion pista = new PistaReproduccion();
                        pista.setName(o);
                        pista.setSonidos(e);
                        RESULT = pista;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("pista_estructura",56, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // canales ::= canal canales 
            {
              ArrayList<Reproduccion> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		ArrayList<Reproduccion> c = (ArrayList<Reproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<Reproduccion> d = (ArrayList<Reproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                for(int index=0; index<c.size(); index++){
                        d.add(c.get(index));
                }
        RESULT = d;
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("canales",63, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // canales ::= close_pista 
            {
              ArrayList<Reproduccion> RESULT =null;
		
                RESULT = new ArrayList<Reproduccion>();
        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("canales",63, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // open_canal ::= LESS CANAL NUMERO EQUAL NUMBER GREATER 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		
                        RESULT = Integer.parseInt(e.toString());
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("open_canal",46, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-5)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // close_canal ::= LESS DIV CANAL GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("close_canal",34, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // canal ::= open_canal notas 
            {
              ArrayList<Reproduccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<Reproduccion> n = (ArrayList<Reproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		

        for(int index=0; index<n.size(); index++){
                n.get(index).setCanal(e);
        }
        RESULT = n;
        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("canal",62, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // notas ::= nota notas 
            {
              ArrayList<Reproduccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Reproduccion n = (Reproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<Reproduccion> e = (ArrayList<Reproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                e.add(n);
                RESULT = e;
        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // notas ::= close_canal 
            {
              ArrayList<Reproduccion> RESULT =null;
		
                RESULT = new ArrayList<Reproduccion>();
        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("notas",61, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nota ::= LESS NOTA DURACION EQUAL NUMBER FRECUENCIA EQUAL valor GREATER 
            {
              Reproduccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		
                        Reproduccion reproduccion = new Reproduccion();
                        reproduccion.setFrecuencia(e);
                        reproduccion.setDuracion(Integer.parseInt(a.toString()));
                        RESULT = reproduccion;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("nota",60, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-8)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= DECIMAL 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                double x = Double.parseDouble(e.toString());
                RESULT =x;
        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("valor",64, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= NUMBER 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                double x = Double.parseDouble(e.toString());
                RESULT =x;
        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("valor",64, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_estructura ::= fact_lista pista_lista 
            {
              ListaReproduccion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		ListaReproduccion list = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<PistaReproduccion> arr = (ArrayList<PistaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        list.addPistas(arr);
                        RESULT = list;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("lista_estructura",50, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fact_lista ::= LESS LISTA params_lista 
            {
              ListaReproduccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ListaReproduccion e = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        RESULT=e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("fact_lista",48, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pista_lista ::= LESS PISTA params_pista_lista pista_lista 
            {
              ArrayList<PistaReproduccion> RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		PistaReproduccion pis = (PistaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<PistaReproduccion> e = (ArrayList<PistaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        e.add(pis);
                        RESULT=e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("pista_lista",57, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pista_lista ::= etiqueta_lista_cl 
            {
              ArrayList<PistaReproduccion> RESULT =null;
		
                        RESULT = new ArrayList<PistaReproduccion>();
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("pista_lista",57, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params_pista_lista ::= param_nombre params_pista_lista 
            {
              PistaReproduccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		PistaReproduccion p = (PistaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        p.setName(n);
                        RESULT = p;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_pista_lista",55, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params_pista_lista ::= param_duracion params_pista_lista 
            {
              PistaReproduccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		PistaReproduccion p = (PistaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        p.setDuracion(e); 
                        RESULT = p;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_pista_lista",55, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params_pista_lista ::= GREATER 
            {
              PistaReproduccion RESULT =null;
		
                        RESULT = new PistaReproduccion();
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_pista_lista",55, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params_lista ::= param_nombre params_lista 
            {
              ListaReproduccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ListaReproduccion e = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                e.setNombre(f);
                RESULT =e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_lista",49, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params_lista ::= param_random params_lista 
            {
              ListaReproduccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ListaReproduccion e = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                e.setRandom(f);
                RESULT=e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_lista",49, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params_lista ::= param_circular params_lista 
            {
              ListaReproduccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ListaReproduccion e = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                e.setCircular(f);
                RESULT=e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_lista",49, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params_lista ::= GREATER 
            {
              ListaReproduccion RESULT =null;
		 RESULT = new ListaReproduccion();
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("params_lista",49, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // etiqueta_lista_cl ::= LESS DIV LISTA GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_lista_cl",6, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_listas ::= etiqueta_lista listas_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> re = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        RESULT = re;
                        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("lista_listas",52, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listas_re ::= throw_lista listas_re 
            {
              ArrayList<ListaReproduccion> RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		ListaReproduccion tr = (ListaReproduccion)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		ArrayList<ListaReproduccion> re = (ArrayList<ListaReproduccion>)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
                System.out.println("cruzo en listas_re");
                        re.add(tr);
                RESULT = re;
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("listas_re",51, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listas_re ::= etiqueta_listas_cl 
            {
              ArrayList<ListaReproduccion> RESULT =null;
                System.out.println("cruzo en etiqueta-listas_cl");
                        RESULT = new ArrayList<ListaReproduccion>();
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("listas_re",51, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiqueta_lista ::= LESS LISTAS GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_lista",5, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiqueta_listas_cl ::= LESS DIV LISTAS GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_listas_cl",7, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // throw_lista ::= LESS LISTA param_nombre param_pistas GREATER 
            {
              ListaReproduccion RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)).value;
		int pisleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Integer pis = (Integer)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		
                        ListaReproduccion listaBuilder = new ListaReproduccion();
                        listaBuilder.setNombre(nom);
                        listaBuilder.setNoPistas(pis);
                        RESULT = listaBuilder;
                        
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("throw_lista",47, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-4)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param_nombre ::= NOMBRE EQUAL STRING 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        String text = num.toString();
                        text = text.substring(1, text.length() - 1);
                        RESULT = text;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("param_nombre",42, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param_pistas ::= PISTAS EQUAL NUMBER 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        RESULT = Integer.parseInt(e.toString());
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("param_pistas",44, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param_random ::= ALEATORIA EQUAL STRING 
            {
              Boolean RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        String text = num.toString();
                        text = text.substring(1, text.length() - 1);
                        if(text.equalsIgnoreCase("Si")){
                                RESULT = true;
                        }
                        RESULT = false;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("param_random",54, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param_duracion ::= DURACION EQUAL NUMBER 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                RESULT = Integer.parseInt(e.toString());
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("param_duracion",45, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // param_circular ::= CIRCULAR EQUAL STRING 
            {
              Boolean RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        String text = num.toString();
                        text = text.substring(1, text.length() - 1);
                        if(text.equalsIgnoreCase("Si")){
                                RESULT = true;
                        }
                        RESULT = false;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("param_circular",53, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // solicitudes ::= solicitud 
            {
              Solicitud RESULT =null;
		int solleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int solright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Solicitud sol = (Solicitud)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        RESULT = sol;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("solicitudes",38, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // solicitud ::= etiqueta_solicitud lista 
            {
              Solicitud RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Solicitud l = (Solicitud)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        RESULT =l;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("solicitud",37, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista ::= tipo nombre 
            {
              Solicitud RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Solicitud n = (Solicitud)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                if(n!=null){
                        n.setTipo(t, cur_token.left, cur_token.right);
                }
                RESULT = n;
    
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("lista",36, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= etiqueta_tipo tipos etiqueta_tipo_cl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		RESULT=e;
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= etiqueta_tipo error etiqueta_tipo_cl 
            {
              String RESULT =null;
		parser.report_error("Se esperaba Lista o Pista","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= error 
            {
              String RESULT =null;
		parser.report_error("Se esperaba una solicitud","Inicio ilegal de la expresion");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("tipo",39, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipos ::= LISTA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		RESULT=e.toString();
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipos ::= PISTA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		RESULT=e.toString();
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // nombre ::= solicitud_nombre nombre 
            {
              Solicitud RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()).right;
		Solicitud e = (Solicitud)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.peek()).value;
		
                        if(e!=null){
                                if(sn!=null){
                                        e.setNombre(sn, cur_token.left, cur_token.right);
                                }
                        }
                        RESULT = e;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("nombre",35, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // nombre ::= etiqueta_solicitud_cl 
            {
              Solicitud RESULT =null;
		
                Solicitud solicitud = new Solicitud(list);
                solicitud.setSolicitud(true);
                RESULT = solicitud;
            
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("nombre",35, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nombre ::= error 
            {
              Solicitud RESULT =null;
		 parser.report_error("Se esperaba una etiqueta nombre o cierre de solicitud", "Estructura mal realizada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("nombre",35, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // solicitud_nombre ::= etiqueta_nombre STRING etiqueta_nombre_cl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)).value;
		
                        String string = e.toString();
                        string = string.substring(1, string.length() - 1);
                        RESULT = string;
                
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("solicitud_nombre",41, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // solicitud_nombre ::= etiqueta_nombre error etiqueta_nombre_cl 
            {
              String RESULT =null;
		parser.report_error("Se necesita una cadena en etiqueta nombre", "Etiqueta nombre mal realizada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("solicitud_nombre",41, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // crear_solicitud ::= etiqueta_solicitud big_data 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("crear_solicitud",33, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // big_data ::= throw_tipo big_data_re 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("big_data",8, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // big_data_re ::= container_data big_data_re 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("big_data_re",9, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // big_data_re ::= etiqueta_solicitud_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("big_data_re",9, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // container_data ::= etiqueta_datos container_big_data etiqueta_datos_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("container_data",10, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // container_big_data ::= throw_canal throw_nota throw_octava throw_duracion 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("container_big_data",11, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // etiqueta_datos ::= LESS DATOS GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_datos",12, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // etiqueta_datos_cl ::= LESS DIV DATOS GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_datos_cl",13, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // throw_duracion ::= etiqueta_duracion NUMBER etiqueta_duracion_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("throw_duracion",14, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // etiqueta_duracion ::= LESS DURACION GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_duracion",15, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // etiqueta_duracion_cl ::= LESS DIV DURACION GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_duracion_cl",16, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // throw_octava ::= etiqueta_octava NUMBER etiqueta_octava_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("throw_octava",17, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // etiqueta_octava ::= LESS OCTAVA GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_octava",18, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // etiqueta_octava_cl ::= LESS DIV OCTAVA GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_octava_cl",19, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // throw_nota ::= etiqueta_nota NOTE etiqueta_nota_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("throw_nota",20, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // etiqueta_nota ::= LESS NOTA GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nota",21, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // etiqueta_nota_cl ::= LESS DIV NOTA GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nota_cl",22, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // throw_canal ::= etiqueta_canal NUMBER etiqueta_canal_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("throw_canal",23, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // etiqueta_canal ::= LESS CANAL GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_canal",24, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // etiqueta_canal_cl ::= LESS DIV CANAL GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_canal_cl",25, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // throw_tipo ::= etiqueta_tipo SIMBOLO etiqueta_tipo_cl 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("throw_tipo",26, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // etiqueta_solicitud ::= LESS SOLICITUD GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud",29, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // etiqueta_solicitud ::= LESS error GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"solicitud\" en etiqueta solicitud", "Etiqueta solicitud mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud",29, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // etiqueta_solicitud ::= LESS SOLICITUD error 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \">\" en ciere de etiqueta solicitud", "Etiqueta solicitud mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud",29, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // etiqueta_solicitud_cl ::= LESS DIV SOLICITUD GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud_cl",30, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // etiqueta_solicitud_cl ::= error DIV SOLICITUD GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"<\" para iniciar cierre de etiqueta","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud_cl",30, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // etiqueta_solicitud_cl ::= LESS error SOLICITUD GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"/\" en cierre de etiqueta solicitud","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud_cl",30, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // etiqueta_solicitud_cl ::= LESS DIV error GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"solciitud\" en cierre de etiqueta solicitud","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud_cl",30, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // etiqueta_solicitud_cl ::= LESS DIV SOLICITUD error 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \">\" para cerrar la etiqueta solicitud","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_solicitud_cl",30, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // etiqueta_tipo ::= LESS TIPO GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo",27, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // etiqueta_tipo ::= LESS error GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"tipo\" en etiqueta tipo","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo",27, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // etiqueta_tipo ::= LESS TIPO error 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \">\" en etiqueta tipo","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo",27, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // etiqueta_tipo_cl ::= LESS DIV TIPO GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo_cl",28, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // etiqueta_tipo_cl ::= error DIV TIPO GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"<\" para inicio de cierre de etiqueta tipo","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo_cl",28, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // etiqueta_tipo_cl ::= LESS error TIPO GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"/\" en cierre de etiqueta tipo","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo_cl",28, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // etiqueta_tipo_cl ::= LESS DIV error GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"tipo\" en cierre de etiqueta tipo","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo_cl",28, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // etiqueta_tipo_cl ::= LESS DIV TIPO error 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \">\" para cerrar la etiqueta tipo","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_tipo_cl",28, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // etiqueta_nombre ::= LESS NOMBRE GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre",31, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // etiqueta_nombre ::= LESS error GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"nombre\" para iniciar etiqueta nombre","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre",31, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // etiqueta_nombre ::= LESS NOMBRE error 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \">\" para cerrar etiqueta nombre","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre",31, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // etiqueta_nombre_cl ::= LESS DIV NOMBRE GREATER 
            {
              Object RESULT =null;

              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre_cl",32, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // etiqueta_nombre_cl ::= error DIV NOMBRE GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"<\" para iniciar cierre de etiqueta nombre","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre_cl",32, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // etiqueta_nombre_cl ::= LESS error NOMBRE GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"/\" en cierre de etiqueta nombre","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre_cl",32, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // etiqueta_nombre_cl ::= LESS DIV error GREATER 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \"nombre\" en cierre de etiqueta nombre","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre_cl",32, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // etiqueta_nombre_cl ::= LESS DIV NOMBRE error 
            {
              Object RESULT =null;
		parser.report_error("Se esperaba \">\" para cerrar etiqueta nombre","Etiqueta mal declarada");
              CUP$CommunicationSyntax$result = parser.getSymbolFactory().newSymbol("etiqueta_nombre_cl",32, ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.elementAt(CUP$CommunicationSyntax$top-3)), ((java_cup.runtime.Symbol)CUP$CommunicationSyntax$stack.peek()), RESULT);
            }
          return CUP$CommunicationSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CommunicationSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CommunicationSyntax$do_action(
    int                        CUP$CommunicationSyntax$act_num,
    java_cup.runtime.lr_parser CUP$CommunicationSyntax$parser,
    java.util.Stack            CUP$CommunicationSyntax$stack,
    int                        CUP$CommunicationSyntax$top)
    throws java.lang.Exception
    {
              return CUP$CommunicationSyntax$do_action_part00000000(
                               CUP$CommunicationSyntax$act_num,
                               CUP$CommunicationSyntax$parser,
                               CUP$CommunicationSyntax$stack,
                               CUP$CommunicationSyntax$top);
    }
}

}
