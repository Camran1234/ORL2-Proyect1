import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;

parser code {:
:}

terminal DECIMAL, NUMBER, ELSE, SWITCH, CASE, EXIT, DEFAULT, DOR, RER, DO, RE, MI , FA, LA, SOL, SI,
PISTA, EXTIENDE, REPRODUCIR, ESPERAR, ORDENAR, ASCENDENTE, DESCENDENTE, PARES, IMPARES, PRIMOS, SUMARIZAR,
LONGITUD, MENSAJE, PRINCIPAL, KEEP, VAR, ENTERO, DOBLE, BOOLEAN, CARACTER, CADENA, ARREGLO, STRING,
FOR, WHILE, HACER, CONTINUE, EQUAL, EQUALIZATION, DIFFERENTIATION, GREATER_THAN, LESSER_THAN, GREATER, LESSER,
NULL_, EQUAL_MORE, INCREASE, DECREASE, ADD, MINUS, MULTIPLY, DIV, MODULE, POW , OPEN_BRACKET, CLOSE_BRACKET, OPEN_CURLY,
CLOSE_CURLY, OPEN_PARENTHESIS, CLOSE_PARENTHESIS, COLON, COMA, NAND, AND, NOR, OR, XOR, NOT,
TAB, SPACE, SIMBOLO ;

non terminal principal, tab, tab_re, instruction, notas, ordenar_options, reproducir_syntax, esperar_syntax,
sumarizar_syntax, longitud_syntax, mensaje_syntax, ordenar_syntax, func_especiales, kf, function, type_function,
multiple_v, multiple_v_re, function_variables, pista, d, d_, increm_variables, increm, v_for, assign_for, v, data_type,
variables, variables_re, k, type, assign_special, assign, equal, array, dimension, array_assign, assign_arr, assign_arr_re, mult_values,
mult_values_re, value, if, block_if, block_elseif, block_else, condition, condition_re, comparation, condition_for, condition_re_for,
comparation_for, instruction_switch, switch, cases, for, for_instructions, for_condition, for_increm, while, instruction_do_while,
do_while;

/*precedences*/

precedence left ADD, MINUS;
precedence left DIV, MULTIPLY, MODULE;
precedence left POW;
precedence left NULL_;
precedence left EQUALIZATION, DIFFERENTIATION, LESSER, LESSER_THAN, GREATER, GREATER_THAN;
precedence left NOT;
precedence left AND, NAND;
precedence left OR, NOR, XOR;
precedence left OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
precedence left ELSE;


start with main_body;

/*Inicio de la gramatica*/

main_body ::= principal main_body
            |pista main_body
            |function main_body
            |SPACE main_body
            |/*empty*/
            ;

    /*PRINCIPAL*/
principal ::= PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS SPACE instruction
        |PRINCIPAL error CLOSE_PARENTHESIS SPACE instruction
        |PRINCIPAL OPEN_PARENTHESIS error SPACE instruction
        |PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error instruction
        ;

    /*PISTA*/
pista ::= PISTA SIMBOLO d instruction
        |PISTA error d instruction
        |PISTA SIMBOLO error instruction
        ;

d ::= EXTIENDE SIMBOLO d_
    |SPACE
    ;

d_ ::= COMA SIMBOLO d_
    |error SIMBOLO d_
    |COMA error d_
    |SPACE
    ;

    /*FUNCTION*/


kf ::= KEEP
        |/*empty*/
        ;

function ::= kf type_function SIMBOLO OPEN_PARENTHESIS  multiple_v  SPACE function_instruction
                |kf type_function error OPEN_PARENTHESIS multiple_v SPACE function_instruction
                |kf type_function SIMBOLO error multiple_v SPACE function_instruction
                |kf type_function SIMBOLO OPEN_PARENTHESIS multiple_v error function_instruction
            ;

type_function ::= data_type
            ;

multiple_v ::= function_variables multiple_v_re
            |CLOSE_PARENTHESIS
            ;

multiple_v_re ::= COMA function_variables multiple_v_re
                |error function_variables multiple_v_re
                |CLOSE_PARENTHESIS
                ;

function_variables ::= data_type SIMBOLO
                        |data_type error
                    ;

/*INCREMENTACION DE VARIABLES*/
increm_variables ::= SIMBOLO increm SPACE
                    ;

increm ::= INCREASE
            |DECREASE
            |error;

/*Variables for*/

v_for ::= type SIMBOLO assign_for
        |SIMBOLO assign_for
        ;

assign_for ::= equal value COLON
    |equal array_assign COLON
    | increm COLON
    ;

/*VARIABLES*/

v ::= type variables assign
    |variables assign
    ;

data_type ::= ENTERO array
        |DOBLE array
        |BOOLEAN array
        |CADENA array
        |CARACTER array
        |error
        ;

variables ::= SIMBOLO variables_re
            |error variables_re
            ;

variables_re ::= COMA SIMBOLO variables_re
            |COMA error variables_re
            |/*empty*/
            ;

k ::=   KEEP VAR
        |VAR
        |KEEP error
        ;
type ::= k data_type 
        ;


/*ESPECIALES*/
tab ::= TAB tab
        |/*empty*/
        ;