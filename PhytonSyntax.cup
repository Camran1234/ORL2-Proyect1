import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;

parser code {:
:}

terminal DECIMAL, NUMBER, PISTA, EXTIENDE, REPRODUCIR, ESPERAR, ORDENAR, ASCENDENTE, DESCENDENTE, PARES, IMPARES, 
PRIMOS, SUMARIZAR, LONGITUD, MENSAJE, PRINCIPAL, KEEP, VAR, ENTERO, DOBLE, BOOLEAN, CARACTER, CADENA, ARREGLO, SIMBOLO,
STRING, CHAR, ELSE, SWITCH, CASE, EXIT, DEFAULT, FOR, WHILE, HACER, CONTINUE, DOR, RER, DO, RE, MI, FA, SOL, LA, SI,
EQUAL, EQUALIZATION, DIFFERENTIATION, GREATER_THAN, LESSER_THAN, NULL_, GREATER, LESSER, EQUAL_MORE, INCREASE, DECREASE,
ADD, MINUS, MULTIPLY, DIV, MODULE, POW, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARENTHESIS, CLOSE_PARENTHESIS, COLON, COMA,
NAND, AND, NOR, OR, XOR, NOT, TAB, SPACE, OPEN_CURLY, CLOSE_CURLY, RETORNA , TRUE, FALSE; 

non terminal principal, tab, tab_re, instruction, notas, ordenar_options, reproducir_syntax, esperar_syntax,
sumarizar_syntax, longitud_syntax, mensaje_syntax, ordenar_syntax, func_especiales, kf, function, type_function,
multiple_v, multiple_v_re, function_variables, pista, d, d_, increm_variables, increm, v_for, assign_for, v, data_type,
variables, variables_re, k, type, assign_special, assign, equal, array, dimension, array_assign, assign_arr, assign_arr_re, mult_values,
mult_values_re, value, if, block_if, block_elseif, block_else, condition, condition_re, comparation, condition_for, condition_re_for,
comparation_for, instruction_switch, switch, cases, for, for_instructions, for_condition, for_increm, while, instruction_do_while,
do_while;

/*precedences*/

precedence left ADD, MINUS;
precedence left DIV, MULTIPLY, MODULE;
precedence left POW;
precedence left NULL_;
precedence left EQUALIZATION, DIFFERENTIATION, LESSER, LESSER_THAN, GREATER, GREATER_THAN;
precedence left NOT;
precedence left AND, NAND;
precedence left OR, NOR, XOR;
precedence left OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
precedence left ELSE;

start with instruction;

principal ::= PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS SPACE instruction
        |PRINCIPAL error CLOSE_PARENTHESIS SPACE instruction
        |PRINCIPAL OPEN_PARENTHESIS error SPACE instruction
        |PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error instruction
        ;

/*Declaracion de variables, asignaciones, incrementos, for, while, do_while, if, switch, funciones especiales*/

/*TAB*/
tab ::= TAB tab_re
        ;

tab_re ::= TAB tab_re
        |/*empty*/
        ;

instruction ::= principal instruction
                |pista instruction
                |function instruction
                |tab func_especiales
                |tab v
                |tab for
                |tab while
                |tab do_while
                |tab if
                |tab switch
                |tab RETORNA value instruction
                |tab CONTINUE value instruction
                |tab SPACE instruction
                |SPACE instruction
                |error instruction 
                |tab instruction
                |/*empty*/
                ;



                        

/*NOTAS MUSICALES*/
notas ::= DO
        |RE
        |MI
        |FA
        |SOL
        |LA
        |SI
        |DOR
        |RER
        |error
        ;

/*FUNCIONES ESPECIALES*/

ordenar_options ::= ASCENDENTE
                |DESCENDENTE
                |PARES
                |IMPARES
                |PRIMOS
                |error 
                ;

reproducir_syntax ::= notas COMA value COMA value COMA value CLOSE_PARENTHESIS
                |notas error value COMA value COMA value CLOSE_PARENTHESIS
                |notas COMA value error value COMA value CLOSE_PARENTHESIS
                |notas COMA value COMA value error value CLOSE_PARENTHESIS
                |notas COMA value COMA value COMA value error
                    ;

esperar_syntax ::= value COMA value CLOSE_PARENTHESIS
                |value error value CLOSE_PARENTHESIS
                |value COMA value error
                ;

sumarizar_syntax ::= value CLOSE_PARENTHESIS
                |value error
                    ;

longitud_syntax ::= value CLOSE_PARENTHESIS
                |value error
                    ;

mensaje_syntax ::= value CLOSE_PARENTHESIS
                |value error
                    ;

ordenar_syntax ::= SIMBOLO COMA ordenar_options CLOSE_PARENTHESIS
                |error COMA ordenar_options CLOSE_PARENTHESIS
                |SIMBOLO error ordenar_options CLOSE_PARENTHESIS
                |SIMBOLO COMA ordenar_options error
                ;

func_especiales ::= REPRODUCIR OPEN_PARENTHESIS reproducir_syntax
                    |REPRODUCIR error reproducir_syntax
                    |SUMARIZAR OPEN_PARENTHESIS sumarizar_syntax
                    |SUMARIZAR error sumarizar_syntax
                    |LONGITUD OPEN_PARENTHESIS longitud_syntax
                    |LONGITUD error longitud_syntax
                    |ESPERAR OPEN_PARENTHESIS esperar_syntax
                    |ESPERAR error esperar_syntax
                    |MENSAJE OPEN_PARENTHESIS mensaje_syntax
                    |MENSAJE error mensaje_syntax
                    |ORDENAR OPEN_PARENTHESIS ordenar_syntax
                    |ORDENAR error ordenar_syntax
                    ;



/*FUNCTION*/

kf ::= KEEP type_function
        |type_function
        ;

function ::= kf SIMBOLO OPEN_PARENTHESIS  multiple_v  SPACE instruction
                |kf error OPEN_PARENTHESIS multiple_v SPACE instruction
                |kf SIMBOLO error multiple_v SPACE instruction
                |kf SIMBOLO OPEN_PARENTHESIS multiple_v error instruction
            ;

type_function ::= data_type
            ;

multiple_v ::= function_variables multiple_v_re
            |CLOSE_PARENTHESIS
            ;

multiple_v_re ::= COMA function_variables multiple_v_re
                |error function_variables multiple_v_re
                |CLOSE_PARENTHESIS
                ;

function_variables ::= data_type SIMBOLO
                        |data_type error
                    ;

/*PISTA*/
pista ::= PISTA SIMBOLO d instruction
    |PISTA error d instruction
    |PISTA SIMBOLO error instruction
    ;

d ::= EXTIENDE SIMBOLO d_
    |SPACE
    ;


d_ ::= COMA SIMBOLO d_
    |error SIMBOLO d_
    |COMA error d_
    | SPACE
    ;

/*INCREMENTACION DE VARIABLES*/
increm_variables ::= SIMBOLO increm SPACE
                    ;

increm ::= INCREASE
            |DECREASE
            |error;

/*Variables for*/

v_for ::= type SIMBOLO assign_for
        |SIMBOLO assign_for
        ;

assign_for ::= equal value COLON
    |equal array_assign COLON
    | increm COLON
    ;

/*VARIABLES*/

v ::= type variables assign_special /*Declaracion*/
    |variables assign /*Solo asignacion*/
    ;

data_type ::= ENTERO array
        |DOBLE array
        |BOOLEAN array
        |CADENA array
        |CARACTER array
        |error
        ;

variables ::= SIMBOLO variables_re
            ;

variables_re ::= COMA SIMBOLO variables_re
            |COMA error variables_re
            |error SIMBOLO variables_re
            |/*empty*/
            ;

k ::=   KEEP VAR
        |VAR
        |KEEP error
        ;
type ::= k data_type 
        ;

/*ASIGNAR VALORES*/
assign_special ::= assign
                |SPACE
                ;

assign ::= equal value SPACE
    |equal array_assign SPACE
    | increm SPACE
    ;

equal ::= EQUAL
        |EQUAL_MORE
        |error
        ;

array ::= ARREGLO dimension
        |/*empty*/
        ;

dimension ::= OPEN_BRACKET value CLOSE_BRACKET dimension
        |/*empty*/
        ;

array_assign ::= OPEN_CURLY assign_arr 
                ;

assign_arr ::= OPEN_CURLY mult_values assign_arr_re
                ;

assign_arr_re ::= COMA OPEN_CURLY mult_values assign_arr_re
                | CLOSE_CURLY
                ;

mult_values ::= value mult_values_re
            ;

mult_values_re ::= COMA value mult_values_re
                |CLOSE_CURLY
                ;

    /*VALORES*/
value ::= NUMBER
        |DECIMAL
        |STRING
        |CHAR
        |value ADD value
        |value MINUS value
        |value MULTIPLY value
        |value DIV value
        |value POW value
        |value MODULE value
        |OPEN_PARENTHESIS value CLOSE_PARENTHESIS
        |SIMBOLO dimension
        |TRUE
        |func_especiales
        |FALSE
        |error
        ;

/*SI*/

if ::= block_if
        |block_elseif
        |block_else
        ;

block_if ::= SI OPEN_PARENTHESIS condition SPACE 
        |SI error condition SPACE
        |SI OPEN_PARENTHESIS condition error
        ;

block_elseif ::= ELSE SI OPEN_PARENTHESIS condition SPACE 
                |ELSE error OPEN_PARENTHESIS condition SPACE 
                |ELSE SI error condition SPACE 
                |ELSE SI OPEN_PARENTHESIS condition error 
                ;

block_else ::= ELSE SPACE 
        |ELSE error 
        ;

/*CONDICION*/
/*this production end in close_parenthesis*/

condition ::= comparation condition_re
            ;

condition_re ::= AND comparation condition_re       
                |NAND comparation condition_re
                |OR comparation condition_re
                |NOR comparation condition_re
                |XOR comparation condition_re
                |CLOSE_PARENTHESIS
                |error comparation condition_re
                ;

comparation ::= comparation EQUALIZATION comparation
                |comparation DIFFERENTIATION comparation    
                |comparation GREATER comparation
                |comparation GREATER_THAN comparation
                |comparation LESSER comparation
                |comparation LESSER_THAN comparation
                |NULL_ comparation
                |NOT comparation
                |OPEN_PARENTHESIS comparation CLOSE_PARENTHESIS
                |value
                ;

/*Condicion para for*/
condition_for ::= comparation_for condition_re_for
            ;

condition_re_for ::= AND comparation_for condition_re_for       
                |NAND comparation_for condition_re_for
                |OR comparation_for condition_re_for
                |NOR comparation_for condition_re_for
                |XOR comparation_for condition_re_for
                |COLON
                |error comparation_for condition_re_for
                ;

comparation_for ::= comparation_for EQUALIZATION comparation_for
                |comparation_for DIFFERENTIATION comparation_for    
                |comparation_for GREATER comparation_for
                |comparation_for GREATER_THAN comparation_for
                |comparation_for LESSER comparation_for
                |comparation_for LESSER_THAN comparation_for
                |NULL_ comparation_for
                |NOT comparation_for
                |OPEN_PARENTHESIS comparation_for CLOSE_PARENTHESIS
                |value
                ;
/*SWITCH*/

instruction_switch ::= tab func_especiales instruction_switch
                |tab v instruction_switch 
                |tab for instruction_switch
                |tab while instruction_switch
                |tab do_while instruction_switch
                |tab if instruction_switch
                |tab switch instruction_switch
                |tab RETORNA value instruction_switch
                |tab CONTINUE value instruction_switch
                |tab SPACE instruction_switch
                |SPACE instruction_switch
                |tab EXIT
                |error instruction_switch
                |tab error_ instruction_switch
                ;

switch ::= SWITCH OPEN_PARENTHESIS SIMBOLO CLOSE_PARENTHESIS SPACE cases
            | SWITCH error SIMBOLO CLOSE_PARENTHESIS SPACE cases
            | SWITCH OPEN_PARENTHESIS error CLOSE_PARENTHESIS SPACE cases
            | SWITCH OPEN_PARENTHESIS SIMBOLO error SPACE cases
            | SWITCH OPEN_PARENTHESIS SIMBOLO CLOSE_PARENTHESIS error cases
            ;

cases ::= tab CASE value SPACE instruction_switch cases
        | tab error value SPACE instruction_switch cases
        | tab CASE value error instruction_switch cases
        | tab DEFAULT value SPACE
        | tab DEFAULT value error
        | error cases
        | SPACE
        ;

/*FOR*/

for ::= FOR OPEN_PARENTHESIS for_instructions SPACE /*instruction ciclo*/
        ;

for_instructions ::= v_for COLON for_condition
                ;

for_condition ::= condition_for for_increm
                ;

for_increm ::= increm_variables CLOSE_PARENTHESIS
                ;

/*WHILE*/

while ::= WHILE OPEN_PARENTHESIS condition SPACE 
        |WHILE error condition SPACE
        |WHILE error condition error
        ;

/*DO WHILE*/

instruction_do_while ::= tab func_especiales instruction_do_while
                |tab v instruction_do_while
                |tab for instruction_do_while
                |tab do_while instruction_do_while
                |tab if instruction_do_while
                |tab switch instruction_do_while
                |tab RETORNA value instruction_do_while
                |tab CONTINUE instruction_do_while
                |tab SPACE instruction_do_while
                |tab while 
                |SPACE instruction_do_while
                |tab error instruction_do_while
                |error instruction_do_while
                ;


do_while ::= HACER SPACE
        |HACER error
        ;



