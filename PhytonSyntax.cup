package valiente.orl2.phyton.parser;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import valiente.orl2.phyton.conditions.*;
import valiente.orl2.phyton.cycles.*;
import valiente.orl2.phyton.instructions.*;
import valiente.orl2.phyton.specialInstructions.*;
import valiente.orl2.phyton.values.*;
import valiente.orl2.phyton.error.*;

parser code {:
        int errors=0;
        String tokenError="";
        int lineError, columnError =0;
        String expectedTokens="";
        ArrayList<SyntaxError> list = new ArrayList();
        ArrayList<Instruction> instructions = new ArrayList();

        public ArrayList<Instruction> getInstructions(){
                return instructions;
        }

        public ArrayList<SyntaxError> getList(){
                return list;
        }

        public void report_error(String message, Object info) { 
                if (info instanceof String){
                        Symbol s = cur_token;
                        //System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);;
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
        }

        public void report_error_final(String message, Object info){
                if (info instanceof String){
                        Symbol s = cur_token;
                        errors++;       
                        //System.err.println("  "+ errors + "==> " + info + ": "+ message);
                        SyntaxError error = new SyntaxError(info.toString(), tokenError, lineError, columnError);
                        error.setExpectedTokens(expectedTokens);
                        error.setDescription(message);
                        list.add(error);
                        System.err.println(error.getDescription());
                }
                
        }

    @Override
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
            int column = symbol.right;
            String token = (String) cur_token.value;
            //We get the production
                tokenError = token;
                lineError = line;
                columnError = column;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
                tokenError = (String) cur_token.value;
                lineError = symbol.left;
                columnError = symbol.right;
                expectedTokens = "";
                for(int index=0; index<expected_token_ids().size() ; index++){
                    //We traduce the token to a form that the user might understand
                    expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
                    expectedTokens += ", ";
                }
                report_error_final("Estado Ilegal de Expresion", "Sintaxis incorrecta");
        }

:}

terminal DECIMAL, NUMBER, PISTA, EXTIENDE, REPRODUCIR, ESPERAR, ORDENAR, ASCENDENTE, DESCENDENTE, PARES, IMPARES, 
PRIMOS, SUMARIZAR, LONGITUD, MENSAJE, PRINCIPAL, KEEP, VAR, ENTERO, DOBLE, BOOLEAN, CARACTER, CADENA, ARREGLO, SIMBOLO,
STRING, CHAR, ELSE, SWITCH, CASE, EXIT, DEFAULT, FOR, WHILE, HACER, CONTINUE, DOR, RER, DO, RE, MI, FA, SOL, LA, SI,
EQUAL, EQUALIZATION, DIFFERENTIATION, GREATER_THAN, LESSER_THAN, NULL_, GREATER, LESSER, EQUAL_MORE, INCREASE, DECREASE,
ADD, MINUS, MULTIPLY, DIV, MODULE, POW, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARENTHESIS, CLOSE_PARENTHESIS, COLON, COMA,
NAND, AND, NOR, OR, XOR, NOT, TAB, SPACE, OPEN_CURLY, CLOSE_CURLY, RETORNA , TRUE, FALSE; 

non terminal new_assign, array_assign, assign_arr, 
mult_values, mult_values_re,  kar, method_value, method_value_re;

non terminal For for_instructions, for_condition, for_increm;
non terminal ArrayList<Case> cases;
non terminal Condition condition, condition_re;
non terminal Comparation comparation;
non terminal Assignment assign, assign_special, assign_for;
non terminal ArrayList<Operation> multiple_v, multiple_v_re, d, d_, array,dimension, dimension_re, function_mode;
non terminal Esperar esperar_syntax;
non terminal VariableIndicator type, type_function, kf;
non terminal ArrayList<Variable> variables, variables_re;
non terminal Variable increm_variables, v_for;
non terminal Boolean k;
non terminal Integer tab, tab_re;
non terminal String data_type, equal, increm;
non terminal Function function, throw_function;
non terminal Principal principal;
non terminal Pista pista;
non terminal Instruction func_especiales, v, for, while, do_while, if, switch, reproducir_syntax, sumarizar_syntax, longitud_syntax,
mensaje_syntax, ordenar_syntax;
non terminal ArrayList<Instruction> main_body, instruction, instruction_switch;
non terminal Operation notas, value, ordenar_options, function_variables;
non terminal If block_if;
non terminal ElseIf block_elseif;
non terminal Else block_else;
/*precedences*/

precedence left ADD, MINUS;
precedence left DIV, MULTIPLY, MODULE;
precedence left POW;
precedence left NULL_;
precedence left EQUALIZATION, DIFFERENTIATION, LESSER, LESSER_THAN, GREATER, GREATER_THAN;
precedence left NOT;
precedence left AND, NAND;
precedence left OR, NOR, XOR;
precedence left OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
precedence left ELSE;

start with main_body;

kar ::= KEEP
        |/*empty*/
        ;

principal ::= kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS tab_re SPACE {:
                RESULT = new Principal(cur_token.left, cur_token.right);
        :}
        |kar PRINCIPAL error:e CLOSE_PARENTHESIS SPACE {:parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); :}
        |kar PRINCIPAL OPEN_PARENTHESIS error:e SPACE {:parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); :}
        |kar PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error:e {:parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta");:}
        ;

/*Declaracion de variables, asignaciones, incrementos, for, while, do_while, if, switch, funciones especiales*/

/*TAB*/
tab ::= TAB tab_re:e {: RESULT=1+e; :}
        ;

tab_re ::= TAB tab_re:e {: RESULT=1+e; :}
        |/*empty*/ {: RESULT=0; :}
        ;

main_body ::= instruction:ins {: if(ins!=null){instructions = ins;} :}
        ;

instruction ::= tab:numTab principal:prin instruction:ins {: 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(prin!=null){
                                prin.setIndentation(numTab);
                                lista.add(prin);
                        }
                        RESULT = lista;
                }
                :}
                |pista:pis instruction:ins {: 
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(pis!=null){
                                lista.add(pis);
                        }
                        RESULT = lista;
                }
                :}
                |tab:numTab throw_function:func tab_re SPACE instruction:ins {:
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:numTab function:func instruction:ins  {:
                if(ins!=null){
                        ArrayList<Instruction> lista = ins;
                        if(func!=null){
                                lista.add(func);
                                func.setIndentation(numTab);
                        }
                        RESULT = lista;
                }
                :}
                |tab:numTab func_especiales:e1 SPACE instruction:ins {:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                        }
                :}
                |tab:numTab v:e1 instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab for:e1 instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab while:e1 instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab do_while:e1 instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab if:e1 instruction:ins {:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab switch:e1 instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab RETORNA:e1 value tab_re SPACE instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab:numTab CONTINUE:e1 tab_re SPACE instruction:ins{:
                        if(ins!=null){
                                ArrayList<Instruction> lista = ins;
                                int tabNumber = numTab;
                                
                        }
                :}
                |tab SPACE instruction:ins {:RESULT = ins;:}
                |SPACE instruction:ins {:RESULT = ins;:} 
                |/*empty*/ {:ArrayList<Instruction> list = new ArrayList(); RESULT=list;:}
                ;
                        

/*NOTAS MUSICALES*/
notas ::= DO:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |RE:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |MI:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |FA:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |SOL:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |LA:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |SI:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |DOR:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |RER:r {:
                Value value = new Value("nota", r.toString()); 
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                RESULT=operation;
        :}
        |error:e {:parser.report_error("Valor incorrecto en, se esperaba una nota musical","Valor inesperado"); :}
        ;

/*FUNCIONES ESPECIALES*/

ordenar_options ::= ASCENDENTE{:
                        Value value = new Value("string", "ascendente");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                :}
                |DESCENDENTE{:
                        Value value = new Value("string", "descendente");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                :}
                |PARES{:
                        Value value = new Value("string", "pares");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                :}
                |IMPARES{:
                        Value value = new Value("string", "impares");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                :}
                |PRIMOS{:
                        Value value = new Value("string", "primos");
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        RESULT = operation;
                :}
                |error:e {: parser.report_error("Valor incorrecto en, se esperaba un metodo de ordenamiento","Valor inesperado"); :} 
                ;

reproducir_syntax ::= notas:e1 COMA value:e2 COMA value:e3 COMA value:e4 CLOSE_PARENTHESIS  {:
                        Reproducir reproducir = new Reproducir(cur_token.left, cur_token.right);
                        reproducir.setNota(e1);
                        reproducir.setOctava(e2);
                        reproducir.setMilisegundos(e3);
                        reproducir.setCanal(e4);
                        RESULT = reproducir;
                :}
                |notas error:e value COMA value COMA value CLOSE_PARENTHESIS SPACE {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
                |notas COMA value error:e value COMA value CLOSE_PARENTHESIS SPACE {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
                |notas COMA value COMA value error:e value CLOSE_PARENTHESIS SPACE {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
                |notas COMA value COMA value COMA value error:e  SPACE {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
                |notas:e1 COMA value:e2 COMA value:e3 COMA value:e4 CLOSE_PARENTHESIS error {: parser.report_error("Se esperaba un salto delinea ","Sintaxis incorrecta"); :}
                    ;

esperar_syntax ::= value:milisegundos COMA value:canal CLOSE_PARENTHESIS  {:
                        Esperar esperar = new Esperar(cur_token.left, cur_token.right);
                        Operation miliSegundos=null;
                        Operation canalOp=null;
                        if(milisegundos!=null && canal!=null){
                                miliSegundos = milisegundos;
                                canalOp = canal;
                        }
                        esperar.setMilisegundos(miliSegundos);
                        esperar.setCanal(canalOp);
                        RESULT =esperar;
                :}
                |value error:e value CLOSE_PARENTHESIS SPACE {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
                |value COMA value error:e SPACE {: parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); :}
                |value:milisegundos COMA value:canal CLOSE_PARENTHESIS error {: parser.report_error("Se esperaba un salto de linea ","Sintaxis incorrecta"); :}
                ;

sumarizar_syntax ::= value:e1 CLOSE_PARENTHESIS  {:
                        Sumarizar sumarizar = new Sumarizar(cur_token.left, cur_token.right);
                        sumarizar.setArreglo(e1);
                        RESULT = sumarizar;
                :}
                |value error:e SPACE{: parser.report_error("Se esperaba en \")\" ","Sintaxis incorrecta"); :}
                |value CLOSE_PARENTHESIS error {: parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); :}
                    ;

longitud_syntax ::= value:e1 CLOSE_PARENTHESIS  {:
                        Longitud longitud = new Longitud(cur_token.left, cur_token.right);
                        longitud.setArray(e1);
                        RESULT = longitud;
                :}
                |value error:e SPACE {: parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); :}
                |value error error {: parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); :}
                    ;

mensaje_syntax ::= value:e1 CLOSE_PARENTHESIS  {:
                        Mensaje mensaje = new Mensaje(cur_token.left, cur_token.right);
                        mensaje.setMensaje(e1);
                        RESULT = mensaje;
                :}
                |value error:e SPACE {: parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); :}
                |value CLOSE_PARENTHESIS error {: parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); :}
                    ;

ordenar_syntax ::= value:sim COMA ordenar_options:ord CLOSE_PARENTHESIS  {:
                        Ordenar ordenar = new Ordenar(cur_token.left, cur_token.right);
                        Operation operation = sim;
                        ordenar.setArray(sim);
                        ordenar.setForma(ord);
                        RESULT = ordenar;
                :}
                |value error:e ordenar_options CLOSE_PARENTHESIS SPACE {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
                |value COMA ordenar_options error:e SPACE {: parser.report_error("Se esperaba \")\" ","Sintaxis incorrecta"); :}
                |value COMA ordenar_options CLOSE_PARENTHESIS error {: parser.report_error("Se esperaba salto de linea ","Sintaxis incorrecta"); :}
                ;

func_especiales ::= REPRODUCIR OPEN_PARENTHESIS reproducir_syntax:e1  {:
                        RESULT = e1;
                        :}
                    |REPRODUCIR error:e reproducir_syntax {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
                    |SUMARIZAR OPEN_PARENTHESIS sumarizar_syntax:e1{:
                        RESULT = e1;
                        :}
                    |SUMARIZAR error:e sumarizar_syntax {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
                    |LONGITUD OPEN_PARENTHESIS longitud_syntax:e1{:
                        RESULT = e1;
                        :}
                    |LONGITUD error:e longitud_syntax {: parser.report_error("Se esperaba \"(\"  ","Sintaxis incorrecta"); :}
                    |ESPERAR OPEN_PARENTHESIS esperar_syntax:e1{:
                        RESULT = e1;
                        :}
                    |ESPERAR error:e esperar_syntax {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
                    |MENSAJE OPEN_PARENTHESIS mensaje_syntax:e1{:
                        RESULT = e1;
                        :}
                    |MENSAJE error:e mensaje_syntax {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
                    |ORDENAR OPEN_PARENTHESIS ordenar_syntax:e1{:
                        RESULT = e1;
                        :}
                    |ORDENAR error:e ordenar_syntax {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
                    ;



/*FUNCTION*/

kf ::= KEEP type_function:tf function_mode:m{:
        if(tf!=null){
                VariableIndicator indicator = tf;
                indicator.setGlobal(true);
                if(m!=null){
                        indicator.setDimension(m);
                }
                RESULT=indicator;
        }
        :}
        |type_function:tf function_mode:m    {:
        if(tf!=null){
                VariableIndicator indicator = tf;
                if(m!=null){
                        indicator.setDimension(m);
                }
                RESULT=indicator;
        }
        :}
        
        ;

function_mode ::= ARREGLO dimension:dim{:
                RESULT = dim;
                :}
                |/*empty*/
                ;

function ::= kf:variableIndicator SIMBOLO:sim OPEN_PARENTHESIS  multiple_v:mv tab_re  SPACE {:
                if(variableIndicator!=null && mv!=null){
                        VariableIndicator indicator = variableIndicator;
                        ArrayList<Operation> list = mv;
                        Value value = new Value("function",sim.toString());
                        Operation operation = new Operation(value, cur_token.left, cur_token.right);
                        Function function = new Function(cur_token.left, cur_token.right);
                        function.setName(value);
                        function.setParameters(list);
                        function.setParamsIndicator(indicator);
                        RESULT = function;
                }
                :}
                |kf error:e OPEN_PARENTHESIS multiple_v SPACE {: parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); :}
                |kf SIMBOLO error:e multiple_v SPACE {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
                |kf SIMBOLO OPEN_PARENTHESIS multiple_v error:e {: parser.report_error("Se esperaba un salto de linea ","Sintaxis incorrecta"); :}
            ;

type_function ::= data_type:data 
                {:
                String typ = "";
                ArrayList<Operation> dimension = new ArrayList();
                if(data!=null){
                        typ=data;
                }
                VariableIndicator indicator = new VariableIndicator(false, typ, dimension);
                RESULT = indicator;
                :}
            ;

multiple_v ::= function_variables:fv multiple_v_re:mvre{:
                if(mvre!=null){
                        ArrayList<Operation> list = mvre;
                        list.add(fv);
                        ArrayList<Operation> aux = new ArrayList();
                        for(int index=list.size()-1; index>=0; index--){
                                aux.add(list.get(index));
                        }
                        RESULT = aux;
                }
                :}
            |CLOSE_PARENTHESIS {:
                ArrayList<Operation> list = new ArrayList();
                RESULT = list;
            :}
            ;

multiple_v_re ::= COMA function_variables:fv multiple_v_re:mvre{:
                        if(mvre!=null){
                                ArrayList<Operation> list = mvre;
                                list.add(fv);
                                RESULT = list;
                        }
                :}
                |error:e function_variables multiple_v_re {: parser.report_error("Se esperaba una coma o \")\" ","Sintaxis incorrecta"); :}
                |CLOSE_PARENTHESIS{:
                        ArrayList<Operation> list = new ArrayList();
                        RESULT = list;
                :}
                ;

function_variables ::= data_type:data SIMBOLO:sim 
                        {:
                                Value value = new Value(data, sim.toString());
                                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                                RESULT = operation;
                        :}
                        |data_type:data ARREGLO SIMBOLO:sim dimension
                        {:
                        :}
                        |data_type:data ARREGLO SIMBOLO error
                        |data_type error:e {: parser.report_error("Error, se esperaba un nombre","Nombre no encontrado"); :}
                    ;
/*LLAMAR FUNCIONES*/
method_value ::= condition_re method_value_re
                |CLOSE_PARENTHESIS
                ;

method_value_re ::= COMA condition_re method_value_re
                |CLOSE_PARENTHESIS
                ;

throw_function ::= SIMBOLO:sim OPEN_PARENTHESIS method_value:v {:
                        /*Function function = new Function(true ,cur_token.left, cur_token.right);
                        Value value = new Value("variable",sim.toString());
                        function.setName(value);
                        function.setParameters(v);
                        RESULT = function;*/
                :}
                ;

/*PISTA*/
pista ::= PISTA SIMBOLO:sim d:extended  {:
        ArrayList<Operation> list;
        if(extended!=null){
                list = extended;
        }else{
                list = new ArrayList();
        }
        Pista function = new Pista(cur_token.left, cur_token.right);
        function.setName(sim.toString());
        function.setExtendeds(list);
        RESULT = function;
        :}
    |PISTA error:e d {: parser.report_error("Error, se esperaba un nombre de la funcion","Nombre no encontrado"); :}
    |PISTA SIMBOLO error:e {: parser.report_error("No se encontro un salto de linea o extension de pistas","Problema en Pista"); :}
    ;

d ::= EXTIENDE SIMBOLO:sim d_:d {:
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista",sim.toString());
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                ArrayList<Operation> auxiliar = new ArrayList();
                for(int index=lista.size()-1; index>=0; index--){
                        auxiliar.add(lista.get(index));
                }
                RESULT = auxiliar;
        }        
    :}
    |tab_re SPACE {:ArrayList<Operation> list = new ArrayList(); RESULT = list;:}
    ;


d_ ::=  COMA SIMBOLO:sim d_:d  {:
        if(d!=null){
                ArrayList<Operation> lista = d;
                Value value = new Value("pista", sim.toString());
                Operation operation = new Operation(value, cur_token.left, cur_token.right);
                lista.add(operation);
                RESULT = lista;
        }
        :}
    | error:e SIMBOLO d_ {: parser.report_error("Se esperaba una coma ","Sintaxis incorrecta"); :}
    | COMA error:e d_ {: parser.report_error("No se encontro la pista","Nombre no encontrado"); :}
    | tab_re SPACE {:ArrayList<Operation> list = new ArrayList(); RESULT = list;:}
    ;

/*INCREMENTACION DE VARIABLES*/
increm_variables ::= SIMBOLO:sim increm:in {:
                        Variable variable = new Variable(cur_token.left, cur_token.right);
                        variable.setName(sim.toString());
                        Assignment assignment = new Assignment(cur_token.left, cur_token.right);
                        assignment.setMetodo(in);
                        variable.setValue(assignment);
                        RESULT = variable;
                :}
                    ;

increm ::= INCREASE {:RESULT = "++";:}
            |DECREASE {:RESULT = "--";:}
            |error:e {: parser.report_error("Se esperaba ++ o -- ","Valor inesperado"); :}
            ;

/*Variables for*/

v_for ::= type:typ SIMBOLO:sym assign_for:assignfor {:
                Assignment assignment = assignfor;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                variable.setParameters(typ);
                RESULT = variable;
        :}
        |SIMBOLO:sym assign_for:assign {:
                Assignment assignment = assign;
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sym.toString());
                variable.setValue(assignment);
                RESULT = variable;
        :}
        ;

assign_for ::= equal:e1 condition_re:op {:
        if(e1!=null && op!=null){
                        String mode = e1.toString();
                        Operation operation = new Operation(op,cur_token.left, cur_token.right);
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(operation);
                        RESULT=asignacion;
        }
    :}
    ;

/*VARIABLES*/

v ::= type:typ variables:var assign_special:assign /*Declaracion*/{:
        if(var!=null){
                Assignment assignment = assign;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment, typ);
                RESULT = chunk;
        }    
    :}
    |variables:var assign:assign /*Solo asignacion*/{:
        if(var!=null){
                Assignment assignment = assign;
                ArrayList<Variable> list = var;
                VariableChunk chunk = new VariableChunk(list,assignment);
                RESULT = chunk;
        }    
    :}
    |variables:var increm:inc SPACE {:
         /*if(inc!=null){
                Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                asignacion.setMetodo(inc);
                RESULT = asignacion;
        }*/
        :}
    ;

data_type ::= ENTERO {:RESULT="entero";:} 
        |DOBLE  {:RESULT="doble";:} 
        |BOOLEAN {:RESULT="boolean";:} 
        |CADENA {:RESULT="cadena";:} 
        |CARACTER {:RESULT="caracter";:} 
        ;

variables ::= SIMBOLO:sim variables_re:arr {:
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(arr!=null){
                        lista=arr;
                        lista.add(variable);
                        ArrayList<Variable> auxiliar = new ArrayList();
                        for(int index=lista.size()-1; index>=0; index--){
                                auxiliar.add(lista.get(index));
                        }
                }
                
                RESULT = lista;
                :}
                |ARREGLO SIMBOLO variables_re dimension:dim 
            ;

variables_re ::= COMA SIMBOLO:sim variables_re:arr {: 
                Variable variable = new Variable(cur_token.left, cur_token.right);
                variable.setName(sim.toString());
                ArrayList<Variable> lista = new ArrayList();
                if(arr!=null){
                        lista = arr;
                        lista.add(variable);
                }
                RESULT=lista;
                 :}
            |COMA error:e variables_re {: parser.report_error("Se esperaba nombre de una variable ","Simbolo no encontrado"); :}
            |/*empty*/{: ArrayList<Variable> variables = new ArrayList(); RESULT =variables; :}
            ;

k ::=   KEEP VAR {:RESULT=true;:}
        |VAR {:RESULT=false;:}
        |error {:RESULT = false;  parser.report_error("Se esperaba un simbolo o declaracion de variable ","Sintaxis incorrecta"); :}
        |KEEP error:e {:
        parser.report_error("Se esperaba \"var\" ","Sintaxis incorrecta");
        RESULT=false;
        :}
        ;
type ::= k:kValue data_type:typ  {:
                String data=typ;
                boolean keep = kValue;
                ArrayList<Operation> list = new ArrayList();
                if(data==null){
                        data="";
                }
                if(list==null){
                        ArrayList<Operation> value = new ArrayList();
                        list = value;
                }
                VariableIndicator indicator = new VariableIndicator(keep, data, list);
                RESULT = indicator;
        :}
        ;

/*ASIGNAR VALORES*/
assign_special ::= assign:assi {:RESULT = assi;:}
                |tab_re SPACE 
                ;

assign ::= equal:e1 array_assign SPACE /*VERIFICAR PARA ARREGLOS*/
    |equal:e1 condition_re:re assign_special{:
                if(e1!=null && re!=null){
                        String mode = e1.toString();
                        Operation value = new Operation(re,cur_token.left, cur_token.right);
                        Assignment asignacion = new Assignment(cur_token.left, cur_token.right);
                        asignacion.setMetodo(mode);
                        asignacion.setValue(value);
                        RESULT=asignacion;
                }
    :}
    ;

equal ::= EQUAL {:RESULT = "=";:}
        |EQUAL_MORE {:RESULT = "+=";:}
        |error:e {: parser.report_error("No se pudo declarar correctamente la variable","Igualacion esperada"); :}
        ;

array ::= ARREGLO dimension:dim {: 
                if(dim!=null)
                {
                        RESULT=dim;
                }else{
                        ArrayList<Operation> list = new ArrayList(); 
                        RESULT = list;
                }
                :}
        |/*empty*/ {: ArrayList<Operation> list = new ArrayList(); RESULT=list; :}
        ;

dimension ::= dimension_re:dim OPEN_BRACKET value:v CLOSE_BRACKET  {: 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        list.add(v);
                        RESULT = list;
                }
                :}
        ;

dimension_re ::= dimension_re:dim OPEN_BRACKET value:v CLOSE_BRACKET {: 
                if(dim!=null){
                        ArrayList<Operation> list = dim;
                        list.add(v);
                        RESULT = list;
                }
                :}
                |/*empty*/{:ArrayList<Operation> lista = new ArrayList(); 
                RESULT = lista;:}
                ;
/*Asignacion de valores a arreglos*/
/*PENDIENTE*/
array_assign ::= OPEN_CURLY assign_arr new_assign
                ;

new_assign ::= COMA OPEN_CURLY assign_arr new_assign
                |/*empty*/
                ;

assign_arr ::= OPEN_CURLY mult_values CLOSE_CURLY assign_arr
                |mult_values CLOSE_CURLY 
                ;

mult_values ::= value mult_values_re
                ;

mult_values_re ::= COMA value mult_values_re
                |/*empty*/
                ;


    /*VALORES*/
value ::= NUMBER:num {: Value value = new Value("entero",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        :}
        |MINUS NUMBER:num {: Value value = new Value("entero","-"+num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        :}
        |DECIMAL:num {: Value value = new Value("doble",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        :} 
        |MINUS DECIMAL:num {: Value value = new Value("doble","-"+num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        :}
        |STRING:num {: Value value = new Value("cadena",num.toString());
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        :}
        |CHAR:num {: Value value = new Value("caracter",num.toString()); 
                        Operation operation = new Operation(value,cur_token.left,cur_token.right);
                        RESULT =operation;
                        :}
        |throw_function:num {:
                        Operation operation = new Operation(num, cur_token.left, cur_token.right);
                        RESULT = operation;
        :}
        |value:e1 ADD:r value:e2 {:
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;
                        }
                        :}
        |value:e1 MINUS:r value:e2 {:
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 :}
        |value:e1 MULTIPLY:r value:e2 {:
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 :}
        |value:e1 DIV:r value:e2 {:
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 :}
        |value:e1 POW:r value:e2 {:
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                                 :}
        |value:e1 MODULE:r value:e2 {:
                        if(e1!=null && e2!=null){ 
                                Operation left = e1;
                                Operation right = e2;
                                String operator = r.toString();
                                Operation operation = new Operation(left, right, operator, cur_token.left, cur_token.right);
                                RESULT=operation;}
                        :}
        |OPEN_PARENTHESIS value:e2 CLOSE_PARENTHESIS {:RESULT = e2;:}
        |SIMBOLO:sim dimension_re:dim {: 
        Value value = new Value(sim.toString(), dim);
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation; 
        :}
        |TRUE {:Value value = new Value("boolean","true"); 
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        :}
        |func_especiales:func {:
        Value value = new Value("specialFunction",func );
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
        RESULT=operation;
        :}
        |FALSE {:Value value = new Value("boolean","false");
        Operation operation = new Operation(value, cur_token.left, cur_token.right);
         RESULT = operation;:}
        |error {: parser.report_error("Se esperaba algun valor","Valor inesperado"); :}
        ;

/*SI*/

if ::= block_if:e1 {:RESULT=e1;:}
        |block_elseif:e1 {:RESULT=e1;:}
        |block_else:e1 {:RESULT=e1;:}
        ;

block_if ::= SI OPEN_PARENTHESIS condition:con tab_re SPACE{:
                if(con!=null){
                        If block = new If(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
        :} 
        |SI error:e condition SPACE {: parser.report_error("Se esperaba \"(\" en ","Sintaxis incorrecta"); :}
        |SI OPEN_PARENTHESIS condition error:e {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
        ;

block_elseif ::= ELSE SI OPEN_PARENTHESIS condition:con tab_re SPACE{:
                if(con!=null){
                        ElseIf block = new ElseIf(con, cur_token.left, cur_token.right);
                        RESULT = block;
                }
                :} 
                |ELSE error:e OPEN_PARENTHESIS condition SPACE {: parser.report_error("No se agrego \"Si\" en la declaracion","Sintaxis incorrecta"); :}
                |ELSE SI error:e condition SPACE {: parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); :}
                |ELSE SI OPEN_PARENTHESIS condition error:e {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
                ;

block_else ::= ELSE tab_re SPACE {:
                Else block = new Else(cur_token.left, cur_token.right);
                RESULT = block;
        :}
        |ELSE error {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :} 
        ;

/*CONDICION*/
/*this production end in close_parenthesis*/

condition ::= condition_re:con CLOSE_PARENTHESIS{:
                        if(con!=null){
                                RESULT = con;
                        }
                :}
            ;

condition_re ::= condition_re:e1 AND:f condition_re:e2 {:
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                :}
                |condition_re:e1 NAND:f condition_re:e2{:
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                :}
                |condition_re:e1 OR:f condition_re:e2{:
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                :}
                |condition_re:e1 NOR:f condition_re:e2{:
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                :}
                |condition_re:e1 XOR:f condition_re:e2{:
                        if(e1!=null && e2 !=null){
                                Condition left = e1;
                                Condition right = e2;
                                Condition condition = new Condition(left, f.toString(), right, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                :}
                |OPEN_PARENTHESIS condition_re:e1 CLOSE_PARENTHESIS {: RESULT = e1;:}
                |NULL_ condition_re:e1{:
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!!");
                                RESULT = condition;
                        }
                :}
                |NOT condition_re:e1 {:
                        if(e1!=null){
                                Condition condition = e1;
                                condition.setUnary("!");
                                RESULT = condition;
                        }
                :}
                |comparation:e1 {:
                        if(e1!=null){
                                Comparation comparation = e1;
                                Condition condition = new Condition(comparation, cur_token.left, cur_token.right);
                                RESULT = condition;
                        }
                :}
                ;

comparation ::= comparation:e1 EQUALIZATION:f comparation:e2{:
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                :}
                |comparation:e1 DIFFERENTIATION:f comparation:e2{:
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                :}
                |comparation:e1 GREATER:f comparation:e2{:
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                :}
                |comparation:e1 GREATER_THAN:f comparation:e2{:
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                :}
                |comparation:e1 LESSER:f comparation:e2{:
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                :}
                |comparation:e1 LESSER_THAN:f comparation:e2{:
                        if(e1!=null && e2!=null){
                                Comparation comparation = new Comparation(e1,e2,f.toString(), cur_token.left, cur_token.right); 
                                RESULT = comparation;
                        }
                :}
                |OPEN_PARENTHESIS comparation:e1 CLOSE_PARENTHESIS{:RESULT = e1;:}
                |value:e1 {:
                        if(e1!=null){
                                Comparation comparation = new Comparation(e1, cur_token.left, cur_token.right);
                        }
                :}
                ;
/*SWITCH*/

instruction_switch ::= tab:t func_especiales:e1 instruction_switch:ins{:
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                        
                :}
                |tab:numTab throw_function:func tab_re SPACE instruction_switch:ins {:
                        if(func!=null){
                                func.setIndentation(numTab);
                                if(ins!=null){
                                        ins.add(func);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:t v:e1 instruction_switch:ins{:
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:t for:e1 instruction_switch:ins{:
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:t while:e1 instruction_switch:ins{:
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:t do_while:e1 instruction_switch:ins{:
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:t if:e1 instruction_switch:ins{:
                        if(e1!=null){
                                e1.setIndentation(t);
                                if(ins!=null){
                                        ins.add(e1);
                                        RESULT = ins;
                                }
                        }else{
                                RESULT = ins;
                        }
                :}
                |tab:t switch:e1 instruction_switch:ins{:
                        
                        if(ins!=null){

                        }
                :}
                |tab:t RETORNA value:val instruction_switch:ins{:
                        Return retorna = new Return(t, cur_token.left, cur_token.right, val);
                        if(ins!=null){  
                                ins.add(retorna);
                                RESULT = ins;
                        }else{
                                ArrayList<Instruction> list = new ArrayList();
                                list.add(retorna);
                                RESULT = list;
                        }
                :}
                |tab:t CONTINUE value instruction_switch:ins{:
                        Continue newContinue = new Continue(t, cur_token.left, cur_token.right);
                        if(ins!=null){
                                ins.add(newContinue);
                                RESULT = ins;
                        }else{
                                ArrayList<Instruction> list = new ArrayList();
                                list.add(newContinue);
                                RESULT = list;
                        }
                :}
                |tab:t SPACE instruction_switch:ins{:
                        RESULT = ins;
                :}
                |SPACE instruction_switch:ins{:
                        RESULT = ins;
                :}
                |tab EXIT{:
                        ArrayList<Instruction> instructions = new ArrayList();
                        RESULT = instructions;
                :}
                |error:e instruction_switch  {: parser.report_error("No se encontro una instruccion","Valor inesperado"); :}
                |tab error:e instruction_switch {: parser.report_error("No se encontro una instruccion","Valor inesperado"); :}
                ;

switch ::= SWITCH OPEN_PARENTHESIS value:val CLOSE_PARENTHESIS tab_re SPACE cases:cas{:
                        ArrayList<Case> cases = new ArrayList();
                        if(cas !=null){
                                cases = cas;
                        }
                        Switch newSwitch = new Switch(cur_token.left, cur_token.right);
                        newSwitch.setVariable(val);
                        newSwitch.setCases(cases);
                        RESULT = newSwitch;
                :}
            | SWITCH error:e value CLOSE_PARENTHESIS tab_re SPACE cases {: parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); :}
            | SWITCH OPEN_PARENTHESIS value error:e tab_re SPACE cases {: parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); :}
            | SWITCH OPEN_PARENTHESIS value CLOSE_PARENTHESIS tab_re error:e cases {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
            ;

cases ::= tab:ind CASE value:val tab_re SPACE instruction_switch:ins cases:cas{:
                if(cas!=null){
                        ArrayList<Case> cases = cas;
                        Case newCase = new Case(ind, cur_token.left, cur_token.right);
                        newCase.setInstructions(ins);
                        newCase.setValue(val);
                        cases.add(newCase);
                        RESULT = cases;
                }
        :}
        | tab error:e value tab_re SPACE instruction_switch cases {: parser.report_error("Se esperaba la palabra \"case\" o \"default\" ","Sintaxis incorrecta"); :}
        | tab CASE value error:e instruction_switch cases {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
        | tab:ind DEFAULT tab_re SPACE {:
                ArrayList<Case> cases = new ArrayList();
                Default lastCase = new Default(ind, cur_token.left, cur_token.right);
                cases.add(lastCase);
                RESULT = cases;
        :}
        | tab DEFAULT value error:e {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
        | error:e cases {: parser.report_error("Error sintactico ","Valor inesperado"); :}
        | SPACE{:
                ArrayList<Case> cases = new ArrayList();
                RESULT = cases;
        :}
        ;

/*FOR*/

for ::= FOR OPEN_PARENTHESIS for_instructions:f  SPACE /*instruction ciclo*/{:
                if(f!=null){
                        RESULT = f;
                }
        :}
        |FOR error:e for_instructions SPACE {: parser.report_error("Se esperaba \"(\" ","Sintaxis incorrecta"); :}
        |FOR OPEN_PARENTHESIS for_instructions error:e {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
        ;

for_instructions ::= v_for:v COLON for_condition:f {:
                        if(f!=null){
                                For newFor = f;
                                newFor.setVariable(v);
                                RESULT = newFor;
                        }
                :}
                |v_for error:e for_condition {: parser.report_error("Se esperaba \";\"","Sintaxis incorrecta"); :}
                ;

for_condition ::= condition_re:con COLON for_increm:f {:
                        if(f!=null){
                                For newFor = f;
                                newFor.setCondition(con);
                                RESULT = newFor;
                        }
                :}
                |condition_re error:e for_increm {: parser.report_error("Se esperaba \";\" ","Sintaxis incorrecta"); :}
                ;

for_increm ::= increm_variables:incv  CLOSE_PARENTHESIS tab_re {:
                        For newFor = new For(cur_token.left, cur_token.right);
                        newFor.setPaso(incv);
                        RESULT = newFor;
                :}      
                |increm_variables error:e {: parser.report_error("Se esperaba \")\"","Sintaxis incorrecta"); :}
                ;

/*WHILE*/

while ::= WHILE OPEN_PARENTHESIS condition:con tab_re SPACE{:
                if(con!=null){
                        While newWhile = new While(cur_token.left, cur_token.right);
                        newWhile.setCondition(con);
                        RESULT = newWhile;
                }
        :} 
        |WHILE error:e condition SPACE {: parser.report_error("Se esperaba \"(\"","Sintaxis incorrecta"); :}
        |WHILE OPEN_PARENTHESIS condition error:e {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
        ;

/*DO WHILE*/

do_while ::= HACER tab_re SPACE {:
                DoWhile doWhile = new DoWhile(cur_token.left, cur_token.right);
                RESULT = doWhile;
        :}
        |HACER error {: parser.report_error("Se esperaba un salto de linea","Sintaxis incorrecta"); :}
        ;



