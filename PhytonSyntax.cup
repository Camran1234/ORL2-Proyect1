import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;

parser code {:
:}

terminal DECIMAL, NUMBER, PISTA, EXTIENDE, REPRODUCIR, ESPERAR, ORDENAR, ASCENDENTE, DESCENDENTE, PARES, IMPARES, 
PRIMOS, SUMARIZAR, LONGITUD, MENSAJE, PRINCIPAL, KEEP, VAR, ENTERO, DOBLE, BOOLEAN, CARACTER, CADENA, ARREGLO, SIMBOLO,
STRING, CHAR, ELSE, SWITCH, CASE, EXIT, DEFAULT, FOR, WHILE, HACER, CONTINUE, DOR, RER, DO, RE, MI, FA, SOL, LA, SI,
EQUAL, EQUALIZATION, DIFFERENTIATION, GREATER_THAN, LESSER_THAN, NULL_, GREATER, LESSER, EQUAL_MORE, INCREASE, DECREASE,
ADD, MINUS, MULTIPLY, DIV, MODULE, POW, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARENTHESIS, CLOSE_PARENTHESIS, COLON, COMA,
NAND, AND, NOR, OR, XOR, NOT, TAB, SPACE, OPEN_CURLY, CLOSE_CURLY, RETORNA , TRUE, FALSE; 

non terminal tab, function, type_function, multiple_v, function_variables, pista, d, d_, increm_variables,
increm, v, data_type, variables, variables_re, k, type, assign, equal, array, dimension, array_assign, assign_arr,
assign_arr_re, mult_values, mult_values_re, value, notas, func_especiales, reproducir_syntax, esperar_syntax,
sumarizar_syntax, longitud_syntax, mensaje_syntax, if, block_if, block_elseif, else_if, else, condition,
condition_re, comparation, switch, cases, for, for_condition, for_increm, for_instructions, while,
do_while, while_do, main_body, principal, instruction, instruction_ciclo, function_instruction, ordenar_options,
ordenar_syntax, multiple_v_re, kf, block_else, condition_for, condition_re_for, comparation_for, v_for, assign_for, tab_instruction,
tab_instruction_ciclo, tab_instruction_re, tab_instruction_ciclo_re;

/*precedences*/

precedence left ADD, MINUS;
precedence left DIV, MULTIPLY, MODULE;
precedence left POW;
precedence left NULL_;
precedence left EQUALIZATION, DIFFERENTIATION, LESSER, LESSER_THAN, GREATER, GREATER_THAN;
precedence left NOT;
precedence left AND, NAND;
precedence left OR, NOR, XOR;
precedence left OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
precedence left ELSE;

start with main_body;

main_body ::= principal main_body
        | pista main_body
        |function main_body
        |SPACE main_body
        |/*empty*/
        ;

principal ::= PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS SPACE instruction
        |PRINCIPAL error CLOSE_PARENTHESIS SPACE instruction
        |PRINCIPAL OPEN_PARENTHESIS error SPACE instruction
        |PRINCIPAL OPEN_PARENTHESIS CLOSE_PARENTHESIS error instruction
        ;

/*Declaracion de variables, asignaciones, incrementos, for, while, do_while, if, switch, funciones especiales*/
tab_instruction ::= TAB tab_instruction_re
                |SPACE tab_instruction_re
                ;

tab_instruction_re ::= TAB tab_instruction_re
                |SPACE tab_instruction_re
                |func_especiales
                |v
                |for
                |while
                |do_while
                |if
                |switch
                ;

instruction ::= tab_instruction instruction
                |/*empty*/
                ;


function_instruction ::= instruction
                        |tab RETORNA value function_instruction
                        ;
                        

/*NOTAS MUSICALES*/
notas ::= DO
        |RE
        |MI
        |FA
        |SOL
        |LA
        |SI
        |DOR
        |RER
        |error
        ;

/*FUNCIONES ESPECIALES*/

ordenar_options ::= ASCENDENTE
                |DESCENDENTE
                |PARES
                |IMPARES
                |PRIMOS
                |error 
                ;

reproducir_syntax ::= notas COMA value COMA value COMA value CLOSE_PARENTHESIS
                |notas error value COMA value COMA value CLOSE_PARENTHESIS
                |notas COMA value error value COMA value CLOSE_PARENTHESIS
                |notas COMA value COMA value error value CLOSE_PARENTHESIS
                |notas COMA value COMA value COMA value error
                    ;

esperar_syntax ::= value COMA value CLOSE_PARENTHESIS
                |value error value CLOSE_PARENTHESIS
                |value COMA value error
                ;

sumarizar_syntax ::= value CLOSE_PARENTHESIS
                |value error
                    ;

longitud_syntax ::= value CLOSE_PARENTHESIS
                |value error
                    ;

mensaje_syntax ::= value CLOSE_PARENTHESIS
                |value error
                    ;

ordenar_syntax ::= SIMBOLO COMA ordenar_options CLOSE_PARENTHESIS
                |error COMA ordenar_options CLOSE_PARENTHESIS
                |SIMBOLO error ordenar_options CLOSE_PARENTHESIS
                |SIMBOLO COMA ordenar_options error
                ;

func_especiales ::= REPRODUCIR OPEN_PARENTHESIS reproducir_syntax
                    |REPRODUCIR error reproducir_syntax
                    |SUMARIZAR OPEN_PARENTHESIS sumarizar_syntax
                    |SUMARIZAR error sumarizar_syntax
                    |LONGITUD OPEN_PARENTHESIS longitud_syntax
                    |LONGITUD error longitud_syntax
                    |ESPERAR OPEN_PARENTHESIS esperar_syntax
                    |ESPERAR error esperar_syntax
                    |MENSAJE OPEN_PARENTHESIS mensaje_syntax
                    |MENSAJE error mensaje_syntax
                    |ORDENAR OPEN_PARENTHESIS ordenar_syntax
                    |ORDENAR error ordenar_syntax
                    ;


/*TAB*/
tab ::= TAB tab
        |/*empty*/
        ;
        
/*FUNCTION*/

kf ::= KEEP
        |/*empty*/
        ;

function ::= kf type_function SIMBOLO OPEN_PARENTHESIS  multiple_v  SPACE function_instruction
                |kf type_function error OPEN_PARENTHESIS multiple_v SPACE function_instruction
                |kf type_function SIMBOLO error multiple_v SPACE function_instruction
                |kf type_function SIMBOLO OPEN_PARENTHESIS multiple_v error function_instruction
            ;

type_function ::= data_type
            ;

multiple_v ::= function_variables multiple_v_re
            |CLOSE_PARENTHESIS
            ;

multiple_v_re ::= COMA function_variables multiple_v_re
                |error function_variables multiple_v_re
                |CLOSE_PARENTHESIS
                ;

function_variables ::= data_type SIMBOLO
                        |data_type error
                    ;

/*PISTA*/
pista ::= PISTA SIMBOLO d instruction
    |PISTA error d instruction
    |PISTA SIMBOLO error instruction
    ;

d ::= EXTIENDE SIMBOLO d_
    |SPACE
    ;


d_ ::= COMA SIMBOLO d_
    |error SIMBOLO d_
    |COMA error d_
    | SPACE
    ;

/*INCREMENTACION DE VARIABLES*/
increm_variables ::= SIMBOLO increm SPACE
                    ;

increm ::= INCREASE
            |DECREASE
            |error;

/*Variables for*/

v_for ::= type SIMBOLO assign_for
        |SIMBOLO assign_for
        ;

assign_for ::= equal value COLON
    |equal array_assign COLON
    | increm COLON
    ;

/*VARIABLES*/

v ::= type variables assign
    |variables assign
    ;

data_type ::= ENTERO array
        |DOBLE array
        |BOOLEAN array
        |CADENA array
        |CARACTER array
        |error
        ;

variables ::= SIMBOLO variables_re
            |error variables_re
            ;

variables_re ::= COMA SIMBOLO variables_re
            |COMA error variables_re
            |/*empty*/
            ;

k ::=   KEEP VAR
        |VAR
        |KEEP error
        ;
type ::= k data_type 
        ;

/*ASIGNAR VALORES*/
assign ::= equal value SPACE
    |equal array_assign SPACE
    | increm SPACE
    ;

equal ::= EQUAL
        |EQUAL_MORE
        |error
        ;

array ::= ARREGLO dimension
        |/*empty*/
        ;

dimension ::= OPEN_BRACKET value CLOSE_BRACKET dimension
        |/*empty*/
        ;

array_assign ::= OPEN_CURLY assign_arr 
                ;

assign_arr ::= OPEN_CURLY mult_values assign_arr_re
                ;

assign_arr_re ::= COMA OPEN_CURLY mult_values assign_arr_re
                | CLOSE_CURLY
                ;

mult_values ::= value mult_values_re
            ;

mult_values_re ::= COMA value mult_values_re
                |CLOSE_CURLY
                ;

    /*VALORES*/
value ::= NUMBER
        |DECIMAL
        |STRING
        |CHAR
        |value ADD value
        |value MINUS value
        |value MULTIPLY value
        |value DIV value
        |value POW value
        |value MODULE value
        |OPEN_PARENTHESIS value CLOSE_PARENTHESIS
        |SIMBOLO dimension
        |TRUE
        |func_especiales
        |FALSE
        |error
        ;

/*SI*/

if ::= block_if else_if else
        ;

block_if ::= SI OPEN_PARENTHESIS condition SPACE instruction
        ;

else_if ::= else_if block_elseif
        |/*empty*/
        ;

block_elseif ::= ELSE SI OPEN_PARENTHESIS condition SPACE instruction
                |ELSE error OPEN_PARENTHESIS condition SPACE instruction
                |ELSE SI error condition SPACE instruction
                |ELSE SI OPEN_PARENTHESIS condition error instruction
                ;

else ::= block_else
        |/*empty*/
        ;

block_else ::= ELSE SPACE instruction
        |ELSE error instruction
        ;

/*CONDICION*/
/*this production end in close_parenthesis*/

condition ::= comparation condition_re
            ;

condition_re ::= AND comparation condition_re       
                |NAND comparation condition_re
                |OR comparation condition_re
                |NOR comparation condition_re
                |XOR comparation condition_re
                |CLOSE_PARENTHESIS
                |error comparation condition_re
                ;

comparation ::= comparation EQUALIZATION comparation
                |comparation DIFFERENTIATION comparation    
                |comparation GREATER comparation
                |comparation GREATER_THAN comparation
                |comparation LESSER comparation
                |comparation LESSER_THAN comparation
                |NULL_ comparation
                |NOT comparation
                |OPEN_PARENTHESIS comparation CLOSE_PARENTHESIS
                |value
                ;

/*Condicion para for*/
condition_for ::= comparation_for condition_re_for
            ;

condition_re_for ::= AND comparation_for condition_re_for       
                |NAND comparation_for condition_re_for
                |OR comparation_for condition_re_for
                |NOR comparation_for condition_re_for
                |XOR comparation_for condition_re_for
                |COLON
                |error comparation_for condition_re_for
                ;

comparation_for ::= comparation_for EQUALIZATION comparation_for
                |comparation_for DIFFERENTIATION comparation_for    
                |comparation_for GREATER comparation_for
                |comparation_for GREATER_THAN comparation_for
                |comparation_for LESSER comparation_for
                |comparation_for LESSER_THAN comparation_for
                |NULL_ comparation_for
                |NOT comparation_for
                |OPEN_PARENTHESIS comparation_for CLOSE_PARENTHESIS
                |value
                ;
/*SWITCH*/

switch ::= SWITCH OPEN_PARENTHESIS SIMBOLO CLOSE_PARENTHESIS SPACE cases
            | SWITCH error SIMBOLO CLOSE_PARENTHESIS SPACE cases
            | SWITCH OPEN_PARENTHESIS error CLOSE_PARENTHESIS SPACE cases
            | SWITCH OPEN_PARENTHESIS SIMBOLO error SPACE cases
            | SWITCH OPEN_PARENTHESIS SIMBOLO CLOSE_PARENTHESIS error cases
            ;

cases ::= tab CASE value SPACE instruction tab EXIT cases
        | tab error value SPACE instruction tab EXIT cases
        | tab CASE value error instruction tab EXIT cases
        | tab CASE value SPACE instruction tab error cases
        | tab DEFAULT value SPACE instruction tab SPACE
        | SPACE
        ;

/*FOR*/

for ::= FOR OPEN_PARENTHESIS for_instructions SPACE /*instruction ciclo*/
        ;

for_instructions ::= v_for COLON for_condition
                ;

for_condition ::= condition_for for_increm
                ;

for_increm ::= increm_variables CLOSE_PARENTHESIS
                ;

/*WHILE*/

while ::= WHILE OPEN_PARENTHESIS condition SPACE /*instruction ciclo*/
        ;

/*DO WHILE*/

do_while ::= HACER SPACE /*instruction ciclo*/ while_do
        ;

while_do ::= tab WHILE OPEN_PARENTHESIS condition SPACE 
        ;

